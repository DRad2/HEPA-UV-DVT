
HEPA_UV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd3c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800df20  0800df20  0001df20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e434  0800e434  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e434  0800e434  0001e434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e43c  0800e43c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e43c  0800e43c  0001e43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e440  0800e440  0001e440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  20000208  0800e64c  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  0800e64c  000208fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020047  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375c  00000000  00000000  000402c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  00043a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f2  00000000  00000000  00045630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024412  00000000  00000000  00046c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020e03  00000000  00000000  0006b034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efef4  00000000  00000000  0008be37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009068  00000000  00000000  0017bd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00184d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800df04 	.word	0x0800df04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800df04 	.word	0x0800df04

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <bytestowrite>:

uint8_t line[] = "\r\n";

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	80fb      	strh	r3, [r7, #6]
 800104c:	4613      	mov	r3, r2
 800104e:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;	//if size of data to be sent can fit on the page, transmit all data at once
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	2b3f      	cmp	r3, #63	; 0x3f
 8001058:	dc01      	bgt.n	800105e <bytestowrite+0x1e>
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	e003      	b.n	8001066 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;				//if size of data can't fit on a single page, transmit enough data to fill one page
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001064:	b29b      	uxth	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <EEPROM_Write>:

/* Write EEPROM */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af04      	add	r7, sp, #16
 800107a:	60ba      	str	r2, [r7, #8]
 800107c:	461a      	mov	r2, r3
 800107e:	4603      	mov	r3, r0
 8001080:	81fb      	strh	r3, [r7, #14]
 8001082:	460b      	mov	r3, r1
 8001084:	81bb      	strh	r3, [r7, #12]
 8001086:	4613      	mov	r3, r2
 8001088:	80fb      	strh	r3, [r7, #6]
// Find out the number of bit, where the page addressing starts
// Page size = 64
// log(64)/log(2) = 6 => 6 last bits of the two address bytes are reserved for byte address (0-63 range, 63 = 111111)
// The page addressing starts at bit A6
// We use 8 next bits (A6 to A13) for page bytes (0-249 range, 249 = 1111 1001)
int paddrposition = log(PAGE_SIZE)/log(2);
 800108a:	2306      	movs	r3, #6
 800108c:	61fb      	str	r3, [r7, #28]

// calculate the start page and the end page
uint16_t startPage = page;
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	84fb      	strh	r3, [r7, #38]	; 0x26
uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	89bb      	ldrh	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	da00      	bge.n	800109e <EEPROM_Write+0x2a>
 800109c:	333f      	adds	r3, #63	; 0x3f
 800109e:	119b      	asrs	r3, r3, #6
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	4413      	add	r3, r2
 80010a6:	837b      	strh	r3, [r7, #26]

// number of pages to be written
uint16_t numofpages = (endPage-startPage) + 1;
 80010a8:	8b7a      	ldrh	r2, [r7, #26]
 80010aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	3301      	adds	r3, #1
 80010b2:	833b      	strh	r3, [r7, #24]
uint16_t pos=0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	84bb      	strh	r3, [r7, #36]	; 0x24

// write the data
for (int i=0; i<numofpages; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	e039      	b.n	8001132 <EEPROM_Write+0xbe>
		 * MemAddress contains the start page
		 * It needs to be shifted by 6, so that the start page info is correctly starting at bit A6 in the two address bytes that
		 * will be sent to EEPROM
		 * offset relates to the offset inside the start page
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80010be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80010d2:	89ba      	ldrh	r2, [r7, #12]
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ffb1 	bl	8001040 <bytestowrite>
 80010de:	4603      	mov	r3, r0
 80010e0:	82bb      	strh	r3, [r7, #20]

		if(HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000) != HAL_OK)
 80010e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	4413      	add	r3, r2
 80010e8:	8af9      	ldrh	r1, [r7, #22]
 80010ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ee:	9202      	str	r2, [sp, #8]
 80010f0:	8aba      	ldrh	r2, [r7, #20]
 80010f2:	9201      	str	r2, [sp, #4]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2302      	movs	r3, #2
 80010f8:	460a      	mov	r2, r1
 80010fa:	21a0      	movs	r1, #160	; 0xa0
 80010fc:	4811      	ldr	r0, [pc, #68]	; (8001144 <EEPROM_Write+0xd0>)
 80010fe:	f004 f87f 	bl	8005200 <HAL_I2C_Mem_Write>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <EEPROM_Write+0x98>
				{
					Error_Handler();
 8001108:	f001 f97e 	bl	8002408 <Error_Handler>
				}// write the data to the EEPROM

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800110c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800110e:	3301      	adds	r3, #1
 8001110:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   	// since we will be writing to a new page, so offset will be 0
 8001112:	2300      	movs	r3, #0
 8001114:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	8abb      	ldrh	r3, [r7, #20]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 800111e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001120:	8abb      	ldrh	r3, [r7, #20]
 8001122:	4413      	add	r3, r2
 8001124:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8001126:	2005      	movs	r0, #5
 8001128:	f001 ff64 	bl	8002ff4 <HAL_Delay>
for (int i=0; i<numofpages; i++)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	3301      	adds	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
 8001132:	8b3b      	ldrh	r3, [r7, #24]
 8001134:	6a3a      	ldr	r2, [r7, #32]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbc1      	blt.n	80010be <EEPROM_Write+0x4a>
	}
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000364 	.word	0x20000364

08001148 <EEPROM_Read>:

/* Read EEPROM */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af04      	add	r7, sp, #16
 800114e:	60ba      	str	r2, [r7, #8]
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	81fb      	strh	r3, [r7, #14]
 8001156:	460b      	mov	r3, r1
 8001158:	81bb      	strh	r3, [r7, #12]
 800115a:	4613      	mov	r3, r2
 800115c:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 800115e:	2306      	movs	r3, #6
 8001160:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8001166:	88fa      	ldrh	r2, [r7, #6]
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	da00      	bge.n	8001172 <EEPROM_Read+0x2a>
 8001170:	333f      	adds	r3, #63	; 0x3f
 8001172:	119b      	asrs	r3, r3, #6
 8001174:	b29a      	uxth	r2, r3
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	4413      	add	r3, r2
 800117a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 800117c:	8b7a      	ldrh	r2, [r7, #26]
 800117e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8001188:	2300      	movs	r3, #0
 800118a:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	e031      	b.n	80011f6 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8001192:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80011a6:	89ba      	ldrh	r2, [r7, #12]
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff47 	bl	8001040 <bytestowrite>
 80011b2:	4603      	mov	r3, r0
 80011b4:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80011b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	4413      	add	r3, r2
 80011bc:	8af9      	ldrh	r1, [r7, #22]
 80011be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c2:	9202      	str	r2, [sp, #8]
 80011c4:	8aba      	ldrh	r2, [r7, #20]
 80011c6:	9201      	str	r2, [sp, #4]
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2302      	movs	r3, #2
 80011cc:	460a      	mov	r2, r1
 80011ce:	21a0      	movs	r1, #160	; 0xa0
 80011d0:	4816      	ldr	r0, [pc, #88]	; (800122c <EEPROM_Read+0xe4>)
 80011d2:	f004 f929 	bl	8005428 <HAL_I2C_Mem_Read>
		startPage += 1;
 80011d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011d8:	3301      	adds	r3, #1
 80011da:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 80011dc:	2300      	movs	r3, #0
 80011de:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80011e0:	88fa      	ldrh	r2, [r7, #6]
 80011e2:	8abb      	ldrh	r3, [r7, #20]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80011e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011ea:	8abb      	ldrh	r3, [r7, #20]
 80011ec:	4413      	add	r3, r2
 80011ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	3301      	adds	r3, #1
 80011f4:	623b      	str	r3, [r7, #32]
 80011f6:	8b3b      	ldrh	r3, [r7, #24]
 80011f8:	6a3a      	ldr	r2, [r7, #32]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbc9      	blt.n	8001192 <EEPROM_Read+0x4a>

	}
	HAL_UART_Transmit(&hlpuart1, data, strlen((const char*)(data)), HAL_MAX_DELAY);
 80011fe:	68b8      	ldr	r0, [r7, #8]
 8001200:	f7ff f85e 	bl	80002c0 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	4808      	ldr	r0, [pc, #32]	; (8001230 <EEPROM_Read+0xe8>)
 8001210:	f007 fc32 	bl	8008a78 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, line, sizeof(line), HAL_MAX_DELAY);
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	2203      	movs	r2, #3
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <EEPROM_Read+0xec>)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <EEPROM_Read+0xe8>)
 800121e:	f007 fc2b 	bl	8008a78 <HAL_UART_Transmit>
	//HAL_Delay(1000);
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000364 	.word	0x20000364
 8001230:	200003fc 	.word	0x200003fc
 8001234:	20000000 	.word	0x20000000

08001238 <EEPROM_PageErase>:

/* Erase Page */
void EEPROM_PageErase (uint16_t page)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b098      	sub	sp, #96	; 0x60
 800123c:	af04      	add	r7, sp, #16
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 8001242:	2306      	movs	r3, #6
 8001244:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	21ff      	movs	r1, #255	; 0xff
 800125a:	4618      	mov	r0, r3
 800125c:	f009 fa1d 	bl	800a69a <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8001260:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	2340      	movs	r3, #64	; 0x40
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2302      	movs	r3, #2
 8001276:	21a0      	movs	r1, #160	; 0xa0
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <EEPROM_PageErase+0x54>)
 800127a:	f003 ffc1 	bl	8005200 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay
 800127e:	2005      	movs	r0, #5
 8001280:	f001 feb8 	bl	8002ff4 <HAL_Delay>
}
 8001284:	bf00      	nop
 8001286:	3750      	adds	r7, #80	; 0x50
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000364 	.word	0x20000364

08001290 <test_can_bus>:

//char msg[100];

/* Can bus test */
void test_can_bus()
{
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af06      	add	r7, sp, #24
/* Receive data */
if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0))
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4862      	ldr	r0, [pc, #392]	; (8001424 <test_can_bus+0x194>)
 800129a:	f003 fc59 	bl	8004b50 <HAL_FDCAN_GetRxFifoFillLevel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80ba 	beq.w	800141a <test_can_bus+0x18a>
{
	HAL_UART_Transmit(&hlpuart1, "Received:", 9, HAL_MAX_DELAY);
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	2209      	movs	r2, #9
 80012ac:	495e      	ldr	r1, [pc, #376]	; (8001428 <test_can_bus+0x198>)
 80012ae:	485f      	ldr	r0, [pc, #380]	; (800142c <test_can_bus+0x19c>)
 80012b0:	f007 fbe2 	bl	8008a78 <HAL_UART_Transmit>
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80012b4:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <test_can_bus+0x1a0>)
 80012b6:	4a5f      	ldr	r2, [pc, #380]	; (8001434 <test_can_bus+0x1a4>)
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	485a      	ldr	r0, [pc, #360]	; (8001424 <test_can_bus+0x194>)
 80012bc:	f003 fb6e 	bl	800499c <HAL_FDCAN_GetRxMessage>
	HAL_Delay(500);
 80012c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c4:	f001 fe96 	bl	8002ff4 <HAL_Delay>
	sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 80012c8:	4b59      	ldr	r3, [pc, #356]	; (8001430 <test_can_bus+0x1a0>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461e      	mov	r6, r3
 80012ce:	4b58      	ldr	r3, [pc, #352]	; (8001430 <test_can_bus+0x1a0>)
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	469c      	mov	ip, r3
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <test_can_bus+0x1a0>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b55      	ldr	r3, [pc, #340]	; (8001430 <test_can_bus+0x1a0>)
 80012dc:	78db      	ldrb	r3, [r3, #3]
 80012de:	4619      	mov	r1, r3
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <test_can_bus+0x1a0>)
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <test_can_bus+0x1a0>)
 80012e8:	795b      	ldrb	r3, [r3, #5]
 80012ea:	461c      	mov	r4, r3
 80012ec:	4b50      	ldr	r3, [pc, #320]	; (8001430 <test_can_bus+0x1a0>)
 80012ee:	799b      	ldrb	r3, [r3, #6]
 80012f0:	461d      	mov	r5, r3
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <test_can_bus+0x1a0>)
 80012f4:	79db      	ldrb	r3, [r3, #7]
 80012f6:	9305      	str	r3, [sp, #20]
 80012f8:	9504      	str	r5, [sp, #16]
 80012fa:	9403      	str	r4, [sp, #12]
 80012fc:	9002      	str	r0, [sp, #8]
 80012fe:	9101      	str	r1, [sp, #4]
 8001300:	9200      	str	r2, [sp, #0]
 8001302:	4663      	mov	r3, ip
 8001304:	4632      	mov	r2, r6
 8001306:	494c      	ldr	r1, [pc, #304]	; (8001438 <test_can_bus+0x1a8>)
 8001308:	484c      	ldr	r0, [pc, #304]	; (800143c <test_can_bus+0x1ac>)
 800130a:	f009 f963 	bl	800a5d4 <siprintf>

	/* Prepare received data to be sent back */
	counter = 0;
 800130e:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <test_can_bus+0x1b0>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<8; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e019      	b.n	800134e <test_can_bus+0xbe>
	{
		/* AUX 1 increase by 1 */
		if (RxData[i] == 0)
 800131a:	4a45      	ldr	r2, [pc, #276]	; (8001430 <test_can_bus+0x1a0>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d105      	bne.n	8001332 <test_can_bus+0xa2>
		{
			counter++;
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <test_can_bus+0x1b0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <test_can_bus+0x1b0>)
 8001330:	701a      	strb	r2, [r3, #0]
		}
		TxData[i]= RxData[i]+1;
 8001332:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <test_can_bus+0x1a0>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	b2d9      	uxtb	r1, r3
 800133e:	4a41      	ldr	r2, [pc, #260]	; (8001444 <test_can_bus+0x1b4>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	460a      	mov	r2, r1
 8001346:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<8; i++)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b07      	cmp	r3, #7
 8001352:	dde2      	ble.n	800131a <test_can_bus+0x8a>
		/* AUX 2 increase by 2 */
		//TxData[i]= RxData[i] + 2;
	}
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_str, strlen((const char*)(debug_str)), HAL_MAX_DELAY);
 8001354:	4839      	ldr	r0, [pc, #228]	; (800143c <test_can_bus+0x1ac>)
 8001356:	f7fe ffb3 	bl	80002c0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	4936      	ldr	r1, [pc, #216]	; (800143c <test_can_bus+0x1ac>)
 8001364:	4831      	ldr	r0, [pc, #196]	; (800142c <test_can_bus+0x19c>)
 8001366:	f007 fb87 	bl	8008a78 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, "Sent:    ", 9, HAL_MAX_DELAY);
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	2209      	movs	r2, #9
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <test_can_bus+0x1b8>)
 8001372:	482e      	ldr	r0, [pc, #184]	; (800142c <test_can_bus+0x19c>)
 8001374:	f007 fb80 	bl	8008a78 <HAL_UART_Transmit>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8001378:	4a32      	ldr	r2, [pc, #200]	; (8001444 <test_can_bus+0x1b4>)
 800137a:	4934      	ldr	r1, [pc, #208]	; (800144c <test_can_bus+0x1bc>)
 800137c:	4829      	ldr	r0, [pc, #164]	; (8001424 <test_can_bus+0x194>)
 800137e:	f003 fac9 	bl	8004914 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <test_can_bus+0xfc>
		{
			// Transmission request Error
			  Error_Handler();
 8001388:	f001 f83e 	bl	8002408 <Error_Handler>
		}
		HAL_Delay(500);
 800138c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001390:	f001 fe30 	bl	8002ff4 <HAL_Delay>
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <test_can_bus+0x1b4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461e      	mov	r6, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <test_can_bus+0x1b4>)
 800139c:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 800139e:	469c      	mov	ip, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <test_can_bus+0x1b4>)
 80013a2:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80013a4:	461a      	mov	r2, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <test_can_bus+0x1b4>)
 80013a8:	78db      	ldrb	r3, [r3, #3]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80013aa:	4619      	mov	r1, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <test_can_bus+0x1b4>)
 80013ae:	791b      	ldrb	r3, [r3, #4]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80013b0:	4618      	mov	r0, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <test_can_bus+0x1b4>)
 80013b4:	795b      	ldrb	r3, [r3, #5]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80013b6:	461c      	mov	r4, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <test_can_bus+0x1b4>)
 80013ba:	799b      	ldrb	r3, [r3, #6]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80013bc:	461d      	mov	r5, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <test_can_bus+0x1b4>)
 80013c0:	79db      	ldrb	r3, [r3, #7]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80013c2:	9305      	str	r3, [sp, #20]
 80013c4:	9504      	str	r5, [sp, #16]
 80013c6:	9403      	str	r4, [sp, #12]
 80013c8:	9002      	str	r0, [sp, #8]
 80013ca:	9101      	str	r1, [sp, #4]
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	4663      	mov	r3, ip
 80013d0:	4632      	mov	r2, r6
 80013d2:	4919      	ldr	r1, [pc, #100]	; (8001438 <test_can_bus+0x1a8>)
 80013d4:	4819      	ldr	r0, [pc, #100]	; (800143c <test_can_bus+0x1ac>)
 80013d6:	f009 f8fd 	bl	800a5d4 <siprintf>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_str, strlen((const char*)debug_str), HAL_MAX_DELAY);
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <test_can_bus+0x1ac>)
 80013dc:	f7fe ff70 	bl	80002c0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	4914      	ldr	r1, [pc, #80]	; (800143c <test_can_bus+0x1ac>)
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <test_can_bus+0x19c>)
 80013ec:	f007 fb44 	bl	8008a78 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, NL, sizeof(NL), HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	2226      	movs	r2, #38	; 0x26
 80013f6:	4916      	ldr	r1, [pc, #88]	; (8001450 <test_can_bus+0x1c0>)
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <test_can_bus+0x19c>)
 80013fa:	f007 fb3d 	bl	8008a78 <HAL_UART_Transmit>

		if (counter == 8)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <test_can_bus+0x1b0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b08      	cmp	r3, #8
 8001404:	d103      	bne.n	800140e <test_can_bus+0x17e>
		{
			EEPROM_CAN_Msg = 1;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <test_can_bus+0x1c4>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e002      	b.n	8001414 <test_can_bus+0x184>
		}
		else EEPROM_CAN_Msg = 0;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <test_can_bus+0x1c4>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <test_can_bus+0x1b0>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	}
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001422:	bf00      	nop
 8001424:	20000300 	.word	0x20000300
 8001428:	0800df20 	.word	0x0800df20
 800142c:	200003fc 	.word	0x200003fc
 8001430:	200006d8 	.word	0x200006d8
 8001434:	200006e8 	.word	0x200006e8
 8001438:	0800df2c 	.word	0x0800df2c
 800143c:	200006b8 	.word	0x200006b8
 8001440:	20000224 	.word	0x20000224
 8001444:	200006e0 	.word	0x200006e0
 8001448:	0800df58 	.word	0x0800df58
 800144c:	20000710 	.word	0x20000710
 8001450:	20000004 	.word	0x20000004
 8001454:	20000734 	.word	0x20000734

08001458 <send_msg>:

void send_msg(uint8_t* msg, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<len; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e00b      	b.n	8001480 <send_msg+0x28>
		{
			TxData[i] = msg[i];
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	7819      	ldrb	r1, [r3, #0]
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <send_msg+0x54>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	460a      	mov	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<len; i++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbef      	blt.n	8001468 <send_msg+0x10>
		}
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8001488:	4a08      	ldr	r2, [pc, #32]	; (80014ac <send_msg+0x54>)
 800148a:	4909      	ldr	r1, [pc, #36]	; (80014b0 <send_msg+0x58>)
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <send_msg+0x5c>)
 800148e:	f003 fa41 	bl	8004914 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <send_msg+0x44>
			{
				// Transmission request Error
				  Error_Handler();
 8001498:	f000 ffb6 	bl	8002408 <Error_Handler>
			}
	HAL_Delay(500);
 800149c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a0:	f001 fda8 	bl	8002ff4 <HAL_Delay>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200006e0 	.word	0x200006e0
 80014b0:	20000710 	.word	0x20000710
 80014b4:	20000300 	.word	0x20000300

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f001 fd28 	bl	8002f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f8fb 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f000 ff07 	bl	80022d8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80014ca:	f000 fa25 	bl	8001918 <MX_FDCAN1_Init>
  MX_I2C2_Init();
 80014ce:	f000 faab 	bl	8001a28 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80014d2:	f000 fb29 	bl	8001b28 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80014d6:	f000 fc5b 	bl	8001d90 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014da:	f000 fcc9 	bl	8001e70 <MX_TIM3_Init>
  MX_ADC1_Init();
 80014de:	f000 f937 	bl	8001750 <MX_ADC1_Init>
  MX_ADC2_Init();
 80014e2:	f000 f9ad 	bl	8001840 <MX_ADC2_Init>
  MX_I2C3_Init();
 80014e6:	f000 fadf 	bl	8001aa8 <MX_I2C3_Init>
  MX_SPI2_Init();
 80014ea:	f000 fb67 	bl	8001bbc <MX_SPI2_Init>
  MX_TIM1_Init();
 80014ee:	f000 fba3 	bl	8001c38 <MX_TIM1_Init>
  MX_TIM8_Init();
 80014f2:	f000 fd37 	bl	8001f64 <MX_TIM8_Init>
  MX_TIM16_Init();
 80014f6:	f000 fde1 	bl	80020bc <MX_TIM16_Init>
  MX_TIM20_Init();
 80014fa:	f000 fe59 	bl	80021b0 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
  EEPROM_CAN_Msg = 0;
 80014fe:	4b66      	ldr	r3, [pc, #408]	; (8001698 <main+0x1e0>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Run EEPROM Test if "00 00 00 00 00 00 00 00" is received via CAN bus*/
	  if (EEPROM_CAN_Msg == 1)
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <main+0x1e0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d153      	bne.n	80015b4 <main+0xfc>
	 	  {
	 		  for (int i = 0; i < 8; i++)
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	e016      	b.n	8001540 <main+0x88>
	 		  {
	 			  dataWrite[i] = (uint8_t)(rand() % 20);
 8001512:	f008 f8fb 	bl	800970c <rand>
 8001516:	4602      	mov	r2, r0
 8001518:	4b60      	ldr	r3, [pc, #384]	; (800169c <main+0x1e4>)
 800151a:	fb83 1302 	smull	r1, r3, r3, r2
 800151e:	10d9      	asrs	r1, r3, #3
 8001520:	17d3      	asrs	r3, r2, #31
 8001522:	1ac9      	subs	r1, r1, r3
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	1ad1      	subs	r1, r2, r3
 800152e:	b2c9      	uxtb	r1, r1
 8001530:	4a5b      	ldr	r2, [pc, #364]	; (80016a0 <main+0x1e8>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	460a      	mov	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
	 		  for (int i = 0; i < 8; i++)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3301      	adds	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b07      	cmp	r3, #7
 8001544:	dde5      	ble.n	8001512 <main+0x5a>
	 		  }
	 		  HAL_UART_Transmit(&hlpuart1, dataWrite, strlen((const char*)(dataWrite)), HAL_MAX_DELAY);
 8001546:	4856      	ldr	r0, [pc, #344]	; (80016a0 <main+0x1e8>)
 8001548:	f7fe feba 	bl	80002c0 <strlen>
 800154c:	4603      	mov	r3, r0
 800154e:	b29a      	uxth	r2, r3
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	4952      	ldr	r1, [pc, #328]	; (80016a0 <main+0x1e8>)
 8001556:	4853      	ldr	r0, [pc, #332]	; (80016a4 <main+0x1ec>)
 8001558:	f007 fa8e 	bl	8008a78 <HAL_UART_Transmit>
	 		  HAL_UART_Transmit(&hlpuart1, line1, sizeof(line1), HAL_MAX_DELAY);
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2203      	movs	r2, #3
 8001562:	4951      	ldr	r1, [pc, #324]	; (80016a8 <main+0x1f0>)
 8001564:	484f      	ldr	r0, [pc, #316]	; (80016a4 <main+0x1ec>)
 8001566:	f007 fa87 	bl	8008a78 <HAL_UART_Transmit>
	 		  /* Write EEPROM */
	 		  send_msg(dataWrite, 8);
 800156a:	2108      	movs	r1, #8
 800156c:	484c      	ldr	r0, [pc, #304]	; (80016a0 <main+0x1e8>)
 800156e:	f7ff ff73 	bl	8001458 <send_msg>
	 		  EEPROM_Write(0, 0, dataWrite, sizeof(dataWrite));
 8001572:	2308      	movs	r3, #8
 8001574:	4a4a      	ldr	r2, [pc, #296]	; (80016a0 <main+0x1e8>)
 8001576:	2100      	movs	r1, #0
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fd7b 	bl	8001074 <EEPROM_Write>

	 		  /* Read EEPROM */
	 		  EEPROM_Read(0, 0, datar1, 8);
 800157e:	2308      	movs	r3, #8
 8001580:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <main+0x1f4>)
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fddf 	bl	8001148 <EEPROM_Read>
	 		  send_msg(datar1, 8);
 800158a:	2108      	movs	r1, #8
 800158c:	4847      	ldr	r0, [pc, #284]	; (80016ac <main+0x1f4>)
 800158e:	f7ff ff63 	bl	8001458 <send_msg>

	 		  EEPROM_CAN_Msg = 0;
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <main+0x1e0>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

	 		  /* Erase EEPROM */
	 		  for (uint8_t i=0; i<251; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	70fb      	strb	r3, [r7, #3]
 800159c:	e007      	b.n	80015ae <main+0xf6>
	 		  {
	 			  EEPROM_PageErase (i);
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fe48 	bl	8001238 <EEPROM_PageErase>
	 		  for (uint8_t i=0; i<251; i++)
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	3301      	adds	r3, #1
 80015ac:	70fb      	strb	r3, [r7, #3]
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	2bfa      	cmp	r3, #250	; 0xfa
 80015b2:	d9f4      	bls.n	800159e <main+0xe6>
	 		  }
	 	  }
	 	  /* CAN FD Test */
	  test_can_bus();
 80015b4:	f7ff fe6c 	bl	8001290 <test_can_bus>

	  /* Check Door sw status and reed sw status */
	  if (HAL_GPIO_ReadPin(DOOR_OPEN_MCU_GPIO_Port, DOOR_OPEN_MCU_Pin))
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	483d      	ldr	r0, [pc, #244]	; (80016b0 <main+0x1f8>)
 80015bc:	f003 fd46 	bl	800504c <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00e      	beq.n	80015e4 <main+0x12c>
	 	  {
	 		  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2110      	movs	r1, #16
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f003 fd55 	bl	800507c <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	4836      	ldr	r0, [pc, #216]	; (80016b0 <main+0x1f8>)
 80015d8:	f003 fd50 	bl	800507c <HAL_GPIO_WritePin>
	 		  ready = 1;
 80015dc:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <main+0x1fc>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e019      	b.n	8001618 <main+0x160>
	 	  }
	  else if (HAL_GPIO_ReadPin(POS_SW_MCU_GPIO_Port, POS_SW_MCU_Pin))
 80015e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e8:	4831      	ldr	r0, [pc, #196]	; (80016b0 <main+0x1f8>)
 80015ea:	f003 fd2f 	bl	800504c <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00e      	beq.n	8001612 <main+0x15a>
		  {
			  HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2110      	movs	r1, #16
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f003 fd3e 	bl	800507c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2120      	movs	r1, #32
 8001604:	482a      	ldr	r0, [pc, #168]	; (80016b0 <main+0x1f8>)
 8001606:	f003 fd39 	bl	800507c <HAL_GPIO_WritePin>
			  ready = 1;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <main+0x1fc>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e002      	b.n	8001618 <main+0x160>
		  }
	  else ready = 0;
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <main+0x1fc>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

	   /* Apply UV power if pushbutton is pressed */
	  if (ready == 0)
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <main+0x1fc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d122      	bne.n	8001666 <main+0x1ae>
	  {
		  if (!HAL_GPIO_ReadPin(UV_NO_GPIO_Port, UV_NO_Pin))
 8001620:	2104      	movs	r1, #4
 8001622:	4823      	ldr	r0, [pc, #140]	; (80016b0 <main+0x1f8>)
 8001624:	f003 fd12 	bl	800504c <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11b      	bne.n	8001666 <main+0x1ae>
		{
		  HAL_GPIO_TogglePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin);
 800162e:	2110      	movs	r1, #16
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f003 fd3a 	bl	80050ac <HAL_GPIO_TogglePin>
		  if(!HAL_GPIO_ReadPin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin))
 8001638:	2110      	movs	r1, #16
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f003 fd05 	bl	800504c <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <main+0x19c>
		  {
			  HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2120      	movs	r1, #32
 800164c:	4818      	ldr	r0, [pc, #96]	; (80016b0 <main+0x1f8>)
 800164e:	f003 fd15 	bl	800507c <HAL_GPIO_WritePin>
 8001652:	e004      	b.n	800165e <main+0x1a6>
		  }
		  else HAL_GPIO_WritePin(UV_B_CTRL_GPIO_Port, UV_B_CTRL_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2120      	movs	r1, #32
 8001658:	4815      	ldr	r0, [pc, #84]	; (80016b0 <main+0x1f8>)
 800165a:	f003 fd0f 	bl	800507c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800165e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001662:	f001 fcc7 	bl	8002ff4 <HAL_Delay>
		}
	  }

	  /* HEPA Fan Test */
	 if (!HAL_GPIO_ReadPin(HEPA_NO_GPIO_Port, HEPA_NO_Pin))
 8001666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166a:	4813      	ldr	r0, [pc, #76]	; (80016b8 <main+0x200>)
 800166c:	f003 fcee 	bl	800504c <HAL_GPIO_ReadPin>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <main+0x1d8>
			{
			  HAL_GPIO_TogglePin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin);
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f003 fd16 	bl	80050ac <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(HEPA_B_CTRL_GPIO_Port, HEPA_B_CTRL_Pin);
 8001680:	2110      	movs	r1, #16
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <main+0x200>)
 8001684:	f003 fd12 	bl	80050ac <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8001688:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800168c:	f001 fcb2 	bl	8002ff4 <HAL_Delay>
			}
	 HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f001 fcaf 	bl	8002ff4 <HAL_Delay>
	  if (EEPROM_CAN_Msg == 1)
 8001696:	e735      	b.n	8001504 <main+0x4c>
 8001698:	20000734 	.word	0x20000734
 800169c:	66666667 	.word	0x66666667
 80016a0:	20000738 	.word	0x20000738
 80016a4:	200003fc 	.word	0x200003fc
 80016a8:	2000002c 	.word	0x2000002c
 80016ac:	20000740 	.word	0x20000740
 80016b0:	48000800 	.word	0x48000800
 80016b4:	20000030 	.word	0x20000030
 80016b8:	48000400 	.word	0x48000400

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	2238      	movs	r2, #56	; 0x38
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f008 ffe5 	bl	800a69a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e2:	f004 faf9 	bl	8005cd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f0:	2302      	movs	r3, #2
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f4:	2303      	movs	r3, #3
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80016fc:	2308      	movs	r3, #8
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001708:	2302      	movs	r3, #2
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4618      	mov	r0, r3
 8001712:	f004 fb95 	bl	8005e40 <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800171c:	f000 fe74 	bl	8002408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2303      	movs	r3, #3
 8001726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2102      	movs	r1, #2
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fe99 	bl	8006470 <HAL_RCC_ClockConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001744:	f000 fe60 	bl	8002408 <Error_Handler>
  }
}
 8001748:	bf00      	nop
 800174a:	3750      	adds	r7, #80	; 0x50
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2220      	movs	r2, #32
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f008 ff96 	bl	800a69a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001770:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001774:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001778:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800177e:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001784:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <MX_ADC1_Init+0xe8>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001798:	2204      	movs	r2, #4
 800179a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <MX_ADC1_Init+0xe8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80017a8:	4b23      	ldr	r3, [pc, #140]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d8:	4817      	ldr	r0, [pc, #92]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017da:	f001 fe2d 	bl	8003438 <HAL_ADC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80017e4:	f000 fe10 	bl	8002408 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4811      	ldr	r0, [pc, #68]	; (8001838 <MX_ADC1_Init+0xe8>)
 80017f4:	f002 fd14 	bl	8004220 <HAL_ADCEx_MultiModeConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017fe:	f000 fe03 	bl	8002408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_ADC1_Init+0xec>)
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001806:	2306      	movs	r3, #6
 8001808:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800180a:	2302      	movs	r3, #2
 800180c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800180e:	237f      	movs	r3, #127	; 0x7f
 8001810:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001812:	2304      	movs	r3, #4
 8001814:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <MX_ADC1_Init+0xe8>)
 8001820:	f001 ffbe 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800182a:	f000 fded 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	3730      	adds	r7, #48	; 0x30
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000228 	.word	0x20000228
 800183c:	19200040 	.word	0x19200040

08001840 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2220      	movs	r2, #32
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f008 ff24 	bl	800a69a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <MX_ADC2_Init+0xcc>)
 8001854:	4a2e      	ldr	r2, [pc, #184]	; (8001910 <MX_ADC2_Init+0xd0>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <MX_ADC2_Init+0xcc>)
 800185a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800185e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <MX_ADC2_Init+0xcc>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <MX_ADC2_Init+0xcc>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <MX_ADC2_Init+0xcc>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_ADC2_Init+0xcc>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <MX_ADC2_Init+0xcc>)
 800187a:	2204      	movs	r2, #4
 800187c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <MX_ADC2_Init+0xcc>)
 8001880:	2200      	movs	r2, #0
 8001882:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_ADC2_Init+0xcc>)
 8001886:	2200      	movs	r2, #0
 8001888:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <MX_ADC2_Init+0xcc>)
 800188c:	2201      	movs	r2, #1
 800188e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <MX_ADC2_Init+0xcc>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_ADC2_Init+0xcc>)
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_ADC2_Init+0xcc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_ADC2_Init+0xcc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_ADC2_Init+0xcc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_ADC2_Init+0xcc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <MX_ADC2_Init+0xcc>)
 80018bc:	f001 fdbc 	bl	8003438 <HAL_ADC_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80018c6:	f000 fd9f 	bl	8002408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <MX_ADC2_Init+0xd4>)
 80018cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ce:	2306      	movs	r3, #6
 80018d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d6:	237f      	movs	r3, #127	; 0x7f
 80018d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018da:	2304      	movs	r3, #4
 80018dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	4619      	mov	r1, r3
 80018e6:	4809      	ldr	r0, [pc, #36]	; (800190c <MX_ADC2_Init+0xcc>)
 80018e8:	f001 ff5a 	bl	80037a0 <HAL_ADC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80018f2:	f000 fd89 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80018f6:	217f      	movs	r1, #127	; 0x7f
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_ADC2_Init+0xcc>)
 80018fa:	f002 fc2f 	bl	800415c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f001 fb78 	bl	8002ff4 <HAL_Delay>

  /* USER CODE END ADC2_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000294 	.word	0x20000294
 8001910:	50000100 	.word	0x50000100
 8001914:	1d500080 	.word	0x1d500080

08001918 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* CAN Tx */
  TxHeader.Identifier = 0x23;
 800191c:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 800191e:	2223      	movs	r2, #35	; 0x23
 8001920:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 8001924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001928:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 8001932:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001936:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 8001946:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800194a:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800194c:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <MX_FDCAN1_Init+0x100>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]

  /* CAN Rx */
  RxHeader.Identifier = 0x23; //0x555;
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <MX_FDCAN1_Init+0x104>)
 800195a:	2223      	movs	r2, #35	; 0x23
 800195c:	601a      	str	r2, [r3, #0]
  RxHeader.IdType = FDCAN_EXTENDED_ID;
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_FDCAN1_Init+0x104>)
 8001960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001964:	605a      	str	r2, [r3, #4]
  RxHeader.RxFrameType = FDCAN_DATA_FRAME;
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_FDCAN1_Init+0x104>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  RxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_FDCAN1_Init+0x104>)
 800196e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001972:	60da      	str	r2, [r3, #12]
  RxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_FDCAN1_Init+0x104>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  RxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_FDCAN1_Init+0x104>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  RxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_FDCAN1_Init+0x104>)
 8001982:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001986:	619a      	str	r2, [r3, #24]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <MX_FDCAN1_Init+0x10c>)
 800198c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 110;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019c0:	226e      	movs	r2, #110	; 0x6e
 80019c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 17;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019c6:	2211      	movs	r2, #17
 80019c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 32;
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019d8:	2220      	movs	r2, #32
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019de:	2201      	movs	r2, #1
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 80019f6:	f002 fe0b 	bl	8004610 <HAL_FDCAN_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_FDCAN1_Init+0xec>
  {
    Error_Handler();
 8001a00:	f000 fd02 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /* Start CAN */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_FDCAN1_Init+0x108>)
 8001a06:	f002 ff5d 	bl	80048c4 <HAL_FDCAN_Start>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_FDCAN1_Init+0xfc>
  {
	Error_Handler();
 8001a10:	f000 fcfa 	bl	8002408 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000710 	.word	0x20000710
 8001a1c:	200006e8 	.word	0x200006e8
 8001a20:	20000300 	.word	0x20000300
 8001a24:	40006400 	.word	0x40006400

08001a28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <MX_I2C2_Init+0x78>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a34:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <MX_I2C2_Init+0x7c>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a62:	480e      	ldr	r0, [pc, #56]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a64:	f003 fb3c 	bl	80050e0 <HAL_I2C_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a6e:	f000 fccb 	bl	8002408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a76:	f004 f897 	bl	8005ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a80:	f000 fcc2 	bl	8002408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_I2C2_Init+0x74>)
 8001a88:	f004 f8d9 	bl	8005c3e <HAL_I2CEx_ConfigDigitalFilter>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a92:	f000 fcb9 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000364 	.word	0x20000364
 8001aa0:	40005800 	.word	0x40005800
 8001aa4:	00602173 	.word	0x00602173

08001aa8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <MX_I2C3_Init+0x78>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00602173;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <MX_I2C3_Init+0x7c>)
 8001ab6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ae2:	480e      	ldr	r0, [pc, #56]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ae4:	f003 fafc 	bl	80050e0 <HAL_I2C_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001aee:	f000 fc8b 	bl	8002408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001af2:	2100      	movs	r1, #0
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001af6:	f004 f857 	bl	8005ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b00:	f000 fc82 	bl	8002408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b04:	2100      	movs	r1, #0
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001b08:	f004 f899 	bl	8005c3e <HAL_I2CEx_ConfigDigitalFilter>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b12:	f000 fc79 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003b0 	.word	0x200003b0
 8001b20:	40007800 	.word	0x40007800
 8001b24:	00602173 	.word	0x00602173

08001b28 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <MX_LPUART1_UART_Init+0x90>)
 8001b30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b6a:	4812      	ldr	r0, [pc, #72]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b6c:	f006 ff34 	bl	80089d8 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b76:	f000 fc47 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b7e:	f007 fcfb 	bl	8009578 <HAL_UARTEx_SetTxFifoThreshold>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b88:	f000 fc3e 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4809      	ldr	r0, [pc, #36]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001b90:	f007 fd30 	bl	80095f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b9a:	f000 fc35 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_LPUART1_UART_Init+0x8c>)
 8001ba0:	f007 fcb1 	bl	8009506 <HAL_UARTEx_DisableFifoMode>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001baa:	f000 fc2d 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200003fc 	.word	0x200003fc
 8001bb8:	40008000 	.word	0x40008000

08001bbc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <MX_SPI2_Init+0x78>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bcc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bd6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bda:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001bee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c16:	2208      	movs	r2, #8
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_SPI2_Init+0x74>)
 8001c1c:	f005 f87c 	bl	8006d18 <HAL_SPI_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c26:	f000 fbef 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000048c 	.word	0x2000048c
 8001c34:	40003800 	.word	0x40003800

08001c38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b098      	sub	sp, #96	; 0x60
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2234      	movs	r2, #52	; 0x34
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f008 fd18 	bl	800a69a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c6c:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <MX_TIM1_Init+0x154>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c7c:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c96:	483c      	ldr	r0, [pc, #240]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001c98:	f005 f940 	bl	8006f1c <HAL_TIM_PWM_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001ca2:	f000 fbb1 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4833      	ldr	r0, [pc, #204]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001cba:	f006 fd07 	bl	80086cc <HAL_TIMEx_MasterConfigSynchronization>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cc4:	f000 fba0 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc8:	2360      	movs	r3, #96	; 0x60
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4826      	ldr	r0, [pc, #152]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001cee:	f005 fcf5 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001cf8:	f000 fb86 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d00:	2208      	movs	r2, #8
 8001d02:	4619      	mov	r1, r3
 8001d04:	4820      	ldr	r0, [pc, #128]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001d06:	f005 fce9 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001d10:	f000 fb7a 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d18:	220c      	movs	r2, #12
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481a      	ldr	r0, [pc, #104]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001d1e:	f005 fcdd 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001d28:	f000 fb6e 	bl	8002408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001d6a:	f006 fd3d 	bl	80087e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001d74:	f000 fb48 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <MX_TIM1_Init+0x150>)
 8001d7a:	f000 fe91 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8001d7e:	bf00      	nop
 8001d80:	3760      	adds	r7, #96	; 0x60
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200004f0 	.word	0x200004f0
 8001d8c:	40012c00 	.word	0x40012c00

08001d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001dbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001dc6:	223f      	movs	r2, #63	; 0x3f
 8001dc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001de4:	4821      	ldr	r0, [pc, #132]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001de6:	f005 f842 	bl	8006e6e <HAL_TIM_Base_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001df0:	f000 fb0a 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481a      	ldr	r0, [pc, #104]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001e02:	f005 fd7f 	bl	8007904 <HAL_TIM_ConfigClockSource>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001e0c:	f000 fafc 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e10:	4816      	ldr	r0, [pc, #88]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001e12:	f005 f9e7 	bl	80071e4 <HAL_TIM_IC_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001e1c:	f000 faf4 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001e30:	f006 fc4c 	bl	80086cc <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001e3a:	f000 fae5 	bl	8002408 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e42:	2301      	movs	r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_TIM2_Init+0xdc>)
 8001e56:	f005 fba5 	bl	80075a4 <HAL_TIM_IC_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001e60:	f000 fad2 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3730      	adds	r7, #48	; 0x30
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000053c 	.word	0x2000053c

08001e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08e      	sub	sp, #56	; 0x38
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <MX_TIM3_Init+0xf0>)
 8001ea6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001eaa:	223f      	movs	r2, #63	; 0x3f
 8001eac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001eb6:	2227      	movs	r2, #39	; 0x27
 8001eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ec6:	4825      	ldr	r0, [pc, #148]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001ec8:	f004 ffd1 	bl	8006e6e <HAL_TIM_Base_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ed2:	f000 fa99 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481e      	ldr	r0, [pc, #120]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001ee4:	f005 fd0e 	bl	8007904 <HAL_TIM_ConfigClockSource>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eee:	f000 fa8b 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ef2:	481a      	ldr	r0, [pc, #104]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001ef4:	f005 f812 	bl	8006f1c <HAL_TIM_PWM_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001efe:	f000 fa83 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4812      	ldr	r0, [pc, #72]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001f12:	f006 fbdb 	bl	80086cc <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f1c:	f000 fa74 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f20:	2360      	movs	r3, #96	; 0x60
 8001f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001f24:	231e      	movs	r3, #30
 8001f26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	4619      	mov	r1, r3
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001f38:	f005 fbd0 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f42:	f000 fa61 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* Start PWM: DC% = Pulse/(Period+1) */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f46:	2100      	movs	r1, #0
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001f4a:	f005 f83f 	bl	8006fcc <HAL_TIM_PWM_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f4e:	4803      	ldr	r0, [pc, #12]	; (8001f5c <MX_TIM3_Init+0xec>)
 8001f50:	f000 fda6 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8001f54:	bf00      	nop
 8001f56:	3738      	adds	r7, #56	; 0x38
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000588 	.word	0x20000588
 8001f60:	40000400 	.word	0x40000400

08001f64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b098      	sub	sp, #96	; 0x60
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2234      	movs	r2, #52	; 0x34
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f008 fb82 	bl	800a69a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001f98:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <MX_TIM8_Init+0x154>)
 8001f9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001fa8:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb0:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fc2:	483c      	ldr	r0, [pc, #240]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001fc4:	f004 ffaa 	bl	8006f1c <HAL_TIM_PWM_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001fce:	f000 fa1b 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4833      	ldr	r0, [pc, #204]	; (80020b4 <MX_TIM8_Init+0x150>)
 8001fe6:	f006 fb71 	bl	80086cc <HAL_TIMEx_MasterConfigSynchronization>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001ff0:	f000 fa0a 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff4:	2360      	movs	r3, #96	; 0x60
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002000:	2300      	movs	r3, #0
 8002002:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002010:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	4826      	ldr	r0, [pc, #152]	; (80020b4 <MX_TIM8_Init+0x150>)
 800201a:	f005 fb5f 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002024:	f000 f9f0 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002028:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800202c:	2204      	movs	r2, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4820      	ldr	r0, [pc, #128]	; (80020b4 <MX_TIM8_Init+0x150>)
 8002032:	f005 fb53 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 800203c:	f000 f9e4 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002040:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002044:	2208      	movs	r2, #8
 8002046:	4619      	mov	r1, r3
 8002048:	481a      	ldr	r0, [pc, #104]	; (80020b4 <MX_TIM8_Init+0x150>)
 800204a:	f005 fb47 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8002054:	f000 f9d8 	bl	8002408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800206c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002070:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_TIM8_Init+0x150>)
 8002096:	f006 fba7 	bl	80087e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80020a0:	f000 f9b2 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM8_Init+0x150>)
 80020a6:	f000 fcfb 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 80020aa:	bf00      	nop
 80020ac:	3760      	adds	r7, #96	; 0x60
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200005d4 	.word	0x200005d4
 80020b8:	40013400 	.word	0x40013400

080020bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b094      	sub	sp, #80	; 0x50
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020d6:	463b      	mov	r3, r7
 80020d8:	2234      	movs	r2, #52	; 0x34
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f008 fadc 	bl	800a69a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <MX_TIM16_Init+0xec>)
 80020e4:	4a31      	ldr	r2, [pc, #196]	; (80021ac <MX_TIM16_Init+0xf0>)
 80020e6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <MX_TIM16_Init+0xec>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <MX_TIM16_Init+0xec>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <MX_TIM16_Init+0xec>)
 80020f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <MX_TIM16_Init+0xec>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <MX_TIM16_Init+0xec>)
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <MX_TIM16_Init+0xec>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800210e:	4826      	ldr	r0, [pc, #152]	; (80021a8 <MX_TIM16_Init+0xec>)
 8002110:	f004 fead 	bl	8006e6e <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800211a:	f000 f975 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800211e:	4822      	ldr	r0, [pc, #136]	; (80021a8 <MX_TIM16_Init+0xec>)
 8002120:	f004 fefc 	bl	8006f1c <HAL_TIM_PWM_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800212a:	f000 f96d 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212e:	2360      	movs	r3, #96	; 0x60
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002136:	2300      	movs	r3, #0
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800213a:	2300      	movs	r3, #0
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800214a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800214e:	2200      	movs	r2, #0
 8002150:	4619      	mov	r1, r3
 8002152:	4815      	ldr	r0, [pc, #84]	; (80021a8 <MX_TIM16_Init+0xec>)
 8002154:	f005 fac2 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800215e:	f000 f953 	bl	8002408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800217a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002184:	463b      	mov	r3, r7
 8002186:	4619      	mov	r1, r3
 8002188:	4807      	ldr	r0, [pc, #28]	; (80021a8 <MX_TIM16_Init+0xec>)
 800218a:	f006 fb2d 	bl	80087e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002194:	f000 f938 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002198:	4803      	ldr	r0, [pc, #12]	; (80021a8 <MX_TIM16_Init+0xec>)
 800219a:	f000 fc81 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 800219e:	bf00      	nop
 80021a0:	3750      	adds	r7, #80	; 0x50
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000620 	.word	0x20000620
 80021ac:	40014400 	.word	0x40014400

080021b0 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b098      	sub	sp, #96	; 0x60
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2234      	movs	r2, #52	; 0x34
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f008 fa5c 	bl	800a69a <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <MX_TIM20_Init+0x120>)
 80021e4:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <MX_TIM20_Init+0x124>)
 80021e6:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <MX_TIM20_Init+0x120>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <MX_TIM20_Init+0x120>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <MX_TIM20_Init+0x120>)
 80021f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fa:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <MX_TIM20_Init+0x120>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <MX_TIM20_Init+0x120>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <MX_TIM20_Init+0x120>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 800220e:	4830      	ldr	r0, [pc, #192]	; (80022d0 <MX_TIM20_Init+0x120>)
 8002210:	f004 fe84 	bl	8006f1c <HAL_TIM_PWM_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM20_Init+0x6e>
  {
    Error_Handler();
 800221a:	f000 f8f5 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800222a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800222e:	4619      	mov	r1, r3
 8002230:	4827      	ldr	r0, [pc, #156]	; (80022d0 <MX_TIM20_Init+0x120>)
 8002232:	f006 fa4b 	bl	80086cc <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM20_Init+0x90>
  {
    Error_Handler();
 800223c:	f000 f8e4 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002240:	2360      	movs	r3, #96	; 0x60
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002248:	2300      	movs	r3, #0
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800224c:	2300      	movs	r3, #0
 800224e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	481a      	ldr	r0, [pc, #104]	; (80022d0 <MX_TIM20_Init+0x120>)
 8002266:	f005 fa39 	bl	80076dc <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM20_Init+0xc4>
  {
    Error_Handler();
 8002270:	f000 f8ca 	bl	8002408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800229a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	4807      	ldr	r0, [pc, #28]	; (80022d0 <MX_TIM20_Init+0x120>)
 80022b2:	f006 fa99 	bl	80087e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM20_Init+0x110>
  {
    Error_Handler();
 80022bc:	f000 f8a4 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <MX_TIM20_Init+0x120>)
 80022c2:	f000 fbed 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 80022c6:	bf00      	nop
 80022c8:	3760      	adds	r7, #96	; 0x60
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000066c 	.word	0x2000066c
 80022d4:	40015000 	.word	0x40015000

080022d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ee:	4b43      	ldr	r3, [pc, #268]	; (80023fc <MX_GPIO_Init+0x124>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	4a42      	ldr	r2, [pc, #264]	; (80023fc <MX_GPIO_Init+0x124>)
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fa:	4b40      	ldr	r3, [pc, #256]	; (80023fc <MX_GPIO_Init+0x124>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <MX_GPIO_Init+0x124>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a3c      	ldr	r2, [pc, #240]	; (80023fc <MX_GPIO_Init+0x124>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <MX_GPIO_Init+0x124>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b37      	ldr	r3, [pc, #220]	; (80023fc <MX_GPIO_Init+0x124>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4a36      	ldr	r2, [pc, #216]	; (80023fc <MX_GPIO_Init+0x124>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232a:	4b34      	ldr	r3, [pc, #208]	; (80023fc <MX_GPIO_Init+0x124>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <MX_GPIO_Init+0x124>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	4a30      	ldr	r2, [pc, #192]	; (80023fc <MX_GPIO_Init+0x124>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <MX_GPIO_Init+0x124>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DRIVE_Pin|UV_ON_OFF_MCU_Pin|HEPA_ON_OFF_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2192      	movs	r1, #146	; 0x92
 8002352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002356:	f002 fe91 	bl	800507c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nEEPROM_WP_GPIO_Port, nEEPROM_WP_Pin, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4827      	ldr	r0, [pc, #156]	; (8002400 <MX_GPIO_Init+0x128>)
 8002362:	f002 fe8b 	bl	800507c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UV_NO_Pin DOOR_OPEN_MCU_Pin POS_SW_MCU_Pin AUX_ID_MCU_Pin */
  GPIO_InitStruct.Pin = UV_NO_Pin|DOOR_OPEN_MCU_Pin|POS_SW_MCU_Pin|AUX_ID_MCU_Pin;
 8002366:	f641 0384 	movw	r3, #6276	; 0x1884
 800236a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4821      	ldr	r0, [pc, #132]	; (8002400 <MX_GPIO_Init+0x128>)
 800237c:	f002 fce4 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DRIVE_Pin */
  GPIO_InitStruct.Pin = LED_DRIVE_Pin;
 8002380:	2302      	movs	r3, #2
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002384:	2311      	movs	r3, #17
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239a:	f002 fcd5 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_ON_OFF_MCU_Pin HEPA_ON_OFF_Pin */
  GPIO_InitStruct.Pin = UV_ON_OFF_MCU_Pin|HEPA_ON_OFF_Pin;
 800239e:	2390      	movs	r3, #144	; 0x90
 80023a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b8:	f002 fcc6 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEPA_NO_Pin */
  GPIO_InitStruct.Pin = HEPA_NO_Pin;
 80023bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEPA_NO_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <MX_GPIO_Init+0x12c>)
 80023d2:	f002 fcb9 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : nEEPROM_WP_Pin */
  GPIO_InitStruct.Pin = nEEPROM_WP_Pin;
 80023d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023dc:	2311      	movs	r3, #17
 80023de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nEEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4804      	ldr	r0, [pc, #16]	; (8002400 <MX_GPIO_Init+0x128>)
 80023f0:	f002 fcaa 	bl	8004d48 <HAL_GPIO_Init>

}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	48000800 	.word	0x48000800
 8002404:	48000400 	.word	0x48000400

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002410:	e7fe      	b.n	8002410 <Error_Handler+0x8>
	...

08002414 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_MspInit+0x44>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_MspInit+0x44>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6613      	str	r3, [r2, #96]	; 0x60
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_MspInit+0x44>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_MspInit+0x44>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x44>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x44>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800244a:	f003 fce9 	bl	8005e20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0a0      	sub	sp, #128	; 0x80
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	2250      	movs	r2, #80	; 0x50
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f008 f90c 	bl	800a69a <memset>
  if(hadc->Instance==ADC1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248a:	d156      	bne.n	800253a <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800248c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002490:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002492:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002496:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4618      	mov	r0, r3
 800249e:	f004 f9ff 	bl	80068a0 <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80024a8:	f7ff ffae 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024ac:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_ADC_MspInit+0x16c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a45      	ldr	r2, [pc, #276]	; (80025c8 <HAL_ADC_MspInit+0x16c>)
 80024b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <HAL_ADC_MspInit+0x16c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10b      	bne.n	80024d6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024be:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	4a42      	ldr	r2, [pc, #264]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a36      	ldr	r2, [pc, #216]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fa:	4b34      	ldr	r3, [pc, #208]	; (80025cc <HAL_ADC_MspInit+0x170>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = _24V_SCLD_Pin|_3V3_SCLD_Pin;
 8002506:	2303      	movs	r3, #3
 8002508:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250a:	2303      	movs	r3, #3
 800250c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002512:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002516:	4619      	mov	r1, r3
 8002518:	482d      	ldr	r0, [pc, #180]	; (80025d0 <HAL_ADC_MspInit+0x174>)
 800251a:	f002 fc15 	bl	8004d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UV_SNS_MCU_Pin;
 800251e:	2301      	movs	r3, #1
 8002520:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002522:	2303      	movs	r3, #3
 8002524:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(UV_SNS_MCU_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f002 fc08 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002538:	e041      	b.n	80025be <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <HAL_ADC_MspInit+0x178>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d13c      	bne.n	80025be <HAL_ADC_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002548:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800254a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800254e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4618      	mov	r0, r3
 8002556:	f004 f9a3 	bl	80068a0 <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_ADC_MspInit+0x108>
      Error_Handler();
 8002560:	f7ff ff52 	bl	8002408 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_ADC_MspInit+0x16c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_ADC_MspInit+0x16c>)
 800256c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_ADC_MspInit+0x16c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d10b      	bne.n	800258e <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_ADC_MspInit+0x170>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_ADC_MspInit+0x170>)
 800257c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_ADC_MspInit+0x170>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_ADC_MspInit+0x170>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_ADC_MspInit+0x170>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_ADC_MspInit+0x170>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = _3V3_SCLD_Pin;
 80025a6:	2302      	movs	r3, #2
 80025a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025aa:	2303      	movs	r3, #3
 80025ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(_3V3_SCLD_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <HAL_ADC_MspInit+0x174>)
 80025ba:	f002 fbc5 	bl	8004d48 <HAL_GPIO_Init>
}
 80025be:	bf00      	nop
 80025c0:	3780      	adds	r7, #128	; 0x80
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200007a4 	.word	0x200007a4
 80025cc:	40021000 	.word	0x40021000
 80025d0:	48000800 	.word	0x48000800
 80025d4:	50000100 	.word	0x50000100

080025d8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b09e      	sub	sp, #120	; 0x78
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2250      	movs	r2, #80	; 0x50
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f008 f84e 	bl	800a69a <memset>
  if(hfdcan->Instance==FDCAN1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a20      	ldr	r2, [pc, #128]	; (8002684 <HAL_FDCAN_MspInit+0xac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d139      	bne.n	800267c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800260e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4618      	mov	r0, r3
 800261a:	f004 f941 	bl	80068a0 <HAL_RCCEx_PeriphCLKConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002624:	f7ff fef0 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_FDCAN_MspInit+0xb0>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_FDCAN_MspInit+0xb0>)
 800262e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_FDCAN_MspInit+0xb0>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_FDCAN_MspInit+0xb0>)
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	4a10      	ldr	r2, [pc, #64]	; (8002688 <HAL_FDCAN_MspInit+0xb0>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_FDCAN_MspInit+0xb0>)
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002658:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800265c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800266a:	2309      	movs	r3, #9
 800266c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002672:	4619      	mov	r1, r3
 8002674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002678:	f002 fb66 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	3778      	adds	r7, #120	; 0x78
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40006400 	.word	0x40006400
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b0a0      	sub	sp, #128	; 0x80
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	2250      	movs	r2, #80	; 0x50
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f007 fff4 	bl	800a69a <memset>
  if(hi2c->Instance==I2C2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <HAL_I2C_MspInit+0x15c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d154      	bne.n	8002766 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 f8e9 	bl	80068a0 <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026d4:	f7ff fe98 	bl	8002408 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d8:	4b44      	ldr	r3, [pc, #272]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	4a43      	ldr	r2, [pc, #268]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e4:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fc:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin;
 8002708:	2310      	movs	r3, #16
 800270a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270c:	2312      	movs	r3, #18
 800270e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002718:	2304      	movs	r3, #4
 800271a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002720:	4619      	mov	r1, r3
 8002722:	4833      	ldr	r0, [pc, #204]	; (80027f0 <HAL_I2C_MspInit+0x164>)
 8002724:	f002 fb10 	bl	8004d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EEPROM_SDA_Pin;
 8002728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272e:	2312      	movs	r3, #18
 8002730:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800273a:	2304      	movs	r3, #4
 800273c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002748:	f002 fafe 	bl	8004d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_I2C_MspInit+0x160>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <HAL_I2C_MspInit+0x160>)
 8002752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002756:	6593      	str	r3, [r2, #88]	; 0x58
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_I2C_MspInit+0x160>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002764:	e03c      	b.n	80027e0 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C3)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_I2C_MspInit+0x168>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d137      	bne.n	80027e0 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002774:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002776:	2300      	movs	r3, #0
 8002778:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4618      	mov	r0, r3
 8002780:	f004 f88e 	bl	80068a0 <HAL_RCCEx_PeriphCLKConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_MspInit+0x102>
      Error_Handler();
 800278a:	f7ff fe3d 	bl	8002408 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_I2C_MspInit+0x160>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_I2C_MspInit+0x160>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_I2C_MspInit+0x160>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ac:	2312      	movs	r3, #18
 80027ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80027b8:	2308      	movs	r3, #8
 80027ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027c0:	4619      	mov	r1, r3
 80027c2:	480b      	ldr	r0, [pc, #44]	; (80027f0 <HAL_I2C_MspInit+0x164>)
 80027c4:	f002 fac0 	bl	8004d48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80027ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027d2:	6593      	str	r3, [r2, #88]	; 0x58
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_I2C_MspInit+0x160>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
}
 80027e0:	bf00      	nop
 80027e2:	3780      	adds	r7, #128	; 0x80
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40005800 	.word	0x40005800
 80027ec:	40021000 	.word	0x40021000
 80027f0:	48000800 	.word	0x48000800
 80027f4:	40007800 	.word	0x40007800

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b09e      	sub	sp, #120	; 0x78
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2250      	movs	r2, #80	; 0x50
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f007 ff3e 	bl	800a69a <memset>
  if(huart->Instance==LPUART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_UART_MspInit+0xa8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d136      	bne.n	8002896 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002828:	2320      	movs	r3, #32
 800282a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4618      	mov	r0, r3
 8002836:	f004 f833 	bl	80068a0 <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002840:	f7ff fde2 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_UART_MspInit+0xac>)
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_UART_MspInit+0xac>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_UART_MspInit+0xac>)
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_UART_MspInit+0xac>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <HAL_UART_MspInit+0xac>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_UART_MspInit+0xac>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002874:	230c      	movs	r3, #12
 8002876:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002884:	230c      	movs	r3, #12
 8002886:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002892:	f002 fa59 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3778      	adds	r7, #120	; 0x78
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40008000 	.word	0x40008000
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_SPI_MspInit+0x7c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d128      	bne.n	800291c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_SPI_MspInit+0x80>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_SPI_MspInit+0x80>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6593      	str	r3, [r2, #88]	; 0x58
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_SPI_MspInit+0x80>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_SPI_MspInit+0x80>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_SPI_MspInit+0x80>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_SPI_MspInit+0x80>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800290c:	2305      	movs	r3, #5
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_SPI_MspInit+0x84>)
 8002918:	f002 fa16 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40003800 	.word	0x40003800
 8002928:	40021000 	.word	0x40021000
 800292c:	48000400 	.word	0x48000400

08002930 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_TIM_PWM_MspInit+0x80>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 8002948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800294c:	6613      	str	r3, [r2, #96]	; 0x60
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 800295a:	e022      	b.n	80029a2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10c      	bne.n	8002980 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 8002968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 800296c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002970:	6613      	str	r3, [r2, #96]	; 0x60
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
}
 800297e:	e010      	b.n	80029a2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM20)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_TIM_PWM_MspInit+0x8c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10b      	bne.n	80029a2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 8002990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002994:	6613      	str	r3, [r2, #96]	; 0x60
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_TIM_PWM_MspInit+0x84>)
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40013400 	.word	0x40013400
 80029bc:	40015000 	.word	0x40015000

080029c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d131      	bne.n	8002a46 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e2:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HEPA_FG_Pin;
 8002a12:	2320      	movs	r3, #32
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a22:	2301      	movs	r3, #1
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HEPA_FG_GPIO_Port, &GPIO_InitStruct);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a30:	f002 f98a 	bl	8004d48 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	201c      	movs	r0, #28
 8002a3a:	f001 fdb4 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a3e:	201c      	movs	r0, #28
 8002a40:	f001 fdcb 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002a44:	e022      	b.n	8002a8c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <HAL_TIM_Base_MspInit+0xd8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10c      	bne.n	8002a6a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
}
 8002a68:	e010      	b.n	8002a8c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM16)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <HAL_TIM_Base_MspInit+0xdc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10b      	bne.n	8002a8c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a78:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_TIM_Base_MspInit+0xd4>)
 8002a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3730      	adds	r7, #48	; 0x30
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40014400 	.word	0x40014400

08002aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08e      	sub	sp, #56	; 0x38
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a72      	ldr	r2, [pc, #456]	; (8002c88 <HAL_TIM_MspPostInit+0x1e8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d13a      	bne.n	8002b38 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac2:	4b72      	ldr	r3, [pc, #456]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a71      	ldr	r2, [pc, #452]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ace:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a6b      	ldr	r2, [pc, #428]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae6:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC5     ------> TIM1_CH4N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = UV_B_CTRL_Pin;
 8002af2:	2320      	movs	r3, #32
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b02:	2306      	movs	r3, #6
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UV_B_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4860      	ldr	r0, [pc, #384]	; (8002c90 <HAL_TIM_MspPostInit+0x1f0>)
 8002b0e:	f002 f91b 	bl	8004d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HEPA_R_CTRL_Pin|HEPA_W_CTRL_Pin;
 8002b12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b24:	2306      	movs	r3, #6
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b32:	f002 f909 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002b36:	e0a3      	b.n	8002c80 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <HAL_TIM_MspPostInit+0x1f4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11d      	bne.n	8002b7e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	4b52      	ldr	r3, [pc, #328]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4e:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HEPA_PWM_Pin;
 8002b5a:	2340      	movs	r3, #64	; 0x40
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HEPA_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b78:	f002 f8e6 	bl	8004d48 <HAL_GPIO_Init>
}
 8002b7c:	e080      	b.n	8002c80 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a45      	ldr	r2, [pc, #276]	; (8002c98 <HAL_TIM_MspPostInit+0x1f8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d138      	bne.n	8002bfa <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b88:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b94:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UV_G_CTRL_Pin|UV_R_CTRL_Pin;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4832      	ldr	r0, [pc, #200]	; (8002c9c <HAL_TIM_MspPostInit+0x1fc>)
 8002bd4:	f002 f8b8 	bl	8004d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HEPA_G_CTRL_Pin;
 8002bd8:	2340      	movs	r3, #64	; 0x40
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002be8:	2304      	movs	r3, #4
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HEPA_G_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4827      	ldr	r0, [pc, #156]	; (8002c90 <HAL_TIM_MspPostInit+0x1f0>)
 8002bf4:	f002 f8a8 	bl	8004d48 <HAL_GPIO_Init>
}
 8002bf8:	e042      	b.n	8002c80 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM16)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <HAL_TIM_MspPostInit+0x200>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d11c      	bne.n	8002c3e <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEPA_B_CTRL_Pin;
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HEPA_B_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	4619      	mov	r1, r3
 8002c36:	4819      	ldr	r0, [pc, #100]	; (8002c9c <HAL_TIM_MspPostInit+0x1fc>)
 8002c38:	f002 f886 	bl	8004d48 <HAL_GPIO_Init>
}
 8002c3c:	e020      	b.n	8002c80 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM20)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_TIM_MspPostInit+0x204>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_MspPostInit+0x1e0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_TIM_MspPostInit+0x1ec>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UV_W_CTRL_Pin;
 8002c60:	2304      	movs	r3, #4
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002c70:	2303      	movs	r3, #3
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UV_W_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4808      	ldr	r0, [pc, #32]	; (8002c9c <HAL_TIM_MspPostInit+0x1fc>)
 8002c7c:	f002 f864 	bl	8004d48 <HAL_GPIO_Init>
}
 8002c80:	bf00      	nop
 8002c82:	3738      	adds	r7, #56	; 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000800 	.word	0x48000800
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40013400 	.word	0x40013400
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40015000 	.word	0x40015000

08002ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cac:	e7fe      	b.n	8002cac <NMI_Handler+0x4>

08002cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb2:	e7fe      	b.n	8002cb2 <HardFault_Handler+0x4>

08002cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <MemManage_Handler+0x4>

08002cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <BusFault_Handler+0x4>

08002cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <UsageFault_Handler+0x4>

08002cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf4:	f000 f960 	bl	8002fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <TIM2_IRQHandler+0x10>)
 8002d02:	f004 fad0 	bl	80072a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	2000053c 	.word	0x2000053c

08002d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
	return 1;
 8002d14:	2301      	movs	r3, #1
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_kill>:

int _kill(int pid, int sig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d2a:	f007 fd09 	bl	800a740 <__errno>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2216      	movs	r2, #22
 8002d32:	601a      	str	r2, [r3, #0]
	return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_exit>:

void _exit (int status)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ffe7 	bl	8002d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d52:	e7fe      	b.n	8002d52 <_exit+0x12>

08002d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e00a      	b.n	8002d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d66:	f3af 8000 	nop.w
 8002d6a:	4601      	mov	r1, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	b2ca      	uxtb	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	dbf0      	blt.n	8002d66 <_read+0x12>
	}

return len;
 8002d84:	687b      	ldr	r3, [r7, #4]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e009      	b.n	8002db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60ba      	str	r2, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3301      	adds	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	dbf1      	blt.n	8002da0 <_write+0x12>
	}
	return len;
 8002dbc:	687b      	ldr	r3, [r7, #4]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_close>:

int _close(int file)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dee:	605a      	str	r2, [r3, #4]
	return 0;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <_isatty>:

int _isatty(int file)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
	return 1;
 8002e06:	2301      	movs	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <_sbrk+0x5c>)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <_sbrk+0x60>)
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <_sbrk+0x64>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <_sbrk+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e60:	f007 fc6e 	bl	800a740 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	220c      	movs	r2, #12
 8002e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e009      	b.n	8002e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <_sbrk+0x64>)
 8002e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2001c000 	.word	0x2001c000
 8002e90:	00000400 	.word	0x00000400
 8002e94:	200007a8 	.word	0x200007a8
 8002e98:	20000900 	.word	0x20000900

08002e9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <SystemInit+0x20>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <SystemInit+0x20>)
 8002ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ec2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec4:	480d      	ldr	r0, [pc, #52]	; (8002efc <LoopForever+0x6>)
  ldr r1, =_edata
 8002ec6:	490e      	ldr	r1, [pc, #56]	; (8002f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <LoopForever+0xe>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ecc:	e002      	b.n	8002ed4 <LoopCopyDataInit>

08002ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed2:	3304      	adds	r3, #4

08002ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed8:	d3f9      	bcc.n	8002ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002edc:	4c0b      	ldr	r4, [pc, #44]	; (8002f0c <LoopForever+0x16>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee0:	e001      	b.n	8002ee6 <LoopFillZerobss>

08002ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee4:	3204      	adds	r2, #4

08002ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee8:	d3fb      	bcc.n	8002ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eea:	f7ff ffd7 	bl	8002e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eee:	f007 fc2d 	bl	800a74c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef2:	f7fe fae1 	bl	80014b8 <main>

08002ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ef6:	e7fe      	b.n	8002ef6 <LoopForever>
  ldr   r0, =_estack
 8002ef8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f00:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002f04:	0800e444 	.word	0x0800e444
  ldr r2, =_sbss
 8002f08:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002f0c:	200008fc 	.word	0x200008fc

08002f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC1_2_IRQHandler>

08002f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f001 fb37 	bl	8004590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f22:	200f      	movs	r0, #15
 8002f24:	f000 f80e 	bl	8002f44 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	e001      	b.n	8002f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f34:	f7ff fa6e 	bl	8002414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f38:	79fb      	ldrb	r3, [r7, #7]

}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_InitTick+0x68>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d022      	beq.n	8002f9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_InitTick+0x6c>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_InitTick+0x68>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 fb42 	bl	80045f6 <HAL_SYSTICK_Config>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d809      	bhi.n	8002f92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	f04f 30ff 	mov.w	r0, #4294967295
 8002f86:	f001 fb0e 	bl	80045a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_InitTick+0x70>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	e007      	b.n	8002fa2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e004      	b.n	8002fa2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e001      	b.n	8002fa2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000003c 	.word	0x2000003c
 8002fb0:	20000034 	.word	0x20000034
 8002fb4:	20000038 	.word	0x20000038

08002fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_IncTick+0x1c>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <HAL_IncTick+0x1c>)
 8002fc8:	6013      	str	r3, [r2, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	200007ac 	.word	0x200007ac
 8002fd8:	2000003c 	.word	0x2000003c

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_GetTick+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	200007ac 	.word	0x200007ac

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff ffee 	bl	8002fdc <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d004      	beq.n	8003018 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_Delay+0x40>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003018:	bf00      	nop
 800301a:	f7ff ffdf 	bl	8002fdc <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	429a      	cmp	r2, r3
 8003028:	d8f7      	bhi.n	800301a <HAL_Delay+0x26>
  {
  }
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2000003c 	.word	0x2000003c

08003038 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3360      	adds	r3, #96	; 0x60
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <LL_ADC_SetOffset+0x44>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	03fff000 	.word	0x03fff000

080030e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	461a      	mov	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3360      	adds	r3, #96	; 0x60
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800314a:	b480      	push	{r7}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3360      	adds	r3, #96	; 0x60
 800315a:	461a      	mov	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3360      	adds	r3, #96	; 0x60
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	615a      	str	r2, [r3, #20]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3330      	adds	r3, #48	; 0x30
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	4413      	add	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	211f      	movs	r1, #31
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	0e9b      	lsrs	r3, r3, #26
 8003214:	f003 011f 	and.w	r1, r3, #31
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3314      	adds	r3, #20
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	0e5b      	lsrs	r3, r3, #25
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	4413      	add	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	0d1b      	lsrs	r3, r3, #20
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2107      	movs	r1, #7
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	401a      	ands	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0d1b      	lsrs	r3, r3, #20
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d10a      	bne.n	80032b6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80032b4:	e00a      	b.n	80032cc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	43db      	mvns	r3, r3
 80032c4:	401a      	ands	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	407f0000 	.word	0x407f0000

080032dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80032ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6093      	str	r3, [r2, #8]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003314:	d101      	bne.n	800331a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800333c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003364:	d101      	bne.n	800336a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800338c:	f043 0202 	orr.w	r2, r3, #2
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <LL_ADC_IsEnabled+0x18>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <LL_ADC_IsEnabled+0x1a>
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d101      	bne.n	80033de <LL_ADC_IsDisableOngoing+0x18>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_ADC_IsDisableOngoing+0x1a>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d101      	bne.n	8003404 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b08      	cmp	r3, #8
 8003424:	d101      	bne.n	800342a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1a1      	b.n	8003796 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fffb 	bl	800245c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff41 	bl	8003300 <LL_ADC_IsDeepPowerDownEnabled>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff27 	bl	80032dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ff5c 	bl	8003350 <LL_ADC_IsInternalRegulatorEnabled>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d115      	bne.n	80034ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff40 	bl	8003328 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a8:	4b9a      	ldr	r3, [pc, #616]	; (8003714 <HAL_ADC_Init+0x2dc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	4a9a      	ldr	r2, [pc, #616]	; (8003718 <HAL_ADC_Init+0x2e0>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	099b      	lsrs	r3, r3, #6
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034bc:	e002      	b.n	80034c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f9      	bne.n	80034be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff3e 	bl	8003350 <LL_ADC_IsInternalRegulatorEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff76 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 8003500:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 813a 	bne.w	8003784 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 8136 	bne.w	8003784 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff37 	bl	80033a0 <LL_ADC_IsEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d137      	bne.n	80035a8 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003540:	d004      	beq.n	800354c <HAL_ADC_Init+0x114>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	; (800371c <HAL_ADC_Init+0x2e4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d10f      	bne.n	800356c <HAL_ADC_Init+0x134>
 800354c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003550:	f7ff ff26 	bl	80033a0 <LL_ADC_IsEnabled>
 8003554:	4604      	mov	r4, r0
 8003556:	4871      	ldr	r0, [pc, #452]	; (800371c <HAL_ADC_Init+0x2e4>)
 8003558:	f7ff ff22 	bl	80033a0 <LL_ADC_IsEnabled>
 800355c:	4603      	mov	r3, r0
 800355e:	4323      	orrs	r3, r4
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e008      	b.n	800357e <HAL_ADC_Init+0x146>
 800356c:	486c      	ldr	r0, [pc, #432]	; (8003720 <HAL_ADC_Init+0x2e8>)
 800356e:	f7ff ff17 	bl	80033a0 <LL_ADC_IsEnabled>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d012      	beq.n	80035a8 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800358a:	d004      	beq.n	8003596 <HAL_ADC_Init+0x15e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a62      	ldr	r2, [pc, #392]	; (800371c <HAL_ADC_Init+0x2e4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_ADC_Init+0x162>
 8003596:	4a63      	ldr	r2, [pc, #396]	; (8003724 <HAL_ADC_Init+0x2ec>)
 8003598:	e000      	b.n	800359c <HAL_ADC_Init+0x164>
 800359a:	4a63      	ldr	r2, [pc, #396]	; (8003728 <HAL_ADC_Init+0x2f0>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f7ff fd48 	bl	8003038 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7f5b      	ldrb	r3, [r3, #29]
 80035ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80035b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80035be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d106      	bne.n	80035e4 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	045b      	lsls	r3, r3, #17
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <HAL_ADC_Init+0x2f4>)
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	430b      	orrs	r3, r1
 8003612:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fedc 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 8003634:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fee9 	bl	8003412 <LL_ADC_INJ_IsConversionOngoing>
 8003640:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d17b      	bne.n	8003740 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d178      	bne.n	8003740 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003652:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800365a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366a:	f023 0302 	bic.w	r3, r3, #2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	430b      	orrs	r3, r1
 8003676:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d017      	beq.n	80036b0 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800368e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003698:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800369c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6911      	ldr	r1, [r2, #16]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80036ae:	e013      	b.n	80036d8 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d126      	bne.n	8003730 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003704:	430a      	orrs	r2, r1
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	611a      	str	r2, [r3, #16]
 8003712:	e015      	b.n	8003740 <HAL_ADC_Init+0x308>
 8003714:	20000034 	.word	0x20000034
 8003718:	053e2d63 	.word	0x053e2d63
 800371c:	50000100 	.word	0x50000100
 8003720:	50000400 	.word	0x50000400
 8003724:	50000300 	.word	0x50000300
 8003728:	50000700 	.word	0x50000700
 800372c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10c      	bne.n	8003762 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f023 010f 	bic.w	r1, r3, #15
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	1e5a      	subs	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
 8003760:	e007      	b.n	8003772 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 020f 	bic.w	r2, r2, #15
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	; 0x5c
 8003782:	e007      	b.n	8003794 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f043 0210 	orr.w	r2, r3, #16
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003794:	7ffb      	ldrb	r3, [r7, #31]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}
 800379e:	bf00      	nop

080037a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b0b6      	sub	sp, #216	; 0xd8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x24>
 80037be:	2302      	movs	r3, #2
 80037c0:	f000 bc04 	b.w	8003fcc <HAL_ADC_ConfigChannel+0x82c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fe0b 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f040 83e8 	bne.w	8003fae <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f7ff fcf6 	bl	80031dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fdf9 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 80037fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fe05 	bl	8003412 <LL_ADC_INJ_IsConversionOngoing>
 8003808:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800380c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 81d9 	bne.w	8003bc8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 81d4 	bne.w	8003bc8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003828:	d10f      	bne.n	800384a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	4619      	mov	r1, r3
 8003836:	f7ff fcfd 	bl	8003234 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fcb7 	bl	80031b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003848:	e00e      	b.n	8003868 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	461a      	mov	r2, r3
 8003858:	f7ff fcec 	bl	8003234 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fca7 	bl	80031b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	08db      	lsrs	r3, r3, #3
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d022      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6919      	ldr	r1, [r3, #16]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800389a:	f7ff fc01 	bl	80030a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6919      	ldr	r1, [r3, #16]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7ff fc4d 	bl	800314a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6919      	ldr	r1, [r3, #16]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	7f1b      	ldrb	r3, [r3, #28]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x126>
 80038c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x128>
 80038c6:	2300      	movs	r3, #0
 80038c8:	461a      	mov	r2, r3
 80038ca:	f7ff fc59 	bl	8003180 <LL_ADC_SetOffsetSaturation>
 80038ce:	e17b      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fc06 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x15c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fbfb 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	0e9b      	lsrs	r3, r3, #26
 80038f6:	f003 021f 	and.w	r2, r3, #31
 80038fa:	e01e      	b.n	800393a <HAL_ADC_ConfigChannel+0x19a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fbf0 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 8003908:	4603      	mov	r3, r0
 800390a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800391a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800391e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e004      	b.n	8003938 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800392e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003942:	2b00      	cmp	r3, #0
 8003944:	d105      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x1b2>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	0e9b      	lsrs	r3, r3, #26
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	e018      	b.n	8003984 <HAL_ADC_ConfigChannel+0x1e4>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800396e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003976:	2320      	movs	r3, #32
 8003978:	e004      	b.n	8003984 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800397a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003984:	429a      	cmp	r2, r3
 8003986:	d106      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fbbf 	bl	8003114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2101      	movs	r1, #1
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fba3 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x222>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fb98 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 80039b8:	4603      	mov	r3, r0
 80039ba:	0e9b      	lsrs	r3, r3, #26
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	e01e      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x260>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fb8d 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e004      	b.n	80039fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80039f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x278>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	e018      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x2aa>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	e004      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a44:	fab3 f383 	clz	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d106      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2200      	movs	r2, #0
 8003a54:	2101      	movs	r1, #1
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fb5c 	bl	8003114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2102      	movs	r1, #2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fb40 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x2e8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2102      	movs	r1, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fb35 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	e01e      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x326>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fb2a 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e004      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x33e>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	0e9b      	lsrs	r3, r3, #26
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	e016      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x36c>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003af0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003af2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003afe:	2320      	movs	r3, #32
 8003b00:	e004      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d106      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fafb 	bl	8003114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2103      	movs	r1, #3
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fadf 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x3aa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2103      	movs	r1, #3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fad4 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 8003b40:	4603      	mov	r3, r0
 8003b42:	0e9b      	lsrs	r3, r3, #26
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	e017      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x3da>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2103      	movs	r1, #3
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fac9 	bl	80030e8 <LL_ADC_GetOffsetChannel>
 8003b56:	4603      	mov	r3, r0
 8003b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b64:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	e003      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x3f2>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	e011      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x416>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003baa:	2320      	movs	r3, #32
 8003bac:	e003      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d106      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2103      	movs	r1, #3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff faa6 	bl	8003114 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fbe7 	bl	80033a0 <LL_ADC_IsEnabled>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 813d 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7ff fb50 	bl	800328c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4aa2      	ldr	r2, [pc, #648]	; (8003e7c <HAL_ADC_ConfigChannel+0x6dc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	f040 812e 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x480>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0e9b      	lsrs	r3, r3, #26
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	bf94      	ite	ls
 8003c18:	2301      	movls	r3, #1
 8003c1a:	2300      	movhi	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e019      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x4b4>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c30:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	e003      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	2b09      	cmp	r3, #9
 8003c4c:	bf94      	ite	ls
 8003c4e:	2301      	movls	r3, #1
 8003c50:	2300      	movhi	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d079      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d107      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x4d4>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	069b      	lsls	r3, r3, #26
 8003c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c72:	e015      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x500>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	069b      	lsls	r3, r3, #26
 8003c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x520>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0e9b      	lsrs	r3, r3, #26
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	2101      	movs	r1, #1
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	e017      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x550>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003cd8:	2320      	movs	r3, #32
 8003cda:	e003      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf0:	ea42 0103 	orr.w	r1, r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x576>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0e9b      	lsrs	r3, r3, #26
 8003d06:	3301      	adds	r3, #1
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	051b      	lsls	r3, r3, #20
 8003d14:	e018      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x5a8>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e003      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	e07e      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x5c8>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	3301      	adds	r3, #1
 8003d60:	069b      	lsls	r3, r3, #26
 8003d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d66:	e015      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x5f4>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	069b      	lsls	r3, r3, #26
 8003d90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x614>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	3301      	adds	r3, #1
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	e017      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x644>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	61fb      	str	r3, [r7, #28]
  return result;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	e003      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2101      	movs	r1, #1
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	ea42 0103 	orr.w	r1, r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x670>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	0e9b      	lsrs	r3, r3, #26
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	3b1e      	subs	r3, #30
 8003e08:	051b      	lsls	r3, r3, #20
 8003e0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	e01b      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x6a8>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	613b      	str	r3, [r7, #16]
  return result;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e28:	2320      	movs	r3, #32
 8003e2a:	e003      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f003 021f 	and.w	r2, r3, #31
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	3b1e      	subs	r3, #30
 8003e42:	051b      	lsls	r3, r3, #20
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	6892      	ldr	r2, [r2, #8]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7ff f9f0 	bl	8003234 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_ADC_ConfigChannel+0x6e0>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80af 	beq.w	8003fc0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e6a:	d004      	beq.n	8003e76 <HAL_ADC_ConfigChannel+0x6d6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <HAL_ADC_ConfigChannel+0x6e4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10a      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x6ec>
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e78:	e009      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x6ee>
 8003e7a:	bf00      	nop
 8003e7c:	407f0000 	.word	0x407f0000
 8003e80:	80080000 	.word	0x80080000
 8003e84:	50000100 	.word	0x50000100
 8003e88:	50000300 	.word	0x50000300
 8003e8c:	4b51      	ldr	r3, [pc, #324]	; (8003fd4 <HAL_ADC_ConfigChannel+0x834>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f8f8 	bl	8003084 <LL_ADC_GetCommonPathInternalCh>
 8003e94:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a4e      	ldr	r2, [pc, #312]	; (8003fd8 <HAL_ADC_ConfigChannel+0x838>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_ADC_ConfigChannel+0x70c>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4d      	ldr	r2, [pc, #308]	; (8003fdc <HAL_ADC_ConfigChannel+0x83c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d134      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d12e      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec0:	d17e      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eca:	d004      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x736>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a43      	ldr	r2, [pc, #268]	; (8003fe0 <HAL_ADC_ConfigChannel+0x840>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x73a>
 8003ed6:	4a43      	ldr	r2, [pc, #268]	; (8003fe4 <HAL_ADC_ConfigChannel+0x844>)
 8003ed8:	e000      	b.n	8003edc <HAL_ADC_ConfigChannel+0x73c>
 8003eda:	4a3e      	ldr	r2, [pc, #248]	; (8003fd4 <HAL_ADC_ConfigChannel+0x834>)
 8003edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f7ff f8b9 	bl	800305e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eec:	4b3e      	ldr	r3, [pc, #248]	; (8003fe8 <HAL_ADC_ConfigChannel+0x848>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	4a3e      	ldr	r2, [pc, #248]	; (8003fec <HAL_ADC_ConfigChannel+0x84c>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	4613      	mov	r3, r2
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f06:	e002      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f9      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f14:	e054      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a35      	ldr	r2, [pc, #212]	; (8003ff0 <HAL_ADC_ConfigChannel+0x850>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d120      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x7c2>
 8003f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11a      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f34:	d144      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3e:	d004      	beq.n	8003f4a <HAL_ADC_ConfigChannel+0x7aa>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <HAL_ADC_ConfigChannel+0x840>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x7ae>
 8003f4a:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <HAL_ADC_ConfigChannel+0x844>)
 8003f4c:	e000      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x7b0>
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_ADC_ConfigChannel+0x834>)
 8003f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7ff f87f 	bl	800305e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f60:	e02e      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_ADC_ConfigChannel+0x854>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d129      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d123      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_ADC_ConfigChannel+0x840>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01e      	beq.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8a:	d004      	beq.n	8003f96 <HAL_ADC_ConfigChannel+0x7f6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <HAL_ADC_ConfigChannel+0x840>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x7fa>
 8003f96:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <HAL_ADC_ConfigChannel+0x844>)
 8003f98:	e000      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x7fc>
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <HAL_ADC_ConfigChannel+0x834>)
 8003f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f7ff f859 	bl	800305e <LL_ADC_SetCommonPathInternalCh>
 8003fac:	e008      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fc8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	37d8      	adds	r7, #216	; 0xd8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	50000700 	.word	0x50000700
 8003fd8:	c3210000 	.word	0xc3210000
 8003fdc:	90c00010 	.word	0x90c00010
 8003fe0:	50000100 	.word	0x50000100
 8003fe4:	50000300 	.word	0x50000300
 8003fe8:	20000034 	.word	0x20000034
 8003fec:	053e2d63 	.word	0x053e2d63
 8003ff0:	c7520000 	.word	0xc7520000
 8003ff4:	cb840000 	.word	0xcb840000

08003ff8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff f9de 	bl	80033c6 <LL_ADC_IsDisableOngoing>
 800400a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff f9c5 	bl	80033a0 <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d047      	beq.n	80040ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d144      	bne.n	80040ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030d 	and.w	r3, r3, #13
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10c      	bne.n	800404a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff f99f 	bl	8003378 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2203      	movs	r2, #3
 8004040:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004042:	f7fe ffcb 	bl	8002fdc <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004048:	e029      	b.n	800409e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	f043 0210 	orr.w	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e023      	b.n	80040ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004066:	f7fe ffb9 	bl	8002fdc <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d914      	bls.n	800409e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	f043 0210 	orr.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e007      	b.n	80040ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1dc      	bne.n	8004066 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <LL_ADC_IsEnabled>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <LL_ADC_IsEnabled+0x18>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_ADC_IsEnabled+0x1a>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_StartCalibration>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80040ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_ADC_IsCalibrationOnGoing>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800411e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004122:	d101      	bne.n	8004128 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_ADC_REG_IsConversionOngoing>:
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b04      	cmp	r3, #4
 8004148:	d101      	bne.n	800414e <LL_ADC_REG_IsConversionOngoing+0x18>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_ADCEx_Calibration_Start+0x1c>
 8004174:	2302      	movs	r3, #2
 8004176:	e04d      	b.n	8004214 <HAL_ADCEx_Calibration_Start+0xb8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff39 	bl	8003ff8 <ADC_Disable>
 8004186:	4603      	mov	r3, r0
 8004188:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d136      	bne.n	80041fe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004198:	f023 0302 	bic.w	r3, r3, #2
 800419c:	f043 0202 	orr.w	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff96 	bl	80040dc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041b0:	e014      	b.n	80041dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_ADCEx_Calibration_Start+0xc0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d90d      	bls.n	80041dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	f023 0312 	bic.w	r3, r3, #18
 80041c8:	f043 0210 	orr.w	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e01b      	b.n	8004214 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff94 	bl	800410e <LL_ADC_IsCalibrationOnGoing>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e2      	bne.n	80041b2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f0:	f023 0303 	bic.w	r3, r3, #3
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80041fc:	e005      	b.n	800420a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	f043 0210 	orr.w	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	0004de01 	.word	0x0004de01

08004220 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b0a1      	sub	sp, #132	; 0x84
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800423a:	2302      	movs	r3, #2
 800423c:	e0cb      	b.n	80043d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004246:	2300      	movs	r3, #0
 8004248:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800424a:	2300      	movs	r3, #0
 800424c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004256:	d102      	bne.n	800425e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004258:	4b61      	ldr	r3, [pc, #388]	; (80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	e001      	b.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0aa      	b.n	80043d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff57 	bl	8004136 <LL_ADC_REG_IsConversionOngoing>
 8004288:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff51 	bl	8004136 <LL_ADC_REG_IsConversionOngoing>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 808c 	bne.w	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800429c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 8088 	bne.w	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ac:	d004      	beq.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80042b8:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80042ba:	e000      	b.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80042bc:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80042be:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d041      	beq.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042da:	035b      	lsls	r3, r3, #13
 80042dc:	430b      	orrs	r3, r1
 80042de:	431a      	orrs	r2, r3
 80042e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ec:	d004      	beq.n	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10f      	bne.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80042f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042fc:	f7ff fedb 	bl	80040b6 <LL_ADC_IsEnabled>
 8004300:	4604      	mov	r4, r0
 8004302:	4837      	ldr	r0, [pc, #220]	; (80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004304:	f7ff fed7 	bl	80040b6 <LL_ADC_IsEnabled>
 8004308:	4603      	mov	r3, r0
 800430a:	4323      	orrs	r3, r4
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e008      	b.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8004318:	4834      	ldr	r0, [pc, #208]	; (80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800431a:	f7ff fecc 	bl	80040b6 <LL_ADC_IsEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d04c      	beq.n	80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800432e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004336:	f023 030f 	bic.w	r3, r3, #15
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	6892      	ldr	r2, [r2, #8]
 8004342:	430a      	orrs	r2, r1
 8004344:	431a      	orrs	r2, r3
 8004346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004348:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800434a:	e03d      	b.n	80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800434c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004356:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004360:	d004      	beq.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10f      	bne.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 800436c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004370:	f7ff fea1 	bl	80040b6 <LL_ADC_IsEnabled>
 8004374:	4604      	mov	r4, r0
 8004376:	481a      	ldr	r0, [pc, #104]	; (80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004378:	f7ff fe9d 	bl	80040b6 <LL_ADC_IsEnabled>
 800437c:	4603      	mov	r3, r0
 800437e:	4323      	orrs	r3, r4
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e008      	b.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 800438c:	4817      	ldr	r0, [pc, #92]	; (80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800438e:	f7ff fe92 	bl	80040b6 <LL_ADC_IsEnabled>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d012      	beq.n	80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043aa:	f023 030f 	bic.w	r3, r3, #15
 80043ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043b2:	e009      	b.n	80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80043c6:	e000      	b.n	80043ca <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3784      	adds	r7, #132	; 0x84
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}
 80043de:	bf00      	nop
 80043e0:	50000100 	.word	0x50000100
 80043e4:	50000300 	.word	0x50000300
 80043e8:	50000700 	.word	0x50000700
 80043ec:	50000400 	.word	0x50000400

080043f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <__NVIC_SetPriorityGrouping+0x44>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800440c:	4013      	ands	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800441c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004422:	4a04      	ldr	r2, [pc, #16]	; (8004434 <__NVIC_SetPriorityGrouping+0x44>)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	60d3      	str	r3, [r2, #12]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <__NVIC_GetPriorityGrouping+0x18>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	f003 0307 	and.w	r3, r3, #7
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	2b00      	cmp	r3, #0
 8004464:	db0b      	blt.n	800447e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <__NVIC_EnableIRQ+0x38>)
 800446e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2001      	movs	r0, #1
 8004476:	fa00 f202 	lsl.w	r2, r0, r2
 800447a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000e100 	.word	0xe000e100

08004490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	6039      	str	r1, [r7, #0]
 800449a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	db0a      	blt.n	80044ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	490c      	ldr	r1, [pc, #48]	; (80044dc <__NVIC_SetPriority+0x4c>)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	440b      	add	r3, r1
 80044b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b8:	e00a      	b.n	80044d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	4908      	ldr	r1, [pc, #32]	; (80044e0 <__NVIC_SetPriority+0x50>)
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	3b04      	subs	r3, #4
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	440b      	add	r3, r1
 80044ce:	761a      	strb	r2, [r3, #24]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000e100 	.word	0xe000e100
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f1c3 0307 	rsb	r3, r3, #7
 80044fe:	2b04      	cmp	r3, #4
 8004500:	bf28      	it	cs
 8004502:	2304      	movcs	r3, #4
 8004504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3304      	adds	r3, #4
 800450a:	2b06      	cmp	r3, #6
 800450c:	d902      	bls.n	8004514 <NVIC_EncodePriority+0x30>
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3b03      	subs	r3, #3
 8004512:	e000      	b.n	8004516 <NVIC_EncodePriority+0x32>
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004518:	f04f 32ff 	mov.w	r2, #4294967295
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	401a      	ands	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800452c:	f04f 31ff 	mov.w	r1, #4294967295
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43d9      	mvns	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800453c:	4313      	orrs	r3, r2
         );
}
 800453e:	4618      	mov	r0, r3
 8004540:	3724      	adds	r7, #36	; 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3b01      	subs	r3, #1
 8004558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455c:	d301      	bcc.n	8004562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800455e:	2301      	movs	r3, #1
 8004560:	e00f      	b.n	8004582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <SysTick_Config+0x40>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3b01      	subs	r3, #1
 8004568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800456a:	210f      	movs	r1, #15
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	f7ff ff8e 	bl	8004490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <SysTick_Config+0x40>)
 8004576:	2200      	movs	r2, #0
 8004578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <SysTick_Config+0x40>)
 800457c:	2207      	movs	r2, #7
 800457e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	e000e010 	.word	0xe000e010

08004590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff29 	bl	80043f0 <__NVIC_SetPriorityGrouping>
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	4603      	mov	r3, r0
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045b4:	f7ff ff40 	bl	8004438 <__NVIC_GetPriorityGrouping>
 80045b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	6978      	ldr	r0, [r7, #20]
 80045c0:	f7ff ff90 	bl	80044e4 <NVIC_EncodePriority>
 80045c4:	4602      	mov	r2, r0
 80045c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff5f 	bl	8004490 <__NVIC_SetPriority>
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	4603      	mov	r3, r0
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff33 	bl	8004454 <__NVIC_EnableIRQ>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ffa4 	bl	800454c <SysTick_Config>
 8004604:	4603      	mov	r3, r0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e147      	b.n	80048b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd ffce 	bl	80025d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0210 	bic.w	r2, r2, #16
 800464a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800464c:	f7fe fcc6 	bl	8002fdc <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004652:	e012      	b.n	800467a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004654:	f7fe fcc2 	bl	8002fdc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b0a      	cmp	r3, #10
 8004660:	d90b      	bls.n	800467a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2203      	movs	r2, #3
 8004672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e11b      	b.n	80048b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b08      	cmp	r3, #8
 8004686:	d0e5      	beq.n	8004654 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004698:	f7fe fca0 	bl	8002fdc <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800469e:	e012      	b.n	80046c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046a0:	f7fe fc9c 	bl	8002fdc <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b0a      	cmp	r3, #10
 80046ac:	d90b      	bls.n	80046c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2203      	movs	r2, #3
 80046be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0f5      	b.n	80048b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0e5      	beq.n	80046a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0202 	orr.w	r2, r2, #2
 80046e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a74      	ldr	r2, [pc, #464]	; (80048bc <HAL_FDCAN_Init+0x2ac>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d103      	bne.n	80046f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80046ee:	4a74      	ldr	r2, [pc, #464]	; (80048c0 <HAL_FDCAN_Init+0x2b0>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7c1b      	ldrb	r3, [r3, #16]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d108      	bne.n	8004710 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470c:	619a      	str	r2, [r3, #24]
 800470e:	e007      	b.n	8004720 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800471e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7c5b      	ldrb	r3, [r3, #17]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d108      	bne.n	800473a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004736:	619a      	str	r2, [r3, #24]
 8004738:	e007      	b.n	800474a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004748:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7c9b      	ldrb	r3, [r3, #18]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d108      	bne.n	8004764 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004760:	619a      	str	r2, [r3, #24]
 8004762:	e007      	b.n	8004774 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004772:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004798:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0210 	bic.w	r2, r2, #16
 80047a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0204 	orr.w	r2, r2, #4
 80047c0:	619a      	str	r2, [r3, #24]
 80047c2:	e02c      	b.n	800481e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d028      	beq.n	800481e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d01c      	beq.n	800480e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0210 	orr.w	r2, r2, #16
 80047f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d110      	bne.n	800481e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0220 	orr.w	r2, r2, #32
 800480a:	619a      	str	r2, [r3, #24]
 800480c:	e007      	b.n	800481e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0220 	orr.w	r2, r2, #32
 800481c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	3b01      	subs	r3, #1
 8004824:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	3b01      	subs	r3, #1
 800482c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800482e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004836:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	3b01      	subs	r3, #1
 8004840:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004846:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004848:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004852:	d115      	bne.n	8004880 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	3b01      	subs	r3, #1
 8004860:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004862:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	3b01      	subs	r3, #1
 800486a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800486c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	3b01      	subs	r3, #1
 8004876:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800487c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800487e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f978 	bl	8004b8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40006400 	.word	0x40006400
 80048c0:	40006500 	.word	0x40006500

080048c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d110      	bne.n	80048fa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0201 	bic.w	r2, r2, #1
 80048ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e006      	b.n	8004908 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fe:	f043 0204 	orr.w	r2, r3, #4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
  }
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d12c      	bne.n	8004986 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e023      	b.n	8004994 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f974 	bl	8004c50 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2101      	movs	r1, #1
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	fa01 f202 	lsl.w	r2, r1, r2
 8004974:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004978:	2201      	movs	r2, #1
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e006      	b.n	8004994 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498a:	f043 0208 	orr.w	r2, r3, #8
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800499c:	b480      	push	{r7}
 800499e:	b08b      	sub	sp, #44	; 0x2c
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80049b2:	7efb      	ldrb	r3, [r7, #27]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f040 80bc 	bne.w	8004b32 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d121      	bne.n	8004a04 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d107      	bne.n	80049e0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0af      	b.n	8004b40 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	440b      	add	r3, r1
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
 8004a02:	e020      	b.n	8004a46 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e08d      	b.n	8004b40 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	0c9b      	lsrs	r3, r3, #18
 8004a60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e005      	b.n	8004a76 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	3304      	adds	r3, #4
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	0e1b      	lsrs	r3, r3, #24
 8004ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	0fda      	lsrs	r2, r3, #31
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	3304      	adds	r3, #4
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	e00a      	b.n	8004b00 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	441a      	add	r2, r3
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	440b      	add	r3, r1
 8004af6:	7812      	ldrb	r2, [r2, #0]
 8004af8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	3301      	adds	r3, #1
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	4a11      	ldr	r2, [pc, #68]	; (8004b4c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004b08:	5cd3      	ldrb	r3, [r2, r3]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d3eb      	bcc.n	8004aea <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d105      	bne.n	8004b24 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004b22:	e004      	b.n	8004b2e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e006      	b.n	8004b40 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b36:	f043 0208 	orr.w	r2, r3, #8
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
  }
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	372c      	adds	r7, #44	; 0x2c
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	0800df7c 	.word	0x0800df7c

08004b50 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d107      	bne.n	8004b70 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e006      	b.n	8004b7e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004b94:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004b96:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2b      	ldr	r2, [pc, #172]	; (8004c4c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d103      	bne.n	8004baa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ba8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb8:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	041a      	lsls	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bde:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	061a      	lsls	r2, r3, #24
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e005      	b.n	8004c2c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3f3      	bcc.n	8004c20 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	4000a400 	.word	0x4000a400
 8004c4c:	40006800 	.word	0x40006800

08004c50 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b089      	sub	sp, #36	; 0x24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004c6e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	e00a      	b.n	8004c92 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004c84:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004c8a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c90:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004c9c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004ca2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004ca8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	440b      	add	r3, r1
 8004cc2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e020      	b.n	8004d24 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	3303      	adds	r3, #3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	440b      	add	r3, r1
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004cfa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	440b      	add	r3, r1
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004d08:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	440a      	add	r2, r1
 8004d10:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004d12:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3304      	adds	r3, #4
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	4a06      	ldr	r2, [pc, #24]	; (8004d44 <FDCAN_CopyMessageToRAM+0xf4>)
 8004d2c:	5cd3      	ldrb	r3, [r2, r3]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d3d5      	bcc.n	8004ce2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	3724      	adds	r7, #36	; 0x24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	0800df7c 	.word	0x0800df7c

08004d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d56:	e15a      	b.n	800500e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	4013      	ands	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 814c 	beq.w	8005008 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d005      	beq.n	8004d88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d130      	bne.n	8004dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2203      	movs	r2, #3
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f003 0201 	and.w	r2, r3, #1
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d017      	beq.n	8004e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	2203      	movs	r2, #3
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d123      	bne.n	8004e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	08da      	lsrs	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3208      	adds	r2, #8
 8004e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	220f      	movs	r2, #15
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	08da      	lsrs	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3208      	adds	r2, #8
 8004e74:	6939      	ldr	r1, [r7, #16]
 8004e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	2203      	movs	r2, #3
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 0203 	and.w	r2, r3, #3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80a6 	beq.w	8005008 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ebc:	4b5b      	ldr	r3, [pc, #364]	; (800502c <HAL_GPIO_Init+0x2e4>)
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	4a5a      	ldr	r2, [pc, #360]	; (800502c <HAL_GPIO_Init+0x2e4>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6613      	str	r3, [r2, #96]	; 0x60
 8004ec8:	4b58      	ldr	r3, [pc, #352]	; (800502c <HAL_GPIO_Init+0x2e4>)
 8004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ed4:	4a56      	ldr	r2, [pc, #344]	; (8005030 <HAL_GPIO_Init+0x2e8>)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	220f      	movs	r2, #15
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004efe:	d01f      	beq.n	8004f40 <HAL_GPIO_Init+0x1f8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a4c      	ldr	r2, [pc, #304]	; (8005034 <HAL_GPIO_Init+0x2ec>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d019      	beq.n	8004f3c <HAL_GPIO_Init+0x1f4>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a4b      	ldr	r2, [pc, #300]	; (8005038 <HAL_GPIO_Init+0x2f0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_GPIO_Init+0x1f0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a4a      	ldr	r2, [pc, #296]	; (800503c <HAL_GPIO_Init+0x2f4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00d      	beq.n	8004f34 <HAL_GPIO_Init+0x1ec>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a49      	ldr	r2, [pc, #292]	; (8005040 <HAL_GPIO_Init+0x2f8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <HAL_GPIO_Init+0x1e8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a48      	ldr	r2, [pc, #288]	; (8005044 <HAL_GPIO_Init+0x2fc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d101      	bne.n	8004f2c <HAL_GPIO_Init+0x1e4>
 8004f28:	2305      	movs	r3, #5
 8004f2a:	e00a      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f2c:	2306      	movs	r3, #6
 8004f2e:	e008      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f30:	2304      	movs	r3, #4
 8004f32:	e006      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f34:	2303      	movs	r3, #3
 8004f36:	e004      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e002      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f40:	2300      	movs	r3, #0
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	f002 0203 	and.w	r2, r2, #3
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	4093      	lsls	r3, r2
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f52:	4937      	ldr	r1, [pc, #220]	; (8005030 <HAL_GPIO_Init+0x2e8>)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f60:	4b39      	ldr	r3, [pc, #228]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f84:	4a30      	ldr	r2, [pc, #192]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f8a:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	43db      	mvns	r3, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fae:	4a26      	ldr	r2, [pc, #152]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fd8:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fde:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4013      	ands	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005002:	4a11      	ldr	r2, [pc, #68]	; (8005048 <HAL_GPIO_Init+0x300>)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	f47f ae9d 	bne.w	8004d58 <HAL_GPIO_Init+0x10>
  }
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40021000 	.word	0x40021000
 8005030:	40010000 	.word	0x40010000
 8005034:	48000400 	.word	0x48000400
 8005038:	48000800 	.word	0x48000800
 800503c:	48000c00 	.word	0x48000c00
 8005040:	48001000 	.word	0x48001000
 8005044:	48001400 	.word	0x48001400
 8005048:	40010400 	.word	0x40010400

0800504c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	e001      	b.n	800506e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
 8005088:	4613      	mov	r3, r2
 800508a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800508c:	787b      	ldrb	r3, [r7, #1]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005092:	887a      	ldrh	r2, [r7, #2]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005098:	e002      	b.n	80050a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800509a:	887a      	ldrh	r2, [r7, #2]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050be:	887a      	ldrh	r2, [r7, #2]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4013      	ands	r3, r2
 80050c4:	041a      	lsls	r2, r3, #16
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	43d9      	mvns	r1, r3
 80050ca:	887b      	ldrh	r3, [r7, #2]
 80050cc:	400b      	ands	r3, r1
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	619a      	str	r2, [r3, #24]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e081      	b.n	80051f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fd fac0 	bl	800268c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2224      	movs	r2, #36	; 0x24
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	e006      	b.n	8005168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d104      	bne.n	800517a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800519c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4603      	mov	r3, r0
 8005210:	817b      	strh	r3, [r7, #10]
 8005212:	460b      	mov	r3, r1
 8005214:	813b      	strh	r3, [r7, #8]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b20      	cmp	r3, #32
 8005224:	f040 80f9 	bne.w	800541a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_I2C_Mem_Write+0x34>
 800522e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0ed      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_I2C_Mem_Write+0x4e>
 800524a:	2302      	movs	r3, #2
 800524c:	e0e6      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005256:	f7fd fec1 	bl	8002fdc <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2319      	movs	r3, #25
 8005262:	2201      	movs	r2, #1
 8005264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fac3 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0d1      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2221      	movs	r2, #33	; 0x21
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2240      	movs	r2, #64	; 0x40
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a3a      	ldr	r2, [r7, #32]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052a0:	88f8      	ldrh	r0, [r7, #6]
 80052a2:	893a      	ldrh	r2, [r7, #8]
 80052a4:	8979      	ldrh	r1, [r7, #10]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	4603      	mov	r3, r0
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f9d3 	bl	800565c <I2C_RequestMemoryWrite>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0a9      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2bff      	cmp	r3, #255	; 0xff
 80052d0:	d90e      	bls.n	80052f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	22ff      	movs	r2, #255	; 0xff
 80052d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	8979      	ldrh	r1, [r7, #10]
 80052e0:	2300      	movs	r3, #0
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fc2b 	bl	8005b44 <I2C_TransferConfig>
 80052ee:	e00f      	b.n	8005310 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	2300      	movs	r3, #0
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fc1a 	bl	8005b44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 faad 	bl	8005874 <I2C_WaitOnTXISFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e07b      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d034      	beq.n	80053c8 <HAL_I2C_Mem_Write+0x1c8>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	d130      	bne.n	80053c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	2200      	movs	r2, #0
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fa3f 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e04d      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	2bff      	cmp	r3, #255	; 0xff
 8005388:	d90e      	bls.n	80053a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	22ff      	movs	r2, #255	; 0xff
 800538e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005394:	b2da      	uxtb	r2, r3
 8005396:	8979      	ldrh	r1, [r7, #10]
 8005398:	2300      	movs	r3, #0
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 fbcf 	bl	8005b44 <I2C_TransferConfig>
 80053a6:	e00f      	b.n	80053c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	8979      	ldrh	r1, [r7, #10]
 80053ba:	2300      	movs	r3, #0
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fbbe 	bl	8005b44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d19e      	bne.n	8005310 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fa8c 	bl	80058f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e01a      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2220      	movs	r2, #32
 80053ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <HAL_I2C_Mem_Write+0x224>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e000      	b.n	800541c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800541a:	2302      	movs	r3, #2
  }
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	fe00e800 	.word	0xfe00e800

08005428 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	4608      	mov	r0, r1
 8005432:	4611      	mov	r1, r2
 8005434:	461a      	mov	r2, r3
 8005436:	4603      	mov	r3, r0
 8005438:	817b      	strh	r3, [r7, #10]
 800543a:	460b      	mov	r3, r1
 800543c:	813b      	strh	r3, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b20      	cmp	r3, #32
 800544c:	f040 80fd 	bne.w	800564a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <HAL_I2C_Mem_Read+0x34>
 8005456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0f1      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_I2C_Mem_Read+0x4e>
 8005472:	2302      	movs	r3, #2
 8005474:	e0ea      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800547e:	f7fd fdad 	bl	8002fdc <HAL_GetTick>
 8005482:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	2319      	movs	r3, #25
 800548a:	2201      	movs	r2, #1
 800548c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f9af 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0d5      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2222      	movs	r2, #34	; 0x22
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2240      	movs	r2, #64	; 0x40
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054c8:	88f8      	ldrh	r0, [r7, #6]
 80054ca:	893a      	ldrh	r2, [r7, #8]
 80054cc:	8979      	ldrh	r1, [r7, #10]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4603      	mov	r3, r0
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f913 	bl	8005704 <I2C_RequestMemoryRead>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0ad      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2bff      	cmp	r3, #255	; 0xff
 80054f8:	d90e      	bls.n	8005518 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	22ff      	movs	r2, #255	; 0xff
 80054fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	b2da      	uxtb	r2, r3
 8005506:	8979      	ldrh	r1, [r7, #10]
 8005508:	4b52      	ldr	r3, [pc, #328]	; (8005654 <HAL_I2C_Mem_Read+0x22c>)
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fb17 	bl	8005b44 <I2C_TransferConfig>
 8005516:	e00f      	b.n	8005538 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005526:	b2da      	uxtb	r2, r3
 8005528:	8979      	ldrh	r1, [r7, #10]
 800552a:	4b4a      	ldr	r3, [pc, #296]	; (8005654 <HAL_I2C_Mem_Read+0x22c>)
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fb06 	bl	8005b44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	2200      	movs	r2, #0
 8005540:	2104      	movs	r1, #4
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f956 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e07c      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d034      	beq.n	80055f8 <HAL_I2C_Mem_Read+0x1d0>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d130      	bne.n	80055f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	; 0x80
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f927 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e04d      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2bff      	cmp	r3, #255	; 0xff
 80055b8:	d90e      	bls.n	80055d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	8979      	ldrh	r1, [r7, #10]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fab7 	bl	8005b44 <I2C_TransferConfig>
 80055d6:	e00f      	b.n	80055f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	8979      	ldrh	r1, [r7, #10]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 faa6 	bl	8005b44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d19a      	bne.n	8005538 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f974 	bl	80058f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e01a      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2220      	movs	r2, #32
 800561c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_I2C_Mem_Read+0x230>)
 800562a:	400b      	ands	r3, r1
 800562c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	80002400 	.word	0x80002400
 8005658:	fe00e800 	.word	0xfe00e800

0800565c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	461a      	mov	r2, r3
 800566a:	4603      	mov	r3, r0
 800566c:	817b      	strh	r3, [r7, #10]
 800566e:	460b      	mov	r3, r1
 8005670:	813b      	strh	r3, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	8979      	ldrh	r1, [r7, #10]
 800567c:	4b20      	ldr	r3, [pc, #128]	; (8005700 <I2C_RequestMemoryWrite+0xa4>)
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fa5d 	bl	8005b44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f8f0 	bl	8005874 <I2C_WaitOnTXISFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e02c      	b.n	80056f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056a4:	893b      	ldrh	r3, [r7, #8]
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
 80056ae:	e015      	b.n	80056dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056b0:	893b      	ldrh	r3, [r7, #8]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f8d6 	bl	8005874 <I2C_WaitOnTXISFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e012      	b.n	80056f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056d2:	893b      	ldrh	r3, [r7, #8]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f884 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	80002000 	.word	0x80002000

08005704 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	4603      	mov	r3, r0
 8005714:	817b      	strh	r3, [r7, #10]
 8005716:	460b      	mov	r3, r1
 8005718:	813b      	strh	r3, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	8979      	ldrh	r1, [r7, #10]
 8005724:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <I2C_RequestMemoryRead+0xa4>)
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	2300      	movs	r3, #0
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fa0a 	bl	8005b44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	69b9      	ldr	r1, [r7, #24]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f89d 	bl	8005874 <I2C_WaitOnTXISFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e02c      	b.n	800579e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d105      	bne.n	8005756 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800574a:	893b      	ldrh	r3, [r7, #8]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
 8005754:	e015      	b.n	8005782 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005756:	893b      	ldrh	r3, [r7, #8]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	b29b      	uxth	r3, r3
 800575c:	b2da      	uxtb	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	69b9      	ldr	r1, [r7, #24]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f883 	bl	8005874 <I2C_WaitOnTXISFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e012      	b.n	800579e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005778:	893b      	ldrh	r3, [r7, #8]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2200      	movs	r2, #0
 800578a:	2140      	movs	r1, #64	; 0x40
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f831 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	80002000 	.word	0x80002000

080057ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d103      	bne.n	80057ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d007      	beq.n	80057e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	619a      	str	r2, [r3, #24]
  }
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005804:	e022      	b.n	800584c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d01e      	beq.n	800584c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580e:	f7fd fbe5 	bl	8002fdc <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d113      	bne.n	800584c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005828:	f043 0220 	orr.w	r2, r3, #32
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e00f      	b.n	800586c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4013      	ands	r3, r2
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	429a      	cmp	r2, r3
 8005868:	d0cd      	beq.n	8005806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005880:	e02c      	b.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f870 	bl	800596c <I2C_IsErrorOccurred>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e02a      	b.n	80058ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d01e      	beq.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fd fb9d 	bl	8002fdc <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d113      	bne.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e007      	b.n	80058ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d1cb      	bne.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005900:	e028      	b.n	8005954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f830 	bl	800596c <I2C_IsErrorOccurred>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e026      	b.n	8005964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fd fb61 	bl	8002fdc <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d113      	bne.n	8005954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e007      	b.n	8005964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d1cf      	bne.n	8005902 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d075      	beq.n	8005a84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2210      	movs	r2, #16
 800599e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059a0:	e056      	b.n	8005a50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d052      	beq.n	8005a50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059aa:	f7fd fb17 	bl	8002fdc <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <I2C_IsErrorOccurred+0x54>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d147      	bne.n	8005a50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e2:	d12e      	bne.n	8005a42 <I2C_IsErrorOccurred+0xd6>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ea:	d02a      	beq.n	8005a42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80059ec:	7cfb      	ldrb	r3, [r7, #19]
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d027      	beq.n	8005a42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a00:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a02:	f7fd faeb 	bl	8002fdc <HAL_GetTick>
 8005a06:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a08:	e01b      	b.n	8005a42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a0a:	f7fd fae7 	bl	8002fdc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b19      	cmp	r3, #25
 8005a16:	d914      	bls.n	8005a42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d1dc      	bne.n	8005a0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d003      	beq.n	8005a66 <I2C_IsErrorOccurred+0xfa>
 8005a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d09d      	beq.n	80059a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2220      	movs	r2, #32
 8005a74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f043 0304 	orr.w	r3, r3, #4
 8005a7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	f043 0308 	orr.w	r3, r3, #8
 8005abe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f043 0302 	orr.w	r3, r3, #2
 8005ae0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01c      	beq.n	8005b34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fe56 	bl	80057ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <I2C_IsErrorOccurred+0x1d4>)
 8005b0c:	400b      	ands	r3, r1
 8005b0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3728      	adds	r7, #40	; 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	fe00e800 	.word	0xfe00e800

08005b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	817b      	strh	r3, [r7, #10]
 8005b52:	4613      	mov	r3, r2
 8005b54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b5c:	7a7b      	ldrb	r3, [r7, #9]
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b64:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	0d5b      	lsrs	r3, r3, #21
 8005b7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <I2C_TransferConfig+0x60>)
 8005b84:	430b      	orrs	r3, r1
 8005b86:	43db      	mvns	r3, r3
 8005b88:	ea02 0103 	and.w	r1, r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	03ff63ff 	.word	0x03ff63ff

08005ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d138      	bne.n	8005c30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e032      	b.n	8005c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d139      	bne.n	8005cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e033      	b.n	8005cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2224      	movs	r2, #36	; 0x24
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e000      	b.n	8005cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d141      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ce6:	4b4b      	ldr	r3, [pc, #300]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf2:	d131      	bne.n	8005d58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cf4:	4b47      	ldr	r3, [pc, #284]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfa:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d04:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d0c:	4a41      	ldr	r2, [pc, #260]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d14:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2232      	movs	r2, #50	; 0x32
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	4a3f      	ldr	r2, [pc, #252]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	0c9b      	lsrs	r3, r3, #18
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d2a:	e002      	b.n	8005d32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d32:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3e:	d102      	bne.n	8005d46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f2      	bne.n	8005d2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d46:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d158      	bne.n	8005e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e057      	b.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d58:	4b2e      	ldr	r3, [pc, #184]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5e:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d68:	e04d      	b.n	8005e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d141      	bne.n	8005df6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d72:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7e:	d131      	bne.n	8005de4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d80:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	4a23      	ldr	r2, [pc, #140]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d90:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d98:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da0:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2232      	movs	r2, #50	; 0x32
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	0c9b      	lsrs	r3, r3, #18
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005db6:	e002      	b.n	8005dbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dbe:	4b15      	ldr	r3, [pc, #84]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dca:	d102      	bne.n	8005dd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f2      	bne.n	8005db8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d112      	bne.n	8005e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e011      	b.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005df4:	e007      	b.n	8005e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005dfe:	4a05      	ldr	r2, [pc, #20]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	40007000 	.word	0x40007000
 8005e18:	20000034 	.word	0x20000034
 8005e1c:	431bde83 	.word	0x431bde83

08005e20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4a04      	ldr	r2, [pc, #16]	; (8005e3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e2e:	6093      	str	r3, [r2, #8]
}
 8005e30:	bf00      	nop
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40007000 	.word	0x40007000

08005e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e306      	b.n	8006460 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d075      	beq.n	8005f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e5e:	4b97      	ldr	r3, [pc, #604]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
 8005e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e68:	4b94      	ldr	r3, [pc, #592]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b0c      	cmp	r3, #12
 8005e76:	d102      	bne.n	8005e7e <HAL_RCC_OscConfig+0x3e>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d002      	beq.n	8005e84 <HAL_RCC_OscConfig+0x44>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d10b      	bne.n	8005e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e84:	4b8d      	ldr	r3, [pc, #564]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d05b      	beq.n	8005f48 <HAL_RCC_OscConfig+0x108>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d157      	bne.n	8005f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e2e1      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea4:	d106      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x74>
 8005ea6:	4b85      	ldr	r3, [pc, #532]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a84      	ldr	r2, [pc, #528]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e01d      	b.n	8005ef0 <HAL_RCC_OscConfig+0xb0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x98>
 8005ebe:	4b7f      	ldr	r3, [pc, #508]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a7e      	ldr	r2, [pc, #504]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	4b7c      	ldr	r3, [pc, #496]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a7b      	ldr	r2, [pc, #492]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e00b      	b.n	8005ef0 <HAL_RCC_OscConfig+0xb0>
 8005ed8:	4b78      	ldr	r3, [pc, #480]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a77      	ldr	r2, [pc, #476]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	4b75      	ldr	r3, [pc, #468]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a74      	ldr	r2, [pc, #464]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d013      	beq.n	8005f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fd f870 	bl	8002fdc <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f00:	f7fd f86c 	bl	8002fdc <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b64      	cmp	r3, #100	; 0x64
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e2a6      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f12:	4b6a      	ldr	r3, [pc, #424]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f0      	beq.n	8005f00 <HAL_RCC_OscConfig+0xc0>
 8005f1e:	e014      	b.n	8005f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f20:	f7fd f85c 	bl	8002fdc <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f28:	f7fd f858 	bl	8002fdc <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b64      	cmp	r3, #100	; 0x64
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e292      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f3a:	4b60      	ldr	r3, [pc, #384]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0xe8>
 8005f46:	e000      	b.n	8005f4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d075      	beq.n	8006042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f56:	4b59      	ldr	r3, [pc, #356]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f60:	4b56      	ldr	r3, [pc, #344]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b0c      	cmp	r3, #12
 8005f6e:	d102      	bne.n	8005f76 <HAL_RCC_OscConfig+0x136>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d002      	beq.n	8005f7c <HAL_RCC_OscConfig+0x13c>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d11f      	bne.n	8005fbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f7c:	4b4f      	ldr	r3, [pc, #316]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_OscConfig+0x154>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e265      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f94:	4b49      	ldr	r3, [pc, #292]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	4946      	ldr	r1, [pc, #280]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fa8:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <HAL_RCC_OscConfig+0x280>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fc ffc9 	bl	8002f44 <HAL_InitTick>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d043      	beq.n	8006040 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e251      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d023      	beq.n	800600c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fc4:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fd f804 	bl	8002fdc <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd8:	f7fd f800 	bl	8002fdc <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e23a      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fea:	4b34      	ldr	r3, [pc, #208]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff6:	4b31      	ldr	r3, [pc, #196]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	492d      	ldr	r1, [pc, #180]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8006006:	4313      	orrs	r3, r2
 8006008:	604b      	str	r3, [r1, #4]
 800600a:	e01a      	b.n	8006042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800600c:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8006012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006018:	f7fc ffe0 	bl	8002fdc <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006020:	f7fc ffdc 	bl	8002fdc <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e216      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006032:	4b22      	ldr	r3, [pc, #136]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f0      	bne.n	8006020 <HAL_RCC_OscConfig+0x1e0>
 800603e:	e000      	b.n	8006042 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006040:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d041      	beq.n	80060d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01c      	beq.n	8006090 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8006058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605c:	4a17      	ldr	r2, [pc, #92]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006066:	f7fc ffb9 	bl	8002fdc <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800606e:	f7fc ffb5 	bl	8002fdc <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e1ef      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006080:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8006082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0ef      	beq.n	800606e <HAL_RCC_OscConfig+0x22e>
 800608e:	e020      	b.n	80060d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8006092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006096:	4a09      	ldr	r2, [pc, #36]	; (80060bc <HAL_RCC_OscConfig+0x27c>)
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a0:	f7fc ff9c 	bl	8002fdc <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060a6:	e00d      	b.n	80060c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a8:	f7fc ff98 	bl	8002fdc <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d906      	bls.n	80060c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e1d2      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000
 80060c0:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060c4:	4b8c      	ldr	r3, [pc, #560]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80060c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1ea      	bne.n	80060a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80a6 	beq.w	800622c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060e0:	2300      	movs	r3, #0
 80060e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060e4:	4b84      	ldr	r3, [pc, #528]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80060e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_OscConfig+0x2b4>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x2b6>
 80060f4:	2300      	movs	r3, #0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060fa:	4b7f      	ldr	r3, [pc, #508]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80060fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fe:	4a7e      	ldr	r2, [pc, #504]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006104:	6593      	str	r3, [r2, #88]	; 0x58
 8006106:	4b7c      	ldr	r3, [pc, #496]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006112:	2301      	movs	r3, #1
 8006114:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006116:	4b79      	ldr	r3, [pc, #484]	; (80062fc <HAL_RCC_OscConfig+0x4bc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d118      	bne.n	8006154 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006122:	4b76      	ldr	r3, [pc, #472]	; (80062fc <HAL_RCC_OscConfig+0x4bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a75      	ldr	r2, [pc, #468]	; (80062fc <HAL_RCC_OscConfig+0x4bc>)
 8006128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800612e:	f7fc ff55 	bl	8002fdc <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006136:	f7fc ff51 	bl	8002fdc <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e18b      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006148:	4b6c      	ldr	r3, [pc, #432]	; (80062fc <HAL_RCC_OscConfig+0x4bc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d108      	bne.n	800616e <HAL_RCC_OscConfig+0x32e>
 800615c:	4b66      	ldr	r3, [pc, #408]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	4a65      	ldr	r2, [pc, #404]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800616c:	e024      	b.n	80061b8 <HAL_RCC_OscConfig+0x378>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b05      	cmp	r3, #5
 8006174:	d110      	bne.n	8006198 <HAL_RCC_OscConfig+0x358>
 8006176:	4b60      	ldr	r3, [pc, #384]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617c:	4a5e      	ldr	r2, [pc, #376]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 800617e:	f043 0304 	orr.w	r3, r3, #4
 8006182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006186:	4b5c      	ldr	r3, [pc, #368]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	4a5a      	ldr	r2, [pc, #360]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 800618e:	f043 0301 	orr.w	r3, r3, #1
 8006192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006196:	e00f      	b.n	80061b8 <HAL_RCC_OscConfig+0x378>
 8006198:	4b57      	ldr	r3, [pc, #348]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	4a56      	ldr	r2, [pc, #344]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061a8:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	4a52      	ldr	r2, [pc, #328]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80061b0:	f023 0304 	bic.w	r3, r3, #4
 80061b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d016      	beq.n	80061ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c0:	f7fc ff0c 	bl	8002fdc <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061c6:	e00a      	b.n	80061de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c8:	f7fc ff08 	bl	8002fdc <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e140      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061de:	4b46      	ldr	r3, [pc, #280]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ed      	beq.n	80061c8 <HAL_RCC_OscConfig+0x388>
 80061ec:	e015      	b.n	800621a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ee:	f7fc fef5 	bl	8002fdc <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061f4:	e00a      	b.n	800620c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fc fef1 	bl	8002fdc <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e129      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800620c:	4b3a      	ldr	r3, [pc, #232]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1ed      	bne.n	80061f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800621a:	7ffb      	ldrb	r3, [r7, #31]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d105      	bne.n	800622c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006220:	4b35      	ldr	r3, [pc, #212]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	4a34      	ldr	r2, [pc, #208]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800622a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d03c      	beq.n	80062b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01c      	beq.n	800627a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006240:	4b2d      	ldr	r3, [pc, #180]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006246:	4a2c      	ldr	r2, [pc, #176]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006250:	f7fc fec4 	bl	8002fdc <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006258:	f7fc fec0 	bl	8002fdc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e0fa      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800626a:	4b23      	ldr	r3, [pc, #140]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 800626c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0ef      	beq.n	8006258 <HAL_RCC_OscConfig+0x418>
 8006278:	e01b      	b.n	80062b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 800627c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006280:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628a:	f7fc fea7 	bl	8002fdc <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006292:	f7fc fea3 	bl	8002fdc <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e0dd      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062a4:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80062a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1ef      	bne.n	8006292 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80d1 	beq.w	800645e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062bc:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 030c 	and.w	r3, r3, #12
 80062c4:	2b0c      	cmp	r3, #12
 80062c6:	f000 808b 	beq.w	80063e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d15e      	bne.n	8006390 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <HAL_RCC_OscConfig+0x4b8>)
 80062d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fc fe7d 	bl	8002fdc <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062e4:	e00c      	b.n	8006300 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e6:	f7fc fe79 	bl	8002fdc <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d905      	bls.n	8006300 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e0b3      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006300:	4b59      	ldr	r3, [pc, #356]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ec      	bne.n	80062e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800630c:	4b56      	ldr	r3, [pc, #344]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	4b56      	ldr	r3, [pc, #344]	; (800646c <HAL_RCC_OscConfig+0x62c>)
 8006312:	4013      	ands	r3, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6a11      	ldr	r1, [r2, #32]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800631c:	3a01      	subs	r2, #1
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	4311      	orrs	r1, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006326:	0212      	lsls	r2, r2, #8
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800632e:	0852      	lsrs	r2, r2, #1
 8006330:	3a01      	subs	r2, #1
 8006332:	0552      	lsls	r2, r2, #21
 8006334:	4311      	orrs	r1, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800633a:	0852      	lsrs	r2, r2, #1
 800633c:	3a01      	subs	r2, #1
 800633e:	0652      	lsls	r2, r2, #25
 8006340:	4311      	orrs	r1, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006346:	06d2      	lsls	r2, r2, #27
 8006348:	430a      	orrs	r2, r1
 800634a:	4947      	ldr	r1, [pc, #284]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 800634c:	4313      	orrs	r3, r2
 800634e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006350:	4b45      	ldr	r3, [pc, #276]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a44      	ldr	r2, [pc, #272]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 8006356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800635c:	4b42      	ldr	r3, [pc, #264]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a41      	ldr	r2, [pc, #260]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 8006362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006366:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006368:	f7fc fe38 	bl	8002fdc <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006370:	f7fc fe34 	bl	8002fdc <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e06e      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006382:	4b39      	ldr	r3, [pc, #228]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x530>
 800638e:	e066      	b.n	800645e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006390:	4b35      	ldr	r3, [pc, #212]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a34      	ldr	r2, [pc, #208]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 8006396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800639c:	4b32      	ldr	r3, [pc, #200]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	4a31      	ldr	r2, [pc, #196]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063a8:	4b2f      	ldr	r3, [pc, #188]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4a2e      	ldr	r2, [pc, #184]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 80063ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fc fe10 	bl	8002fdc <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fc fe0c 	bl	8002fdc <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e046      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d2:	4b25      	ldr	r3, [pc, #148]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x580>
 80063de:	e03e      	b.n	800645e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e039      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063ec:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <HAL_RCC_OscConfig+0x628>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f003 0203 	and.w	r2, r3, #3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d12c      	bne.n	800645a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	3b01      	subs	r3, #1
 800640c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640e:	429a      	cmp	r2, r3
 8006410:	d123      	bne.n	800645a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d11b      	bne.n	800645a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800642e:	429a      	cmp	r2, r3
 8006430:	d113      	bne.n	800645a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	3b01      	subs	r3, #1
 8006440:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006442:	429a      	cmp	r2, r3
 8006444:	d109      	bne.n	800645a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	3b01      	subs	r3, #1
 8006454:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006456:	429a      	cmp	r2, r3
 8006458:	d001      	beq.n	800645e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40021000 	.word	0x40021000
 800646c:	019f800c 	.word	0x019f800c

08006470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e11e      	b.n	80066c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006488:	4b91      	ldr	r3, [pc, #580]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d910      	bls.n	80064b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006496:	4b8e      	ldr	r3, [pc, #568]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 020f 	bic.w	r2, r3, #15
 800649e:	498c      	ldr	r1, [pc, #560]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	4b8a      	ldr	r3, [pc, #552]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e106      	b.n	80066c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d073      	beq.n	80065ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d129      	bne.n	8006520 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064cc:	4b81      	ldr	r3, [pc, #516]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0f4      	b.n	80066c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064dc:	f000 f99c 	bl	8006818 <RCC_GetSysClockFreqFromPLLSource>
 80064e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4a7c      	ldr	r2, [pc, #496]	; (80066d8 <HAL_RCC_ClockConfig+0x268>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d93f      	bls.n	800656a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064ea:	4b7a      	ldr	r3, [pc, #488]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d033      	beq.n	800656a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006506:	2b00      	cmp	r3, #0
 8006508:	d12f      	bne.n	800656a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800650a:	4b72      	ldr	r3, [pc, #456]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006512:	4a70      	ldr	r2, [pc, #448]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006518:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e024      	b.n	800656a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d107      	bne.n	8006538 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006528:	4b6a      	ldr	r3, [pc, #424]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d109      	bne.n	8006548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0c6      	b.n	80066c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006538:	4b66      	ldr	r3, [pc, #408]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0be      	b.n	80066c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006548:	f000 f8ce 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 800654c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4a61      	ldr	r2, [pc, #388]	; (80066d8 <HAL_RCC_ClockConfig+0x268>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d909      	bls.n	800656a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006556:	4b5f      	ldr	r3, [pc, #380]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800655e:	4a5d      	ldr	r2, [pc, #372]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006564:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800656a:	4b5a      	ldr	r3, [pc, #360]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 0203 	bic.w	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4957      	ldr	r1, [pc, #348]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006578:	4313      	orrs	r3, r2
 800657a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657c:	f7fc fd2e 	bl	8002fdc <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006582:	e00a      	b.n	800659a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006584:	f7fc fd2a 	bl	8002fdc <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e095      	b.n	80066c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659a:	4b4e      	ldr	r3, [pc, #312]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 020c 	and.w	r2, r3, #12
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d1eb      	bne.n	8006584 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d023      	beq.n	8006600 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065c4:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	4a42      	ldr	r2, [pc, #264]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80065ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065dc:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065e4:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80065e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ec:	4b39      	ldr	r3, [pc, #228]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	4936      	ldr	r1, [pc, #216]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
 80065fe:	e008      	b.n	8006612 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d105      	bne.n	8006612 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006606:	4b33      	ldr	r3, [pc, #204]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4a32      	ldr	r2, [pc, #200]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 800660c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006610:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006612:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d21d      	bcs.n	800665c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f023 020f 	bic.w	r2, r3, #15
 8006628:	4929      	ldr	r1, [pc, #164]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	4313      	orrs	r3, r2
 800662e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006630:	f7fc fcd4 	bl	8002fdc <HAL_GetTick>
 8006634:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006636:	e00a      	b.n	800664e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006638:	f7fc fcd0 	bl	8002fdc <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	f241 3288 	movw	r2, #5000	; 0x1388
 8006646:	4293      	cmp	r3, r2
 8006648:	d901      	bls.n	800664e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e03b      	b.n	80066c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <HAL_RCC_ClockConfig+0x260>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d1ed      	bne.n	8006638 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d008      	beq.n	800667a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006668:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4917      	ldr	r1, [pc, #92]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006686:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	490f      	ldr	r1, [pc, #60]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 8006696:	4313      	orrs	r3, r2
 8006698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800669a:	f000 f825 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 800669e:	4602      	mov	r2, r0
 80066a0:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <HAL_RCC_ClockConfig+0x264>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	091b      	lsrs	r3, r3, #4
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	490c      	ldr	r1, [pc, #48]	; (80066dc <HAL_RCC_ClockConfig+0x26c>)
 80066ac:	5ccb      	ldrb	r3, [r1, r3]
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	fa22 f303 	lsr.w	r3, r2, r3
 80066b6:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <HAL_RCC_ClockConfig+0x270>)
 80066b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <HAL_RCC_ClockConfig+0x274>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fc fc40 	bl	8002f44 <HAL_InitTick>
 80066c4:	4603      	mov	r3, r0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40022000 	.word	0x40022000
 80066d4:	40021000 	.word	0x40021000
 80066d8:	04c4b400 	.word	0x04c4b400
 80066dc:	0800df64 	.word	0x0800df64
 80066e0:	20000034 	.word	0x20000034
 80066e4:	20000038 	.word	0x20000038

080066e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066ee:	4b2c      	ldr	r3, [pc, #176]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d102      	bne.n	8006700 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066fa:	4b2a      	ldr	r3, [pc, #168]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e047      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006700:	4b27      	ldr	r3, [pc, #156]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 030c 	and.w	r3, r3, #12
 8006708:	2b08      	cmp	r3, #8
 800670a:	d102      	bne.n	8006712 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800670c:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	e03e      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006712:	4b23      	ldr	r3, [pc, #140]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b0c      	cmp	r3, #12
 800671c:	d136      	bne.n	800678c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800671e:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006728:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	3301      	adds	r3, #1
 8006734:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d10c      	bne.n	8006756 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800673c:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006746:	68d2      	ldr	r2, [r2, #12]
 8006748:	0a12      	lsrs	r2, r2, #8
 800674a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	617b      	str	r3, [r7, #20]
      break;
 8006754:	e00c      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006756:	4a13      	ldr	r2, [pc, #76]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	4a10      	ldr	r2, [pc, #64]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006760:	68d2      	ldr	r2, [r2, #12]
 8006762:	0a12      	lsrs	r2, r2, #8
 8006764:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006768:	fb02 f303 	mul.w	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]
      break;
 800676e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	0e5b      	lsrs	r3, r3, #25
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	3301      	adds	r3, #1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	e001      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006790:	693b      	ldr	r3, [r7, #16]
}
 8006792:	4618      	mov	r0, r3
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000
 80067a4:	00f42400 	.word	0x00f42400

080067a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <HAL_RCC_GetHCLKFreq+0x14>)
 80067ae:	681b      	ldr	r3, [r3, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000034 	.word	0x20000034

080067c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067c4:	f7ff fff0 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	4904      	ldr	r1, [pc, #16]	; (80067e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067d6:	5ccb      	ldrb	r3, [r1, r3]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40021000 	.word	0x40021000
 80067e8:	0800df74 	.word	0x0800df74

080067ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067f0:	f7ff ffda 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 80067f4:	4602      	mov	r2, r0
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	0adb      	lsrs	r3, r3, #11
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	4904      	ldr	r1, [pc, #16]	; (8006814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006802:	5ccb      	ldrb	r3, [r1, r3]
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40021000 	.word	0x40021000
 8006814:	0800df74 	.word	0x0800df74

08006818 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006828:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	091b      	lsrs	r3, r3, #4
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d10c      	bne.n	8006856 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800683c:	4a17      	ldr	r2, [pc, #92]	; (800689c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	4a14      	ldr	r2, [pc, #80]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006846:	68d2      	ldr	r2, [r2, #12]
 8006848:	0a12      	lsrs	r2, r2, #8
 800684a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	617b      	str	r3, [r7, #20]
    break;
 8006854:	e00c      	b.n	8006870 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006856:	4a11      	ldr	r2, [pc, #68]	; (800689c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	fbb2 f3f3 	udiv	r3, r2, r3
 800685e:	4a0e      	ldr	r2, [pc, #56]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006860:	68d2      	ldr	r2, [r2, #12]
 8006862:	0a12      	lsrs	r2, r2, #8
 8006864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
    break;
 800686e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	0e5b      	lsrs	r3, r3, #25
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	3301      	adds	r3, #1
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800688a:	687b      	ldr	r3, [r7, #4]
}
 800688c:	4618      	mov	r0, r3
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40021000 	.word	0x40021000
 800689c:	00f42400 	.word	0x00f42400

080068a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068a8:	2300      	movs	r3, #0
 80068aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068ac:	2300      	movs	r3, #0
 80068ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8098 	beq.w	80069ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068be:	2300      	movs	r3, #0
 80068c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c2:	4b43      	ldr	r3, [pc, #268]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10d      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ce:	4b40      	ldr	r3, [pc, #256]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d2:	4a3f      	ldr	r2, [pc, #252]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d8:	6593      	str	r3, [r2, #88]	; 0x58
 80068da:	4b3d      	ldr	r3, [pc, #244]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068e6:	2301      	movs	r3, #1
 80068e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ea:	4b3a      	ldr	r3, [pc, #232]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a39      	ldr	r2, [pc, #228]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068f6:	f7fc fb71 	bl	8002fdc <HAL_GetTick>
 80068fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fc:	e009      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068fe:	f7fc fb6d 	bl	8002fdc <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d902      	bls.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	74fb      	strb	r3, [r7, #19]
        break;
 8006910:	e005      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006912:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0ef      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800691e:	7cfb      	ldrb	r3, [r7, #19]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d159      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006924:	4b2a      	ldr	r3, [pc, #168]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01e      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	429a      	cmp	r2, r3
 800693e:	d019      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006940:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800694c:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006952:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800695c:	4b1c      	ldr	r3, [pc, #112]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800696c:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697e:	f7fc fb2d 	bl	8002fdc <HAL_GetTick>
 8006982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006984:	e00b      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fc fb29 	bl	8002fdc <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	; 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d902      	bls.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	74fb      	strb	r3, [r7, #19]
            break;
 800699c:	e006      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ec      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069ac:	7cfb      	ldrb	r3, [r7, #19]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b2:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c0:	4903      	ldr	r1, [pc, #12]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069c8:	e008      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ca:	7cfb      	ldrb	r3, [r7, #19]
 80069cc:	74bb      	strb	r3, [r7, #18]
 80069ce:	e005      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069d0:	40021000 	.word	0x40021000
 80069d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069dc:	7c7b      	ldrb	r3, [r7, #17]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d105      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e2:	4ba7      	ldr	r3, [pc, #668]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e6:	4aa6      	ldr	r2, [pc, #664]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069fa:	4ba1      	ldr	r3, [pc, #644]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a00:	f023 0203 	bic.w	r2, r3, #3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	499d      	ldr	r1, [pc, #628]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a1c:	4b98      	ldr	r3, [pc, #608]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a22:	f023 020c 	bic.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	4995      	ldr	r1, [pc, #596]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a3e:	4b90      	ldr	r3, [pc, #576]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	498c      	ldr	r1, [pc, #560]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a60:	4b87      	ldr	r3, [pc, #540]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	4984      	ldr	r1, [pc, #528]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a82:	4b7f      	ldr	r3, [pc, #508]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	497b      	ldr	r1, [pc, #492]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aa4:	4b76      	ldr	r3, [pc, #472]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	4973      	ldr	r1, [pc, #460]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ac6:	4b6e      	ldr	r3, [pc, #440]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	496a      	ldr	r1, [pc, #424]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ae8:	4b65      	ldr	r3, [pc, #404]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	4962      	ldr	r1, [pc, #392]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b0a:	4b5d      	ldr	r3, [pc, #372]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	4959      	ldr	r1, [pc, #356]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b2c:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b32:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	4951      	ldr	r1, [pc, #324]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d015      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b4e:	4b4c      	ldr	r3, [pc, #304]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	4948      	ldr	r1, [pc, #288]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b6c:	d105      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b6e:	4b44      	ldr	r3, [pc, #272]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	4a43      	ldr	r2, [pc, #268]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b78:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d015      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b86:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	493a      	ldr	r1, [pc, #232]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ba4:	d105      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	4a35      	ldr	r2, [pc, #212]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d015      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bbe:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bcc:	492c      	ldr	r1, [pc, #176]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bdc:	d105      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bde:	4b28      	ldr	r3, [pc, #160]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	4a27      	ldr	r2, [pc, #156]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d015      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bf6:	4b22      	ldr	r3, [pc, #136]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	491e      	ldr	r1, [pc, #120]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c14:	d105      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c20:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d015      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c2e:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	4910      	ldr	r1, [pc, #64]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c4c:	d105      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	4a0b      	ldr	r2, [pc, #44]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d018      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	4902      	ldr	r1, [pc, #8]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	e001      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c80:	40021000 	.word	0x40021000
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c8a:	d105      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c8c:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c96:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d015      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb2:	4918      	ldr	r1, [pc, #96]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc2:	d105      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cc4:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cea:	490a      	ldr	r1, [pc, #40]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cfa:	d105      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4a04      	ldr	r2, [pc, #16]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d08:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40021000 	.word	0x40021000

08006d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e09d      	b.n	8006e66 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d108      	bne.n	8006d44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d3a:	d009      	beq.n	8006d50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	61da      	str	r2, [r3, #28]
 8006d42:	e005      	b.n	8006d50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fb fd9c 	bl	80028a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d90:	d902      	bls.n	8006d98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	e002      	b.n	8006d9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006da6:	d007      	beq.n	8006db8 <HAL_SPI_Init+0xa0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006db0:	d002      	beq.n	8006db8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfa:	ea42 0103 	orr.w	r1, r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	0c1b      	lsrs	r3, r3, #16
 8006e14:	f003 0204 	and.w	r2, r3, #4
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e34:	ea42 0103 	orr.w	r1, r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e049      	b.n	8006f14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fb fd93 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f000 fe5f 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e049      	b.n	8006fc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fb fcf4 	bl	8002930 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 fe08 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <HAL_TIM_PWM_Start+0x24>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e03c      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d109      	bne.n	800700a <HAL_TIM_PWM_Start+0x3e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e02f      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d109      	bne.n	8007024 <HAL_TIM_PWM_Start+0x58>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	bf14      	ite	ne
 800701c:	2301      	movne	r3, #1
 800701e:	2300      	moveq	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	e022      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b0c      	cmp	r3, #12
 8007028:	d109      	bne.n	800703e <HAL_TIM_PWM_Start+0x72>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b01      	cmp	r3, #1
 8007034:	bf14      	ite	ne
 8007036:	2301      	movne	r3, #1
 8007038:	2300      	moveq	r3, #0
 800703a:	b2db      	uxtb	r3, r3
 800703c:	e015      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b10      	cmp	r3, #16
 8007042:	d109      	bne.n	8007058 <HAL_TIM_PWM_Start+0x8c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	bf14      	ite	ne
 8007050:	2301      	movne	r3, #1
 8007052:	2300      	moveq	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	e008      	b.n	800706a <HAL_TIM_PWM_Start+0x9e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	bf14      	ite	ne
 8007064:	2301      	movne	r3, #1
 8007066:	2300      	moveq	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e0a1      	b.n	80071b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <HAL_TIM_PWM_Start+0xb6>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007080:	e023      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d104      	bne.n	8007092 <HAL_TIM_PWM_Start+0xc6>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007090:	e01b      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b08      	cmp	r3, #8
 8007096:	d104      	bne.n	80070a2 <HAL_TIM_PWM_Start+0xd6>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a0:	e013      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b0c      	cmp	r3, #12
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_PWM_Start+0xe6>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b0:	e00b      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b10      	cmp	r3, #16
 80070b6:	d104      	bne.n	80070c2 <HAL_TIM_PWM_Start+0xf6>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070c0:	e003      	b.n	80070ca <HAL_TIM_PWM_Start+0xfe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 fad4 	bl	8008680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a38      	ldr	r2, [pc, #224]	; (80071c0 <HAL_TIM_PWM_Start+0x1f4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d018      	beq.n	8007114 <HAL_TIM_PWM_Start+0x148>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a37      	ldr	r2, [pc, #220]	; (80071c4 <HAL_TIM_PWM_Start+0x1f8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d013      	beq.n	8007114 <HAL_TIM_PWM_Start+0x148>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a35      	ldr	r2, [pc, #212]	; (80071c8 <HAL_TIM_PWM_Start+0x1fc>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00e      	beq.n	8007114 <HAL_TIM_PWM_Start+0x148>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a34      	ldr	r2, [pc, #208]	; (80071cc <HAL_TIM_PWM_Start+0x200>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d009      	beq.n	8007114 <HAL_TIM_PWM_Start+0x148>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a32      	ldr	r2, [pc, #200]	; (80071d0 <HAL_TIM_PWM_Start+0x204>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d004      	beq.n	8007114 <HAL_TIM_PWM_Start+0x148>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a31      	ldr	r2, [pc, #196]	; (80071d4 <HAL_TIM_PWM_Start+0x208>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d101      	bne.n	8007118 <HAL_TIM_PWM_Start+0x14c>
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <HAL_TIM_PWM_Start+0x14e>
 8007118:	2300      	movs	r3, #0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800712c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a23      	ldr	r2, [pc, #140]	; (80071c0 <HAL_TIM_PWM_Start+0x1f4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d01d      	beq.n	8007174 <HAL_TIM_PWM_Start+0x1a8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007140:	d018      	beq.n	8007174 <HAL_TIM_PWM_Start+0x1a8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a24      	ldr	r2, [pc, #144]	; (80071d8 <HAL_TIM_PWM_Start+0x20c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <HAL_TIM_PWM_Start+0x1a8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a22      	ldr	r2, [pc, #136]	; (80071dc <HAL_TIM_PWM_Start+0x210>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00e      	beq.n	8007174 <HAL_TIM_PWM_Start+0x1a8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1a      	ldr	r2, [pc, #104]	; (80071c4 <HAL_TIM_PWM_Start+0x1f8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d009      	beq.n	8007174 <HAL_TIM_PWM_Start+0x1a8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <HAL_TIM_PWM_Start+0x1fc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <HAL_TIM_PWM_Start+0x1a8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a19      	ldr	r2, [pc, #100]	; (80071d4 <HAL_TIM_PWM_Start+0x208>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d115      	bne.n	80071a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <HAL_TIM_PWM_Start+0x214>)
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b06      	cmp	r3, #6
 8007184:	d015      	beq.n	80071b2 <HAL_TIM_PWM_Start+0x1e6>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d011      	beq.n	80071b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0201 	orr.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	e008      	b.n	80071b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e000      	b.n	80071b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	40013400 	.word	0x40013400
 80071c8:	40014000 	.word	0x40014000
 80071cc:	40014400 	.word	0x40014400
 80071d0:	40014800 	.word	0x40014800
 80071d4:	40015000 	.word	0x40015000
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	00010007 	.word	0x00010007

080071e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e049      	b.n	800728a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f841 	bl	8007292 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	4619      	mov	r1, r3
 8007222:	4610      	mov	r0, r2
 8007224:	f000 fca4 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d122      	bne.n	8007302 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d11b      	bne.n	8007302 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f06f 0202 	mvn.w	r2, #2
 80072d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc23 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 80072ee:	e005      	b.n	80072fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc15 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fc26 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b04      	cmp	r3, #4
 800730e:	d122      	bne.n	8007356 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b04      	cmp	r3, #4
 800731c:	d11b      	bne.n	8007356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f06f 0204 	mvn.w	r2, #4
 8007326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fbf9 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 8007342:	e005      	b.n	8007350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fbeb 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fbfc 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d122      	bne.n	80073aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b08      	cmp	r3, #8
 8007370:	d11b      	bne.n	80073aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f06f 0208 	mvn.w	r2, #8
 800737a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2204      	movs	r2, #4
 8007380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fbcf 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 8007396:	e005      	b.n	80073a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fbc1 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fbd2 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d122      	bne.n	80073fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b10      	cmp	r3, #16
 80073c4:	d11b      	bne.n	80073fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f06f 0210 	mvn.w	r2, #16
 80073ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2208      	movs	r2, #8
 80073d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fba5 	bl	8007b34 <HAL_TIM_IC_CaptureCallback>
 80073ea:	e005      	b.n	80073f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb97 	bl	8007b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fba8 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	d10e      	bne.n	800742a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b01      	cmp	r3, #1
 8007418:	d107      	bne.n	800742a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f06f 0201 	mvn.w	r2, #1
 8007422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb71 	bl	8007b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d10e      	bne.n	8007456 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d107      	bne.n	8007456 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800744e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 fa85 	bl	8008960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007464:	d10e      	bne.n	8007484 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d107      	bne.n	8007484 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800747c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fa78 	bl	8008974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d10e      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d107      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fb56 	bl	8007b5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d10e      	bne.n	80074dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d107      	bne.n	80074dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0220 	mvn.w	r2, #32
 80074d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fa38 	bl	800894c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ea:	d10f      	bne.n	800750c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fa:	d107      	bne.n	800750c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fa3e 	bl	8008988 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800751a:	d10f      	bne.n	800753c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800752a:	d107      	bne.n	800753c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fa30 	bl	800899c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800754a:	d10f      	bne.n	800756c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800755a:	d107      	bne.n	800756c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 fa22 	bl	80089b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800757a:	d10f      	bne.n	800759c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800758a:	d107      	bne.n	800759c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fa14 	bl	80089c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80075be:	2302      	movs	r3, #2
 80075c0:	e088      	b.n	80076d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d11b      	bne.n	8007608 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f000 fe8e 	bl	8008300 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 020c 	bic.w	r2, r2, #12
 80075f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6999      	ldr	r1, [r3, #24]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	619a      	str	r2, [r3, #24]
 8007606:	e060      	b.n	80076ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b04      	cmp	r3, #4
 800760c:	d11c      	bne.n	8007648 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f000 ff0c 	bl	800843a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007630:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6999      	ldr	r1, [r3, #24]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	021a      	lsls	r2, r3, #8
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	619a      	str	r2, [r3, #24]
 8007646:	e040      	b.n	80076ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b08      	cmp	r3, #8
 800764c:	d11b      	bne.n	8007686 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6819      	ldr	r1, [r3, #0]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f000 ff59 	bl	8008514 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 020c 	bic.w	r2, r2, #12
 8007670:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69d9      	ldr	r1, [r3, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	61da      	str	r2, [r3, #28]
 8007684:	e021      	b.n	80076ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d11c      	bne.n	80076c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f000 ff76 	bl	800858c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	69d9      	ldr	r1, [r3, #28]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	021a      	lsls	r2, r3, #8
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	61da      	str	r2, [r3, #28]
 80076c4:	e001      	b.n	80076ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e0ff      	b.n	80078fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b14      	cmp	r3, #20
 8007706:	f200 80f0 	bhi.w	80078ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007765 	.word	0x08007765
 8007714:	080078eb 	.word	0x080078eb
 8007718:	080078eb 	.word	0x080078eb
 800771c:	080078eb 	.word	0x080078eb
 8007720:	080077a5 	.word	0x080077a5
 8007724:	080078eb 	.word	0x080078eb
 8007728:	080078eb 	.word	0x080078eb
 800772c:	080078eb 	.word	0x080078eb
 8007730:	080077e7 	.word	0x080077e7
 8007734:	080078eb 	.word	0x080078eb
 8007738:	080078eb 	.word	0x080078eb
 800773c:	080078eb 	.word	0x080078eb
 8007740:	08007827 	.word	0x08007827
 8007744:	080078eb 	.word	0x080078eb
 8007748:	080078eb 	.word	0x080078eb
 800774c:	080078eb 	.word	0x080078eb
 8007750:	08007869 	.word	0x08007869
 8007754:	080078eb 	.word	0x080078eb
 8007758:	080078eb 	.word	0x080078eb
 800775c:	080078eb 	.word	0x080078eb
 8007760:	080078a9 	.word	0x080078a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fa9e 	bl	8007cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0208 	orr.w	r2, r2, #8
 800777e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0204 	bic.w	r2, r2, #4
 800778e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6999      	ldr	r1, [r3, #24]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	619a      	str	r2, [r3, #24]
      break;
 80077a2:	e0a5      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fb18 	bl	8007de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699a      	ldr	r2, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6999      	ldr	r1, [r3, #24]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	619a      	str	r2, [r3, #24]
      break;
 80077e4:	e084      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fb8b 	bl	8007f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0208 	orr.w	r2, r2, #8
 8007800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0204 	bic.w	r2, r2, #4
 8007810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69d9      	ldr	r1, [r3, #28]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	61da      	str	r2, [r3, #28]
      break;
 8007824:	e064      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fbfd 	bl	800802c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69da      	ldr	r2, [r3, #28]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69d9      	ldr	r1, [r3, #28]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	021a      	lsls	r2, r3, #8
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	61da      	str	r2, [r3, #28]
      break;
 8007866:	e043      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fc70 	bl	8008154 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0208 	orr.w	r2, r2, #8
 8007882:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0204 	bic.w	r2, r2, #4
 8007892:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80078a6:	e023      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fcba 	bl	8008228 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	021a      	lsls	r2, r3, #8
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80078e8:	e002      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	75fb      	strb	r3, [r7, #23]
      break;
 80078ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop

08007904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_TIM_ConfigClockSource+0x1c>
 800791c:	2302      	movs	r3, #2
 800791e:	e0e6      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x1ea>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800793e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800794a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a67      	ldr	r2, [pc, #412]	; (8007af8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	f000 80b1 	beq.w	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8007960:	4a65      	ldr	r2, [pc, #404]	; (8007af8 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	f200 80b6 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007968:	4a64      	ldr	r2, [pc, #400]	; (8007afc <HAL_TIM_ConfigClockSource+0x1f8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	f000 80a9 	beq.w	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8007970:	4a62      	ldr	r2, [pc, #392]	; (8007afc <HAL_TIM_ConfigClockSource+0x1f8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	f200 80ae 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007978:	4a61      	ldr	r2, [pc, #388]	; (8007b00 <HAL_TIM_ConfigClockSource+0x1fc>)
 800797a:	4293      	cmp	r3, r2
 800797c:	f000 80a1 	beq.w	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8007980:	4a5f      	ldr	r2, [pc, #380]	; (8007b00 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	f200 80a6 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007988:	4a5e      	ldr	r2, [pc, #376]	; (8007b04 <HAL_TIM_ConfigClockSource+0x200>)
 800798a:	4293      	cmp	r3, r2
 800798c:	f000 8099 	beq.w	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8007990:	4a5c      	ldr	r2, [pc, #368]	; (8007b04 <HAL_TIM_ConfigClockSource+0x200>)
 8007992:	4293      	cmp	r3, r2
 8007994:	f200 809e 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007998:	4a5b      	ldr	r2, [pc, #364]	; (8007b08 <HAL_TIM_ConfigClockSource+0x204>)
 800799a:	4293      	cmp	r3, r2
 800799c:	f000 8091 	beq.w	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 80079a0:	4a59      	ldr	r2, [pc, #356]	; (8007b08 <HAL_TIM_ConfigClockSource+0x204>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	f200 8096 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079ac:	f000 8089 	beq.w	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 80079b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079b4:	f200 808e 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079bc:	d03e      	beq.n	8007a3c <HAL_TIM_ConfigClockSource+0x138>
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c2:	f200 8087 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	f000 8086 	beq.w	8007ada <HAL_TIM_ConfigClockSource+0x1d6>
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	d87f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079d4:	2b70      	cmp	r3, #112	; 0x70
 80079d6:	d01a      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x10a>
 80079d8:	2b70      	cmp	r3, #112	; 0x70
 80079da:	d87b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d050      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0x17e>
 80079e0:	2b60      	cmp	r3, #96	; 0x60
 80079e2:	d877      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079e4:	2b50      	cmp	r3, #80	; 0x50
 80079e6:	d03c      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15e>
 80079e8:	2b50      	cmp	r3, #80	; 0x50
 80079ea:	d873      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d058      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x19e>
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d86f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d064      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d86b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d060      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d867      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d05c      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d05a      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x1be>
 8007a0c:	e062      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6899      	ldr	r1, [r3, #8]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f000 fe0f 	bl	8008640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	609a      	str	r2, [r3, #8]
      break;
 8007a3a:	e04f      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6899      	ldr	r1, [r3, #8]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f000 fdf8 	bl	8008640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5e:	609a      	str	r2, [r3, #8]
      break;
 8007a60:	e03c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f000 fcb4 	bl	80083dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2150      	movs	r1, #80	; 0x50
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fdc3 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 8007a80:	e02c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6859      	ldr	r1, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f000 fd10 	bl	80084b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2160      	movs	r1, #96	; 0x60
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fdb3 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 8007aa0:	e01c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6859      	ldr	r1, [r3, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f000 fc94 	bl	80083dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fda3 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 8007ac0:	e00c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f000 fd9a 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 8007ad2:	e003      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad8:	e000      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8007ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	00100070 	.word	0x00100070
 8007afc:	00100050 	.word	0x00100050
 8007b00:	00100040 	.word	0x00100040
 8007b04:	00100030 	.word	0x00100030
 8007b08:	00100020 	.word	0x00100020

08007b0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a42      	ldr	r2, [pc, #264]	; (8007c8c <TIM_Base_SetConfig+0x11c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d013      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8e:	d00f      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a3f      	ldr	r2, [pc, #252]	; (8007c90 <TIM_Base_SetConfig+0x120>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a3e      	ldr	r2, [pc, #248]	; (8007c94 <TIM_Base_SetConfig+0x124>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a3d      	ldr	r2, [pc, #244]	; (8007c98 <TIM_Base_SetConfig+0x128>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a3c      	ldr	r2, [pc, #240]	; (8007c9c <TIM_Base_SetConfig+0x12c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d108      	bne.n	8007bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a31      	ldr	r2, [pc, #196]	; (8007c8c <TIM_Base_SetConfig+0x11c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d01f      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd0:	d01b      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a2e      	ldr	r2, [pc, #184]	; (8007c90 <TIM_Base_SetConfig+0x120>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d017      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2d      	ldr	r2, [pc, #180]	; (8007c94 <TIM_Base_SetConfig+0x124>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a2c      	ldr	r2, [pc, #176]	; (8007c98 <TIM_Base_SetConfig+0x128>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00f      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a2c      	ldr	r2, [pc, #176]	; (8007ca0 <TIM_Base_SetConfig+0x130>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00b      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a2b      	ldr	r2, [pc, #172]	; (8007ca4 <TIM_Base_SetConfig+0x134>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d007      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a2a      	ldr	r2, [pc, #168]	; (8007ca8 <TIM_Base_SetConfig+0x138>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a25      	ldr	r2, [pc, #148]	; (8007c9c <TIM_Base_SetConfig+0x12c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d108      	bne.n	8007c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a12      	ldr	r2, [pc, #72]	; (8007c8c <TIM_Base_SetConfig+0x11c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <TIM_Base_SetConfig+0x100>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <TIM_Base_SetConfig+0x128>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00f      	beq.n	8007c70 <TIM_Base_SetConfig+0x100>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a13      	ldr	r2, [pc, #76]	; (8007ca0 <TIM_Base_SetConfig+0x130>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <TIM_Base_SetConfig+0x100>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a12      	ldr	r2, [pc, #72]	; (8007ca4 <TIM_Base_SetConfig+0x134>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_Base_SetConfig+0x100>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a11      	ldr	r2, [pc, #68]	; (8007ca8 <TIM_Base_SetConfig+0x138>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_Base_SetConfig+0x100>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <TIM_Base_SetConfig+0x12c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d103      	bne.n	8007c78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	615a      	str	r2, [r3, #20]
}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40000400 	.word	0x40000400
 8007c94:	40000800 	.word	0x40000800
 8007c98:	40013400 	.word	0x40013400
 8007c9c:	40015000 	.word	0x40015000
 8007ca0:	40014000 	.word	0x40014000
 8007ca4:	40014400 	.word	0x40014400
 8007ca8:	40014800 	.word	0x40014800

08007cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0303 	bic.w	r3, r3, #3
 8007ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f023 0302 	bic.w	r3, r3, #2
 8007cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a30      	ldr	r2, [pc, #192]	; (8007dc8 <TIM_OC1_SetConfig+0x11c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d013      	beq.n	8007d34 <TIM_OC1_SetConfig+0x88>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a2f      	ldr	r2, [pc, #188]	; (8007dcc <TIM_OC1_SetConfig+0x120>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00f      	beq.n	8007d34 <TIM_OC1_SetConfig+0x88>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a2e      	ldr	r2, [pc, #184]	; (8007dd0 <TIM_OC1_SetConfig+0x124>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00b      	beq.n	8007d34 <TIM_OC1_SetConfig+0x88>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a2d      	ldr	r2, [pc, #180]	; (8007dd4 <TIM_OC1_SetConfig+0x128>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <TIM_OC1_SetConfig+0x88>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a2c      	ldr	r2, [pc, #176]	; (8007dd8 <TIM_OC1_SetConfig+0x12c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_OC1_SetConfig+0x88>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a2b      	ldr	r2, [pc, #172]	; (8007ddc <TIM_OC1_SetConfig+0x130>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d10c      	bne.n	8007d4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f023 0308 	bic.w	r3, r3, #8
 8007d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 0304 	bic.w	r3, r3, #4
 8007d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <TIM_OC1_SetConfig+0x11c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d013      	beq.n	8007d7e <TIM_OC1_SetConfig+0xd2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <TIM_OC1_SetConfig+0x120>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00f      	beq.n	8007d7e <TIM_OC1_SetConfig+0xd2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a1b      	ldr	r2, [pc, #108]	; (8007dd0 <TIM_OC1_SetConfig+0x124>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00b      	beq.n	8007d7e <TIM_OC1_SetConfig+0xd2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a1a      	ldr	r2, [pc, #104]	; (8007dd4 <TIM_OC1_SetConfig+0x128>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d007      	beq.n	8007d7e <TIM_OC1_SetConfig+0xd2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a19      	ldr	r2, [pc, #100]	; (8007dd8 <TIM_OC1_SetConfig+0x12c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_OC1_SetConfig+0xd2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a18      	ldr	r2, [pc, #96]	; (8007ddc <TIM_OC1_SetConfig+0x130>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d111      	bne.n	8007da2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40013400 	.word	0x40013400
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800
 8007ddc:	40015000 	.word	0x40015000

08007de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f023 0210 	bic.w	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f023 0320 	bic.w	r3, r3, #32
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a2c      	ldr	r2, [pc, #176]	; (8007ef0 <TIM_OC2_SetConfig+0x110>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_OC2_SetConfig+0x74>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a2b      	ldr	r2, [pc, #172]	; (8007ef4 <TIM_OC2_SetConfig+0x114>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_OC2_SetConfig+0x74>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a2a      	ldr	r2, [pc, #168]	; (8007ef8 <TIM_OC2_SetConfig+0x118>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d10d      	bne.n	8007e70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1f      	ldr	r2, [pc, #124]	; (8007ef0 <TIM_OC2_SetConfig+0x110>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d013      	beq.n	8007ea0 <TIM_OC2_SetConfig+0xc0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a1e      	ldr	r2, [pc, #120]	; (8007ef4 <TIM_OC2_SetConfig+0x114>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00f      	beq.n	8007ea0 <TIM_OC2_SetConfig+0xc0>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a1e      	ldr	r2, [pc, #120]	; (8007efc <TIM_OC2_SetConfig+0x11c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <TIM_OC2_SetConfig+0xc0>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <TIM_OC2_SetConfig+0x120>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d007      	beq.n	8007ea0 <TIM_OC2_SetConfig+0xc0>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1c      	ldr	r2, [pc, #112]	; (8007f04 <TIM_OC2_SetConfig+0x124>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d003      	beq.n	8007ea0 <TIM_OC2_SetConfig+0xc0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <TIM_OC2_SetConfig+0x118>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d113      	bne.n	8007ec8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40013400 	.word	0x40013400
 8007ef8:	40015000 	.word	0x40015000
 8007efc:	40014000 	.word	0x40014000
 8007f00:	40014400 	.word	0x40014400
 8007f04:	40014800 	.word	0x40014800

08007f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0303 	bic.w	r3, r3, #3
 8007f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2b      	ldr	r2, [pc, #172]	; (8008014 <TIM_OC3_SetConfig+0x10c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_OC3_SetConfig+0x72>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2a      	ldr	r2, [pc, #168]	; (8008018 <TIM_OC3_SetConfig+0x110>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_OC3_SetConfig+0x72>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a29      	ldr	r2, [pc, #164]	; (800801c <TIM_OC3_SetConfig+0x114>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d10d      	bne.n	8007f96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <TIM_OC3_SetConfig+0x10c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <TIM_OC3_SetConfig+0xbe>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a1d      	ldr	r2, [pc, #116]	; (8008018 <TIM_OC3_SetConfig+0x110>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d00f      	beq.n	8007fc6 <TIM_OC3_SetConfig+0xbe>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <TIM_OC3_SetConfig+0x118>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00b      	beq.n	8007fc6 <TIM_OC3_SetConfig+0xbe>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a1c      	ldr	r2, [pc, #112]	; (8008024 <TIM_OC3_SetConfig+0x11c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d007      	beq.n	8007fc6 <TIM_OC3_SetConfig+0xbe>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <TIM_OC3_SetConfig+0x120>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_OC3_SetConfig+0xbe>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a16      	ldr	r2, [pc, #88]	; (800801c <TIM_OC3_SetConfig+0x114>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d113      	bne.n	8007fee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	621a      	str	r2, [r3, #32]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	40012c00 	.word	0x40012c00
 8008018:	40013400 	.word	0x40013400
 800801c:	40015000 	.word	0x40015000
 8008020:	40014000 	.word	0x40014000
 8008024:	40014400 	.word	0x40014400
 8008028:	40014800 	.word	0x40014800

0800802c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800805a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800807a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	031b      	lsls	r3, r3, #12
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a2c      	ldr	r2, [pc, #176]	; (800813c <TIM_OC4_SetConfig+0x110>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d007      	beq.n	80080a0 <TIM_OC4_SetConfig+0x74>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a2b      	ldr	r2, [pc, #172]	; (8008140 <TIM_OC4_SetConfig+0x114>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_OC4_SetConfig+0x74>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a2a      	ldr	r2, [pc, #168]	; (8008144 <TIM_OC4_SetConfig+0x118>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d10d      	bne.n	80080bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	031b      	lsls	r3, r3, #12
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1f      	ldr	r2, [pc, #124]	; (800813c <TIM_OC4_SetConfig+0x110>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d013      	beq.n	80080ec <TIM_OC4_SetConfig+0xc0>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <TIM_OC4_SetConfig+0x114>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00f      	beq.n	80080ec <TIM_OC4_SetConfig+0xc0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <TIM_OC4_SetConfig+0x11c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00b      	beq.n	80080ec <TIM_OC4_SetConfig+0xc0>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a1d      	ldr	r2, [pc, #116]	; (800814c <TIM_OC4_SetConfig+0x120>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d007      	beq.n	80080ec <TIM_OC4_SetConfig+0xc0>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a1c      	ldr	r2, [pc, #112]	; (8008150 <TIM_OC4_SetConfig+0x124>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC4_SetConfig+0xc0>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <TIM_OC4_SetConfig+0x118>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d113      	bne.n	8008114 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	019b      	lsls	r3, r3, #6
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	019b      	lsls	r3, r3, #6
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40012c00 	.word	0x40012c00
 8008140:	40013400 	.word	0x40013400
 8008144:	40015000 	.word	0x40015000
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800

08008154 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008198:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a19      	ldr	r2, [pc, #100]	; (8008210 <TIM_OC5_SetConfig+0xbc>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <TIM_OC5_SetConfig+0x82>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a18      	ldr	r2, [pc, #96]	; (8008214 <TIM_OC5_SetConfig+0xc0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00f      	beq.n	80081d6 <TIM_OC5_SetConfig+0x82>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a17      	ldr	r2, [pc, #92]	; (8008218 <TIM_OC5_SetConfig+0xc4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <TIM_OC5_SetConfig+0x82>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a16      	ldr	r2, [pc, #88]	; (800821c <TIM_OC5_SetConfig+0xc8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d007      	beq.n	80081d6 <TIM_OC5_SetConfig+0x82>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a15      	ldr	r2, [pc, #84]	; (8008220 <TIM_OC5_SetConfig+0xcc>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_OC5_SetConfig+0x82>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a14      	ldr	r2, [pc, #80]	; (8008224 <TIM_OC5_SetConfig+0xd0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d109      	bne.n	80081ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	621a      	str	r2, [r3, #32]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	40012c00 	.word	0x40012c00
 8008214:	40013400 	.word	0x40013400
 8008218:	40014000 	.word	0x40014000
 800821c:	40014400 	.word	0x40014400
 8008220:	40014800 	.word	0x40014800
 8008224:	40015000 	.word	0x40015000

08008228 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800826e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	051b      	lsls	r3, r3, #20
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <TIM_OC6_SetConfig+0xc0>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d013      	beq.n	80082ac <TIM_OC6_SetConfig+0x84>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <TIM_OC6_SetConfig+0xc4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00f      	beq.n	80082ac <TIM_OC6_SetConfig+0x84>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <TIM_OC6_SetConfig+0xc8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00b      	beq.n	80082ac <TIM_OC6_SetConfig+0x84>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <TIM_OC6_SetConfig+0xcc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d007      	beq.n	80082ac <TIM_OC6_SetConfig+0x84>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <TIM_OC6_SetConfig+0xd0>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d003      	beq.n	80082ac <TIM_OC6_SetConfig+0x84>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a15      	ldr	r2, [pc, #84]	; (80082fc <TIM_OC6_SetConfig+0xd4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d109      	bne.n	80082c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	029b      	lsls	r3, r3, #10
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	621a      	str	r2, [r3, #32]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40012c00 	.word	0x40012c00
 80082ec:	40013400 	.word	0x40013400
 80082f0:	40014000 	.word	0x40014000
 80082f4:	40014400 	.word	0x40014400
 80082f8:	40014800 	.word	0x40014800
 80082fc:	40015000 	.word	0x40015000

08008300 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f023 0201 	bic.w	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a26      	ldr	r2, [pc, #152]	; (80083c4 <TIM_TI1_SetConfig+0xc4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d017      	beq.n	800835e <TIM_TI1_SetConfig+0x5e>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008334:	d013      	beq.n	800835e <TIM_TI1_SetConfig+0x5e>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4a23      	ldr	r2, [pc, #140]	; (80083c8 <TIM_TI1_SetConfig+0xc8>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d00f      	beq.n	800835e <TIM_TI1_SetConfig+0x5e>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4a22      	ldr	r2, [pc, #136]	; (80083cc <TIM_TI1_SetConfig+0xcc>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00b      	beq.n	800835e <TIM_TI1_SetConfig+0x5e>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a21      	ldr	r2, [pc, #132]	; (80083d0 <TIM_TI1_SetConfig+0xd0>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d007      	beq.n	800835e <TIM_TI1_SetConfig+0x5e>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4a20      	ldr	r2, [pc, #128]	; (80083d4 <TIM_TI1_SetConfig+0xd4>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d003      	beq.n	800835e <TIM_TI1_SetConfig+0x5e>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a1f      	ldr	r2, [pc, #124]	; (80083d8 <TIM_TI1_SetConfig+0xd8>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d101      	bne.n	8008362 <TIM_TI1_SetConfig+0x62>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <TIM_TI1_SetConfig+0x64>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e003      	b.n	8008382 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	b2db      	uxtb	r3, r3
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f023 030a 	bic.w	r3, r3, #10
 800839c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f003 030a 	and.w	r3, r3, #10
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	621a      	str	r2, [r3, #32]
}
 80083b6:	bf00      	nop
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40012c00 	.word	0x40012c00
 80083c8:	40000400 	.word	0x40000400
 80083cc:	40000800 	.word	0x40000800
 80083d0:	40013400 	.word	0x40013400
 80083d4:	40014000 	.word	0x40014000
 80083d8:	40015000 	.word	0x40015000

080083dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f023 0201 	bic.w	r2, r3, #1
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f023 030a 	bic.w	r3, r3, #10
 8008418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4313      	orrs	r3, r2
 8008420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	621a      	str	r2, [r3, #32]
}
 800842e:	bf00      	nop
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800843a:	b480      	push	{r7}
 800843c:	b087      	sub	sp, #28
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	607a      	str	r2, [r7, #4]
 8008446:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	f023 0210 	bic.w	r2, r3, #16
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008466:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	031b      	lsls	r3, r3, #12
 800847e:	b29b      	uxth	r3, r3
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800848c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4313      	orrs	r3, r2
 800849a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	621a      	str	r2, [r3, #32]
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	f023 0210 	bic.w	r2, r3, #16
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	031b      	lsls	r3, r3, #12
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	621a      	str	r2, [r3, #32]
}
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f023 0303 	bic.w	r3, r3, #3
 8008540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008550:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	b2db      	uxtb	r3, r3
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008564:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	621a      	str	r2, [r3, #32]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	031b      	lsls	r3, r3, #12
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80085de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	031b      	lsls	r3, r3, #12
 80085e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800861c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	f043 0307 	orr.w	r3, r3, #7
 800862c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	609a      	str	r2, [r3, #8]
}
 8008634:	bf00      	nop
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800865a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	021a      	lsls	r2, r3, #8
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	431a      	orrs	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4313      	orrs	r3, r2
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	4313      	orrs	r3, r2
 800866c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	609a      	str	r2, [r3, #8]
}
 8008674:	bf00      	nop
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 031f 	and.w	r3, r3, #31
 8008692:	2201      	movs	r2, #1
 8008694:	fa02 f303 	lsl.w	r3, r2, r3
 8008698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6a1a      	ldr	r2, [r3, #32]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	43db      	mvns	r3, r3
 80086a2:	401a      	ands	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a1a      	ldr	r2, [r3, #32]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f003 031f 	and.w	r3, r3, #31
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	fa01 f303 	lsl.w	r3, r1, r3
 80086b8:	431a      	orrs	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	621a      	str	r2, [r3, #32]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d101      	bne.n	80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086e0:	2302      	movs	r3, #2
 80086e2:	e06f      	b.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a31      	ldr	r2, [pc, #196]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d009      	beq.n	8008722 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a30      	ldr	r2, [pc, #192]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d004      	beq.n	8008722 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a2e      	ldr	r2, [pc, #184]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d108      	bne.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008728:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d01d      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008764:	d018      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a1c      	ldr	r2, [pc, #112]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d013      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1a      	ldr	r2, [pc, #104]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00e      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a15      	ldr	r2, [pc, #84]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d009      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a16      	ldr	r2, [pc, #88]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a11      	ldr	r2, [pc, #68]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d10c      	bne.n	80087b2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800879e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	40013400 	.word	0x40013400
 80087d8:	40015000 	.word	0x40015000
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800
 80087e4:	40014000 	.word	0x40014000

080087e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008800:	2302      	movs	r3, #2
 8008802:	e096      	b.n	8008932 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	4313      	orrs	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	4313      	orrs	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	041b      	lsls	r3, r3, #16
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a2f      	ldr	r2, [pc, #188]	; (8008940 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d009      	beq.n	800889c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a2d      	ldr	r2, [pc, #180]	; (8008944 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d004      	beq.n	800889c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a2c      	ldr	r2, [pc, #176]	; (8008948 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d106      	bne.n	80088aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a24      	ldr	r2, [pc, #144]	; (8008940 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a22      	ldr	r2, [pc, #136]	; (8008944 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a21      	ldr	r2, [pc, #132]	; (8008948 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d12b      	bne.n	8008920 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	051b      	lsls	r3, r3, #20
 80088d4:	4313      	orrs	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a11      	ldr	r2, [pc, #68]	; (8008940 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a0e      	ldr	r2, [pc, #56]	; (8008948 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d106      	bne.n	8008920 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40012c00 	.word	0x40012c00
 8008944:	40013400 	.word	0x40013400
 8008948:	40015000 	.word	0x40015000

0800894c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e042      	b.n	8008a70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d106      	bne.n	8008a02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7f9 fefb 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	; 0x24
 8008a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f8c2 	bl	8008ba4 <UART_SetConfig>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e022      	b.n	8008a70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fbb2 	bl	800919c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc39 	bl	80092e0 <UART_CheckIdleState>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08a      	sub	sp, #40	; 0x28
 8008a7c:	af02      	add	r7, sp, #8
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	4613      	mov	r3, r2
 8008a86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	f040 8083 	bne.w	8008b9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HAL_UART_Transmit+0x28>
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e07b      	b.n	8008b9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d101      	bne.n	8008ab2 <HAL_UART_Transmit+0x3a>
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e074      	b.n	8008b9c <HAL_UART_Transmit+0x124>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2221      	movs	r2, #33	; 0x21
 8008ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aca:	f7fa fa87 	bl	8002fdc <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	88fa      	ldrh	r2, [r7, #6]
 8008adc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae8:	d108      	bne.n	8008afc <HAL_UART_Transmit+0x84>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	61bb      	str	r3, [r7, #24]
 8008afa:	e003      	b.n	8008b04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008b0c:	e02c      	b.n	8008b68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2200      	movs	r2, #0
 8008b16:	2180      	movs	r1, #128	; 0x80
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fc2c 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e039      	b.n	8008b9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10b      	bne.n	8008b46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	3302      	adds	r3, #2
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	e007      	b.n	8008b56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	3301      	adds	r3, #1
 8008b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1cc      	bne.n	8008b0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2140      	movs	r1, #64	; 0x40
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 fbf9 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e006      	b.n	8008b9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	e000      	b.n	8008b9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008b9a:	2302      	movs	r3, #2
  }
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3720      	adds	r7, #32
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba8:	b08c      	sub	sp, #48	; 0x30
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4baa      	ldr	r3, [pc, #680]	; (8008e7c <UART_SetConfig+0x2d8>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a9f      	ldr	r2, [pc, #636]	; (8008e80 <UART_SetConfig+0x2dc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d004      	beq.n	8008c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	f023 010f 	bic.w	r1, r3, #15
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a90      	ldr	r2, [pc, #576]	; (8008e84 <UART_SetConfig+0x2e0>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d125      	bne.n	8008c94 <UART_SetConfig+0xf0>
 8008c48:	4b8f      	ldr	r3, [pc, #572]	; (8008e88 <UART_SetConfig+0x2e4>)
 8008c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d81a      	bhi.n	8008c8c <UART_SetConfig+0xe8>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <UART_SetConfig+0xb8>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c75 	.word	0x08008c75
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c72:	e116      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008c74:	2302      	movs	r3, #2
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7a:	e112      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008c7c:	2304      	movs	r3, #4
 8008c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c82:	e10e      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008c84:	2308      	movs	r3, #8
 8008c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c8a:	e10a      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c92:	e106      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a7c      	ldr	r2, [pc, #496]	; (8008e8c <UART_SetConfig+0x2e8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d138      	bne.n	8008d10 <UART_SetConfig+0x16c>
 8008c9e:	4b7a      	ldr	r3, [pc, #488]	; (8008e88 <UART_SetConfig+0x2e4>)
 8008ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca4:	f003 030c 	and.w	r3, r3, #12
 8008ca8:	2b0c      	cmp	r3, #12
 8008caa:	d82d      	bhi.n	8008d08 <UART_SetConfig+0x164>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <UART_SetConfig+0x110>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008ce9 	.word	0x08008ce9
 8008cb8:	08008d09 	.word	0x08008d09
 8008cbc:	08008d09 	.word	0x08008d09
 8008cc0:	08008d09 	.word	0x08008d09
 8008cc4:	08008cf9 	.word	0x08008cf9
 8008cc8:	08008d09 	.word	0x08008d09
 8008ccc:	08008d09 	.word	0x08008d09
 8008cd0:	08008d09 	.word	0x08008d09
 8008cd4:	08008cf1 	.word	0x08008cf1
 8008cd8:	08008d09 	.word	0x08008d09
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d01 	.word	0x08008d01
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cee:	e0d8      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cf6:	e0d4      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cfe:	e0d0      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d00:	2308      	movs	r3, #8
 8008d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d06:	e0cc      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0e:	e0c8      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a5e      	ldr	r2, [pc, #376]	; (8008e90 <UART_SetConfig+0x2ec>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d125      	bne.n	8008d66 <UART_SetConfig+0x1c2>
 8008d1a:	4b5b      	ldr	r3, [pc, #364]	; (8008e88 <UART_SetConfig+0x2e4>)
 8008d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d24:	2b30      	cmp	r3, #48	; 0x30
 8008d26:	d016      	beq.n	8008d56 <UART_SetConfig+0x1b2>
 8008d28:	2b30      	cmp	r3, #48	; 0x30
 8008d2a:	d818      	bhi.n	8008d5e <UART_SetConfig+0x1ba>
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d00a      	beq.n	8008d46 <UART_SetConfig+0x1a2>
 8008d30:	2b20      	cmp	r3, #32
 8008d32:	d814      	bhi.n	8008d5e <UART_SetConfig+0x1ba>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <UART_SetConfig+0x19a>
 8008d38:	2b10      	cmp	r3, #16
 8008d3a:	d008      	beq.n	8008d4e <UART_SetConfig+0x1aa>
 8008d3c:	e00f      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d44:	e0ad      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d46:	2302      	movs	r3, #2
 8008d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4c:	e0a9      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d4e:	2304      	movs	r3, #4
 8008d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d54:	e0a5      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d56:	2308      	movs	r3, #8
 8008d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5c:	e0a1      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d5e:	2310      	movs	r3, #16
 8008d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d64:	e09d      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a4a      	ldr	r2, [pc, #296]	; (8008e94 <UART_SetConfig+0x2f0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d125      	bne.n	8008dbc <UART_SetConfig+0x218>
 8008d70:	4b45      	ldr	r3, [pc, #276]	; (8008e88 <UART_SetConfig+0x2e4>)
 8008d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8008d7c:	d016      	beq.n	8008dac <UART_SetConfig+0x208>
 8008d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d80:	d818      	bhi.n	8008db4 <UART_SetConfig+0x210>
 8008d82:	2b80      	cmp	r3, #128	; 0x80
 8008d84:	d00a      	beq.n	8008d9c <UART_SetConfig+0x1f8>
 8008d86:	2b80      	cmp	r3, #128	; 0x80
 8008d88:	d814      	bhi.n	8008db4 <UART_SetConfig+0x210>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <UART_SetConfig+0x1f0>
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d008      	beq.n	8008da4 <UART_SetConfig+0x200>
 8008d92:	e00f      	b.n	8008db4 <UART_SetConfig+0x210>
 8008d94:	2300      	movs	r3, #0
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d9a:	e082      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da2:	e07e      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008da4:	2304      	movs	r3, #4
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008daa:	e07a      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008dac:	2308      	movs	r3, #8
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db2:	e076      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008db4:	2310      	movs	r3, #16
 8008db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dba:	e072      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a35      	ldr	r2, [pc, #212]	; (8008e98 <UART_SetConfig+0x2f4>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d12a      	bne.n	8008e1c <UART_SetConfig+0x278>
 8008dc6:	4b30      	ldr	r3, [pc, #192]	; (8008e88 <UART_SetConfig+0x2e4>)
 8008dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dd4:	d01a      	beq.n	8008e0c <UART_SetConfig+0x268>
 8008dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dda:	d81b      	bhi.n	8008e14 <UART_SetConfig+0x270>
 8008ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de0:	d00c      	beq.n	8008dfc <UART_SetConfig+0x258>
 8008de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de6:	d815      	bhi.n	8008e14 <UART_SetConfig+0x270>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <UART_SetConfig+0x250>
 8008dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df0:	d008      	beq.n	8008e04 <UART_SetConfig+0x260>
 8008df2:	e00f      	b.n	8008e14 <UART_SetConfig+0x270>
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dfa:	e052      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e02:	e04e      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e0a:	e04a      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e12:	e046      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e1a:	e042      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a17      	ldr	r2, [pc, #92]	; (8008e80 <UART_SetConfig+0x2dc>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d13a      	bne.n	8008e9c <UART_SetConfig+0x2f8>
 8008e26:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <UART_SetConfig+0x2e4>)
 8008e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e34:	d01a      	beq.n	8008e6c <UART_SetConfig+0x2c8>
 8008e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e3a:	d81b      	bhi.n	8008e74 <UART_SetConfig+0x2d0>
 8008e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e40:	d00c      	beq.n	8008e5c <UART_SetConfig+0x2b8>
 8008e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e46:	d815      	bhi.n	8008e74 <UART_SetConfig+0x2d0>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <UART_SetConfig+0x2b0>
 8008e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e50:	d008      	beq.n	8008e64 <UART_SetConfig+0x2c0>
 8008e52:	e00f      	b.n	8008e74 <UART_SetConfig+0x2d0>
 8008e54:	2300      	movs	r3, #0
 8008e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e5a:	e022      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e62:	e01e      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e64:	2304      	movs	r3, #4
 8008e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6a:	e01a      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e72:	e016      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e74:	2310      	movs	r3, #16
 8008e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7a:	e012      	b.n	8008ea2 <UART_SetConfig+0x2fe>
 8008e7c:	cfff69f3 	.word	0xcfff69f3
 8008e80:	40008000 	.word	0x40008000
 8008e84:	40013800 	.word	0x40013800
 8008e88:	40021000 	.word	0x40021000
 8008e8c:	40004400 	.word	0x40004400
 8008e90:	40004800 	.word	0x40004800
 8008e94:	40004c00 	.word	0x40004c00
 8008e98:	40005000 	.word	0x40005000
 8008e9c:	2310      	movs	r3, #16
 8008e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4aae      	ldr	r2, [pc, #696]	; (8009160 <UART_SetConfig+0x5bc>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	f040 8097 	bne.w	8008fdc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eb2:	2b08      	cmp	r3, #8
 8008eb4:	d823      	bhi.n	8008efe <UART_SetConfig+0x35a>
 8008eb6:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <UART_SetConfig+0x318>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ee1 	.word	0x08008ee1
 8008ec0:	08008eff 	.word	0x08008eff
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008eff 	.word	0x08008eff
 8008ecc:	08008eef 	.word	0x08008eef
 8008ed0:	08008eff 	.word	0x08008eff
 8008ed4:	08008eff 	.word	0x08008eff
 8008ed8:	08008eff 	.word	0x08008eff
 8008edc:	08008ef7 	.word	0x08008ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee0:	f7fd fc6e 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 8008ee4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ee6:	e010      	b.n	8008f0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee8:	4b9e      	ldr	r3, [pc, #632]	; (8009164 <UART_SetConfig+0x5c0>)
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008eec:	e00d      	b.n	8008f0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eee:	f7fd fbfb 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 8008ef2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ef4:	e009      	b.n	8008f0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008efc:	e005      	b.n	8008f0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8130 	beq.w	8009172 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	4a94      	ldr	r2, [pc, #592]	; (8009168 <UART_SetConfig+0x5c4>)
 8008f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4413      	add	r3, r2
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d305      	bcc.n	8008f42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d903      	bls.n	8008f4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f48:	e113      	b.n	8009172 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	60bb      	str	r3, [r7, #8]
 8008f50:	60fa      	str	r2, [r7, #12]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	4a84      	ldr	r2, [pc, #528]	; (8009168 <UART_SetConfig+0x5c4>)
 8008f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2200      	movs	r2, #0
 8008f60:	603b      	str	r3, [r7, #0]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f6c:	f7f7 feb4 	bl	8000cd8 <__aeabi_uldivmod>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4610      	mov	r0, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	020b      	lsls	r3, r1, #8
 8008f82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f86:	0202      	lsls	r2, r0, #8
 8008f88:	6979      	ldr	r1, [r7, #20]
 8008f8a:	6849      	ldr	r1, [r1, #4]
 8008f8c:	0849      	lsrs	r1, r1, #1
 8008f8e:	2000      	movs	r0, #0
 8008f90:	460c      	mov	r4, r1
 8008f92:	4605      	mov	r5, r0
 8008f94:	eb12 0804 	adds.w	r8, r2, r4
 8008f98:	eb43 0905 	adc.w	r9, r3, r5
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	469a      	mov	sl, r3
 8008fa4:	4693      	mov	fp, r2
 8008fa6:	4652      	mov	r2, sl
 8008fa8:	465b      	mov	r3, fp
 8008faa:	4640      	mov	r0, r8
 8008fac:	4649      	mov	r1, r9
 8008fae:	f7f7 fe93 	bl	8000cd8 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fc0:	d308      	bcc.n	8008fd4 <UART_SetConfig+0x430>
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fc8:	d204      	bcs.n	8008fd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6a3a      	ldr	r2, [r7, #32]
 8008fd0:	60da      	str	r2, [r3, #12]
 8008fd2:	e0ce      	b.n	8009172 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fda:	e0ca      	b.n	8009172 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe4:	d166      	bne.n	80090b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d827      	bhi.n	800903e <UART_SetConfig+0x49a>
 8008fee:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <UART_SetConfig+0x450>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	08009021 	.word	0x08009021
 8008ffc:	08009029 	.word	0x08009029
 8009000:	0800903f 	.word	0x0800903f
 8009004:	0800902f 	.word	0x0800902f
 8009008:	0800903f 	.word	0x0800903f
 800900c:	0800903f 	.word	0x0800903f
 8009010:	0800903f 	.word	0x0800903f
 8009014:	08009037 	.word	0x08009037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009018:	f7fd fbd2 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 800901c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800901e:	e014      	b.n	800904a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009020:	f7fd fbe4 	bl	80067ec <HAL_RCC_GetPCLK2Freq>
 8009024:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009026:	e010      	b.n	800904a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009028:	4b4e      	ldr	r3, [pc, #312]	; (8009164 <UART_SetConfig+0x5c0>)
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800902c:	e00d      	b.n	800904a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800902e:	f7fd fb5b 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 8009032:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009034:	e009      	b.n	800904a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800903c:	e005      	b.n	800904a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 8090 	beq.w	8009172 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	4a44      	ldr	r2, [pc, #272]	; (8009168 <UART_SetConfig+0x5c4>)
 8009058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905c:	461a      	mov	r2, r3
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	fbb3 f3f2 	udiv	r3, r3, r2
 8009064:	005a      	lsls	r2, r3, #1
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	441a      	add	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	fbb2 f3f3 	udiv	r3, r2, r3
 8009076:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	2b0f      	cmp	r3, #15
 800907c:	d916      	bls.n	80090ac <UART_SetConfig+0x508>
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009084:	d212      	bcs.n	80090ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f023 030f 	bic.w	r3, r3, #15
 800908e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	b29b      	uxth	r3, r3
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	b29a      	uxth	r2, r3
 800909c:	8bfb      	ldrh	r3, [r7, #30]
 800909e:	4313      	orrs	r3, r2
 80090a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	8bfa      	ldrh	r2, [r7, #30]
 80090a8:	60da      	str	r2, [r3, #12]
 80090aa:	e062      	b.n	8009172 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090b2:	e05e      	b.n	8009172 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d828      	bhi.n	800910e <UART_SetConfig+0x56a>
 80090bc:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <UART_SetConfig+0x520>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090e9 	.word	0x080090e9
 80090c8:	080090f1 	.word	0x080090f1
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	0800910f 	.word	0x0800910f
 80090d4:	080090ff 	.word	0x080090ff
 80090d8:	0800910f 	.word	0x0800910f
 80090dc:	0800910f 	.word	0x0800910f
 80090e0:	0800910f 	.word	0x0800910f
 80090e4:	08009107 	.word	0x08009107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e8:	f7fd fb6a 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 80090ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090ee:	e014      	b.n	800911a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f0:	f7fd fb7c 	bl	80067ec <HAL_RCC_GetPCLK2Freq>
 80090f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090f6:	e010      	b.n	800911a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090f8:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <UART_SetConfig+0x5c0>)
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090fc:	e00d      	b.n	800911a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090fe:	f7fd faf3 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 8009102:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009104:	e009      	b.n	800911a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800910c:	e005      	b.n	800911a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009118:	bf00      	nop
    }

    if (pclk != 0U)
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	2b00      	cmp	r3, #0
 800911e:	d028      	beq.n	8009172 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	4a10      	ldr	r2, [pc, #64]	; (8009168 <UART_SetConfig+0x5c4>)
 8009126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800912a:	461a      	mov	r2, r3
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	441a      	add	r2, r3
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009142:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	2b0f      	cmp	r3, #15
 8009148:	d910      	bls.n	800916c <UART_SetConfig+0x5c8>
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009150:	d20c      	bcs.n	800916c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	b29a      	uxth	r2, r3
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60da      	str	r2, [r3, #12]
 800915c:	e009      	b.n	8009172 <UART_SetConfig+0x5ce>
 800915e:	bf00      	nop
 8009160:	40008000 	.word	0x40008000
 8009164:	00f42400 	.word	0x00f42400
 8009168:	0800df8c 	.word	0x0800df8c
      }
      else
      {
        ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2201      	movs	r2, #1
 8009176:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2201      	movs	r2, #1
 800917e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2200      	movs	r2, #0
 8009186:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2200      	movs	r2, #0
 800918c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800918e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009192:	4618      	mov	r0, r3
 8009194:	3730      	adds	r7, #48	; 0x30
 8009196:	46bd      	mov	sp, r7
 8009198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800919c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	f003 0302 	and.w	r3, r3, #2
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920e:	f003 0308 	and.w	r3, r3, #8
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01a      	beq.n	80092b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929a:	d10a      	bne.n	80092b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	605a      	str	r2, [r3, #4]
  }
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092f0:	f7f9 fe74 	bl	8002fdc <HAL_GetTick>
 80092f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b08      	cmp	r3, #8
 8009302:	d10e      	bne.n	8009322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f82f 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e025      	b.n	800936e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b04      	cmp	r3, #4
 800932e:	d10e      	bne.n	800934e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f819 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e00f      	b.n	800936e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b09c      	sub	sp, #112	; 0x70
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009386:	e0a9      	b.n	80094dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	f000 80a5 	beq.w	80094dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009392:	f7f9 fe23 	bl	8002fdc <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800939e:	429a      	cmp	r2, r3
 80093a0:	d302      	bcc.n	80093a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80093a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d140      	bne.n	800942a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093bc:	667b      	str	r3, [r7, #100]	; 0x64
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80093d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e6      	bne.n	80093a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3308      	adds	r3, #8
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	663b      	str	r3, [r7, #96]	; 0x60
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3308      	adds	r3, #8
 80093f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80093fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e5      	bne.n	80093da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2220      	movs	r2, #32
 8009412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e069      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d051      	beq.n	80094dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009446:	d149      	bne.n	80094dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009450:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009466:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	461a      	mov	r2, r3
 800946e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009470:	637b      	str	r3, [r7, #52]	; 0x34
 8009472:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e6      	bne.n	8009452 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3308      	adds	r3, #8
 800948a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	613b      	str	r3, [r7, #16]
   return(result);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f023 0301 	bic.w	r3, r3, #1
 800949a:	66bb      	str	r3, [r7, #104]	; 0x68
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3308      	adds	r3, #8
 80094a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094a4:	623a      	str	r2, [r7, #32]
 80094a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	69f9      	ldr	r1, [r7, #28]
 80094aa:	6a3a      	ldr	r2, [r7, #32]
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e5      	bne.n	8009484 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2220      	movs	r2, #32
 80094bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e010      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69da      	ldr	r2, [r3, #28]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	4013      	ands	r3, r2
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	bf0c      	ite	eq
 80094ec:	2301      	moveq	r3, #1
 80094ee:	2300      	movne	r3, #0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	461a      	mov	r2, r3
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	f43f af46 	beq.w	8009388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3770      	adds	r7, #112	; 0x70
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009514:	2b01      	cmp	r3, #1
 8009516:	d101      	bne.n	800951c <HAL_UARTEx_DisableFifoMode+0x16>
 8009518:	2302      	movs	r3, #2
 800951a:	e027      	b.n	800956c <HAL_UARTEx_DisableFifoMode+0x66>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2224      	movs	r2, #36	; 0x24
 8009528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0201 	bic.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800954a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800958c:	2302      	movs	r3, #2
 800958e:	e02d      	b.n	80095ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2224      	movs	r2, #36	; 0x24
 800959c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0201 	bic.w	r2, r2, #1
 80095b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f84f 	bl	8009670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009608:	2302      	movs	r3, #2
 800960a:	e02d      	b.n	8009668 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2224      	movs	r2, #36	; 0x24
 8009618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0201 	bic.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	430a      	orrs	r2, r1
 8009646:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f811 	bl	8009670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800967c:	2b00      	cmp	r3, #0
 800967e:	d108      	bne.n	8009692 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009690:	e031      	b.n	80096f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009692:	2308      	movs	r3, #8
 8009694:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009696:	2308      	movs	r3, #8
 8009698:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	0e5b      	lsrs	r3, r3, #25
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	0f5b      	lsrs	r3, r3, #29
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	7b3a      	ldrb	r2, [r7, #12]
 80096be:	4911      	ldr	r1, [pc, #68]	; (8009704 <UARTEx_SetNbDataToProcess+0x94>)
 80096c0:	5c8a      	ldrb	r2, [r1, r2]
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096c6:	7b3a      	ldrb	r2, [r7, #12]
 80096c8:	490f      	ldr	r1, [pc, #60]	; (8009708 <UARTEx_SetNbDataToProcess+0x98>)
 80096ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	7b7a      	ldrb	r2, [r7, #13]
 80096dc:	4909      	ldr	r1, [pc, #36]	; (8009704 <UARTEx_SetNbDataToProcess+0x94>)
 80096de:	5c8a      	ldrb	r2, [r1, r2]
 80096e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096e4:	7b7a      	ldrb	r2, [r7, #13]
 80096e6:	4908      	ldr	r1, [pc, #32]	; (8009708 <UARTEx_SetNbDataToProcess+0x98>)
 80096e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	0800dfa4 	.word	0x0800dfa4
 8009708:	0800dfac 	.word	0x0800dfac

0800970c <rand>:
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <rand+0x5c>)
 800970e:	b510      	push	{r4, lr}
 8009710:	681c      	ldr	r4, [r3, #0]
 8009712:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009714:	b9b3      	cbnz	r3, 8009744 <rand+0x38>
 8009716:	2018      	movs	r0, #24
 8009718:	f001 ff28 	bl	800b56c <malloc>
 800971c:	4602      	mov	r2, r0
 800971e:	6320      	str	r0, [r4, #48]	; 0x30
 8009720:	b920      	cbnz	r0, 800972c <rand+0x20>
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <rand+0x60>)
 8009724:	4812      	ldr	r0, [pc, #72]	; (8009770 <rand+0x64>)
 8009726:	2152      	movs	r1, #82	; 0x52
 8009728:	f001 f83c 	bl	800a7a4 <__assert_func>
 800972c:	4911      	ldr	r1, [pc, #68]	; (8009774 <rand+0x68>)
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <rand+0x6c>)
 8009730:	e9c0 1300 	strd	r1, r3, [r0]
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <rand+0x70>)
 8009736:	6083      	str	r3, [r0, #8]
 8009738:	230b      	movs	r3, #11
 800973a:	8183      	strh	r3, [r0, #12]
 800973c:	2100      	movs	r1, #0
 800973e:	2001      	movs	r0, #1
 8009740:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009744:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009746:	480e      	ldr	r0, [pc, #56]	; (8009780 <rand+0x74>)
 8009748:	690b      	ldr	r3, [r1, #16]
 800974a:	694c      	ldr	r4, [r1, #20]
 800974c:	4a0d      	ldr	r2, [pc, #52]	; (8009784 <rand+0x78>)
 800974e:	4358      	muls	r0, r3
 8009750:	fb02 0004 	mla	r0, r2, r4, r0
 8009754:	fba3 3202 	umull	r3, r2, r3, r2
 8009758:	3301      	adds	r3, #1
 800975a:	eb40 0002 	adc.w	r0, r0, r2
 800975e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8009762:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009766:	bd10      	pop	{r4, pc}
 8009768:	20000098 	.word	0x20000098
 800976c:	0800dfb4 	.word	0x0800dfb4
 8009770:	0800dfcb 	.word	0x0800dfcb
 8009774:	abcd330e 	.word	0xabcd330e
 8009778:	e66d1234 	.word	0xe66d1234
 800977c:	0005deec 	.word	0x0005deec
 8009780:	5851f42d 	.word	0x5851f42d
 8009784:	4c957f2d 	.word	0x4c957f2d

08009788 <__cvt>:
 8009788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	ec55 4b10 	vmov	r4, r5, d0
 8009790:	2d00      	cmp	r5, #0
 8009792:	460e      	mov	r6, r1
 8009794:	4619      	mov	r1, r3
 8009796:	462b      	mov	r3, r5
 8009798:	bfbb      	ittet	lt
 800979a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800979e:	461d      	movlt	r5, r3
 80097a0:	2300      	movge	r3, #0
 80097a2:	232d      	movlt	r3, #45	; 0x2d
 80097a4:	700b      	strb	r3, [r1, #0]
 80097a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097ac:	4691      	mov	r9, r2
 80097ae:	f023 0820 	bic.w	r8, r3, #32
 80097b2:	bfbc      	itt	lt
 80097b4:	4622      	movlt	r2, r4
 80097b6:	4614      	movlt	r4, r2
 80097b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097bc:	d005      	beq.n	80097ca <__cvt+0x42>
 80097be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097c2:	d100      	bne.n	80097c6 <__cvt+0x3e>
 80097c4:	3601      	adds	r6, #1
 80097c6:	2102      	movs	r1, #2
 80097c8:	e000      	b.n	80097cc <__cvt+0x44>
 80097ca:	2103      	movs	r1, #3
 80097cc:	ab03      	add	r3, sp, #12
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	ab02      	add	r3, sp, #8
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	ec45 4b10 	vmov	d0, r4, r5
 80097d8:	4653      	mov	r3, sl
 80097da:	4632      	mov	r2, r6
 80097dc:	f001 f888 	bl	800a8f0 <_dtoa_r>
 80097e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097e4:	4607      	mov	r7, r0
 80097e6:	d102      	bne.n	80097ee <__cvt+0x66>
 80097e8:	f019 0f01 	tst.w	r9, #1
 80097ec:	d022      	beq.n	8009834 <__cvt+0xac>
 80097ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097f2:	eb07 0906 	add.w	r9, r7, r6
 80097f6:	d110      	bne.n	800981a <__cvt+0x92>
 80097f8:	783b      	ldrb	r3, [r7, #0]
 80097fa:	2b30      	cmp	r3, #48	; 0x30
 80097fc:	d10a      	bne.n	8009814 <__cvt+0x8c>
 80097fe:	2200      	movs	r2, #0
 8009800:	2300      	movs	r3, #0
 8009802:	4620      	mov	r0, r4
 8009804:	4629      	mov	r1, r5
 8009806:	f7f7 f987 	bl	8000b18 <__aeabi_dcmpeq>
 800980a:	b918      	cbnz	r0, 8009814 <__cvt+0x8c>
 800980c:	f1c6 0601 	rsb	r6, r6, #1
 8009810:	f8ca 6000 	str.w	r6, [sl]
 8009814:	f8da 3000 	ldr.w	r3, [sl]
 8009818:	4499      	add	r9, r3
 800981a:	2200      	movs	r2, #0
 800981c:	2300      	movs	r3, #0
 800981e:	4620      	mov	r0, r4
 8009820:	4629      	mov	r1, r5
 8009822:	f7f7 f979 	bl	8000b18 <__aeabi_dcmpeq>
 8009826:	b108      	cbz	r0, 800982c <__cvt+0xa4>
 8009828:	f8cd 900c 	str.w	r9, [sp, #12]
 800982c:	2230      	movs	r2, #48	; 0x30
 800982e:	9b03      	ldr	r3, [sp, #12]
 8009830:	454b      	cmp	r3, r9
 8009832:	d307      	bcc.n	8009844 <__cvt+0xbc>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009838:	1bdb      	subs	r3, r3, r7
 800983a:	4638      	mov	r0, r7
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	b004      	add	sp, #16
 8009840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009844:	1c59      	adds	r1, r3, #1
 8009846:	9103      	str	r1, [sp, #12]
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	e7f0      	b.n	800982e <__cvt+0xa6>

0800984c <__exponent>:
 800984c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800984e:	4603      	mov	r3, r0
 8009850:	2900      	cmp	r1, #0
 8009852:	bfb8      	it	lt
 8009854:	4249      	neglt	r1, r1
 8009856:	f803 2b02 	strb.w	r2, [r3], #2
 800985a:	bfb4      	ite	lt
 800985c:	222d      	movlt	r2, #45	; 0x2d
 800985e:	222b      	movge	r2, #43	; 0x2b
 8009860:	2909      	cmp	r1, #9
 8009862:	7042      	strb	r2, [r0, #1]
 8009864:	dd2a      	ble.n	80098bc <__exponent+0x70>
 8009866:	f10d 0207 	add.w	r2, sp, #7
 800986a:	4617      	mov	r7, r2
 800986c:	260a      	movs	r6, #10
 800986e:	4694      	mov	ip, r2
 8009870:	fb91 f5f6 	sdiv	r5, r1, r6
 8009874:	fb06 1415 	mls	r4, r6, r5, r1
 8009878:	3430      	adds	r4, #48	; 0x30
 800987a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800987e:	460c      	mov	r4, r1
 8009880:	2c63      	cmp	r4, #99	; 0x63
 8009882:	f102 32ff 	add.w	r2, r2, #4294967295
 8009886:	4629      	mov	r1, r5
 8009888:	dcf1      	bgt.n	800986e <__exponent+0x22>
 800988a:	3130      	adds	r1, #48	; 0x30
 800988c:	f1ac 0402 	sub.w	r4, ip, #2
 8009890:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009894:	1c41      	adds	r1, r0, #1
 8009896:	4622      	mov	r2, r4
 8009898:	42ba      	cmp	r2, r7
 800989a:	d30a      	bcc.n	80098b2 <__exponent+0x66>
 800989c:	f10d 0209 	add.w	r2, sp, #9
 80098a0:	eba2 020c 	sub.w	r2, r2, ip
 80098a4:	42bc      	cmp	r4, r7
 80098a6:	bf88      	it	hi
 80098a8:	2200      	movhi	r2, #0
 80098aa:	4413      	add	r3, r2
 80098ac:	1a18      	subs	r0, r3, r0
 80098ae:	b003      	add	sp, #12
 80098b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80098ba:	e7ed      	b.n	8009898 <__exponent+0x4c>
 80098bc:	2330      	movs	r3, #48	; 0x30
 80098be:	3130      	adds	r1, #48	; 0x30
 80098c0:	7083      	strb	r3, [r0, #2]
 80098c2:	70c1      	strb	r1, [r0, #3]
 80098c4:	1d03      	adds	r3, r0, #4
 80098c6:	e7f1      	b.n	80098ac <__exponent+0x60>

080098c8 <_printf_float>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	ed2d 8b02 	vpush	{d8}
 80098d0:	b08d      	sub	sp, #52	; 0x34
 80098d2:	460c      	mov	r4, r1
 80098d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098d8:	4616      	mov	r6, r2
 80098da:	461f      	mov	r7, r3
 80098dc:	4605      	mov	r5, r0
 80098de:	f000 fee5 	bl	800a6ac <_localeconv_r>
 80098e2:	f8d0 a000 	ldr.w	sl, [r0]
 80098e6:	4650      	mov	r0, sl
 80098e8:	f7f6 fcea 	bl	80002c0 <strlen>
 80098ec:	2300      	movs	r3, #0
 80098ee:	930a      	str	r3, [sp, #40]	; 0x28
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	9305      	str	r3, [sp, #20]
 80098f4:	f8d8 3000 	ldr.w	r3, [r8]
 80098f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098fc:	3307      	adds	r3, #7
 80098fe:	f023 0307 	bic.w	r3, r3, #7
 8009902:	f103 0208 	add.w	r2, r3, #8
 8009906:	f8c8 2000 	str.w	r2, [r8]
 800990a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800990e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009912:	9307      	str	r3, [sp, #28]
 8009914:	f8cd 8018 	str.w	r8, [sp, #24]
 8009918:	ee08 0a10 	vmov	s16, r0
 800991c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009920:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009924:	4b9e      	ldr	r3, [pc, #632]	; (8009ba0 <_printf_float+0x2d8>)
 8009926:	f04f 32ff 	mov.w	r2, #4294967295
 800992a:	f7f7 f927 	bl	8000b7c <__aeabi_dcmpun>
 800992e:	bb88      	cbnz	r0, 8009994 <_printf_float+0xcc>
 8009930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009934:	4b9a      	ldr	r3, [pc, #616]	; (8009ba0 <_printf_float+0x2d8>)
 8009936:	f04f 32ff 	mov.w	r2, #4294967295
 800993a:	f7f7 f901 	bl	8000b40 <__aeabi_dcmple>
 800993e:	bb48      	cbnz	r0, 8009994 <_printf_float+0xcc>
 8009940:	2200      	movs	r2, #0
 8009942:	2300      	movs	r3, #0
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f7 f8f0 	bl	8000b2c <__aeabi_dcmplt>
 800994c:	b110      	cbz	r0, 8009954 <_printf_float+0x8c>
 800994e:	232d      	movs	r3, #45	; 0x2d
 8009950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009954:	4a93      	ldr	r2, [pc, #588]	; (8009ba4 <_printf_float+0x2dc>)
 8009956:	4b94      	ldr	r3, [pc, #592]	; (8009ba8 <_printf_float+0x2e0>)
 8009958:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800995c:	bf94      	ite	ls
 800995e:	4690      	movls	r8, r2
 8009960:	4698      	movhi	r8, r3
 8009962:	2303      	movs	r3, #3
 8009964:	6123      	str	r3, [r4, #16]
 8009966:	9b05      	ldr	r3, [sp, #20]
 8009968:	f023 0304 	bic.w	r3, r3, #4
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	f04f 0900 	mov.w	r9, #0
 8009972:	9700      	str	r7, [sp, #0]
 8009974:	4633      	mov	r3, r6
 8009976:	aa0b      	add	r2, sp, #44	; 0x2c
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	f000 f9da 	bl	8009d34 <_printf_common>
 8009980:	3001      	adds	r0, #1
 8009982:	f040 8090 	bne.w	8009aa6 <_printf_float+0x1de>
 8009986:	f04f 30ff 	mov.w	r0, #4294967295
 800998a:	b00d      	add	sp, #52	; 0x34
 800998c:	ecbd 8b02 	vpop	{d8}
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	4642      	mov	r2, r8
 8009996:	464b      	mov	r3, r9
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	f7f7 f8ee 	bl	8000b7c <__aeabi_dcmpun>
 80099a0:	b140      	cbz	r0, 80099b4 <_printf_float+0xec>
 80099a2:	464b      	mov	r3, r9
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	bfbc      	itt	lt
 80099a8:	232d      	movlt	r3, #45	; 0x2d
 80099aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099ae:	4a7f      	ldr	r2, [pc, #508]	; (8009bac <_printf_float+0x2e4>)
 80099b0:	4b7f      	ldr	r3, [pc, #508]	; (8009bb0 <_printf_float+0x2e8>)
 80099b2:	e7d1      	b.n	8009958 <_printf_float+0x90>
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099ba:	9206      	str	r2, [sp, #24]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	d13f      	bne.n	8009a40 <_printf_float+0x178>
 80099c0:	2306      	movs	r3, #6
 80099c2:	6063      	str	r3, [r4, #4]
 80099c4:	9b05      	ldr	r3, [sp, #20]
 80099c6:	6861      	ldr	r1, [r4, #4]
 80099c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099cc:	2300      	movs	r3, #0
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	ab0a      	add	r3, sp, #40	; 0x28
 80099d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099d6:	ab09      	add	r3, sp, #36	; 0x24
 80099d8:	ec49 8b10 	vmov	d0, r8, r9
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	6022      	str	r2, [r4, #0]
 80099e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099e4:	4628      	mov	r0, r5
 80099e6:	f7ff fecf 	bl	8009788 <__cvt>
 80099ea:	9b06      	ldr	r3, [sp, #24]
 80099ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099ee:	2b47      	cmp	r3, #71	; 0x47
 80099f0:	4680      	mov	r8, r0
 80099f2:	d108      	bne.n	8009a06 <_printf_float+0x13e>
 80099f4:	1cc8      	adds	r0, r1, #3
 80099f6:	db02      	blt.n	80099fe <_printf_float+0x136>
 80099f8:	6863      	ldr	r3, [r4, #4]
 80099fa:	4299      	cmp	r1, r3
 80099fc:	dd41      	ble.n	8009a82 <_printf_float+0x1ba>
 80099fe:	f1ab 0302 	sub.w	r3, fp, #2
 8009a02:	fa5f fb83 	uxtb.w	fp, r3
 8009a06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a0a:	d820      	bhi.n	8009a4e <_printf_float+0x186>
 8009a0c:	3901      	subs	r1, #1
 8009a0e:	465a      	mov	r2, fp
 8009a10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a14:	9109      	str	r1, [sp, #36]	; 0x24
 8009a16:	f7ff ff19 	bl	800984c <__exponent>
 8009a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1c:	1813      	adds	r3, r2, r0
 8009a1e:	2a01      	cmp	r2, #1
 8009a20:	4681      	mov	r9, r0
 8009a22:	6123      	str	r3, [r4, #16]
 8009a24:	dc02      	bgt.n	8009a2c <_printf_float+0x164>
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	07d2      	lsls	r2, r2, #31
 8009a2a:	d501      	bpl.n	8009a30 <_printf_float+0x168>
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d09c      	beq.n	8009972 <_printf_float+0xaa>
 8009a38:	232d      	movs	r3, #45	; 0x2d
 8009a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a3e:	e798      	b.n	8009972 <_printf_float+0xaa>
 8009a40:	9a06      	ldr	r2, [sp, #24]
 8009a42:	2a47      	cmp	r2, #71	; 0x47
 8009a44:	d1be      	bne.n	80099c4 <_printf_float+0xfc>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1bc      	bne.n	80099c4 <_printf_float+0xfc>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e7b9      	b.n	80099c2 <_printf_float+0xfa>
 8009a4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a52:	d118      	bne.n	8009a86 <_printf_float+0x1be>
 8009a54:	2900      	cmp	r1, #0
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	dd0b      	ble.n	8009a72 <_printf_float+0x1aa>
 8009a5a:	6121      	str	r1, [r4, #16]
 8009a5c:	b913      	cbnz	r3, 8009a64 <_printf_float+0x19c>
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	07d0      	lsls	r0, r2, #31
 8009a62:	d502      	bpl.n	8009a6a <_printf_float+0x1a2>
 8009a64:	3301      	adds	r3, #1
 8009a66:	440b      	add	r3, r1
 8009a68:	6123      	str	r3, [r4, #16]
 8009a6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a6c:	f04f 0900 	mov.w	r9, #0
 8009a70:	e7de      	b.n	8009a30 <_printf_float+0x168>
 8009a72:	b913      	cbnz	r3, 8009a7a <_printf_float+0x1b2>
 8009a74:	6822      	ldr	r2, [r4, #0]
 8009a76:	07d2      	lsls	r2, r2, #31
 8009a78:	d501      	bpl.n	8009a7e <_printf_float+0x1b6>
 8009a7a:	3302      	adds	r3, #2
 8009a7c:	e7f4      	b.n	8009a68 <_printf_float+0x1a0>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e7f2      	b.n	8009a68 <_printf_float+0x1a0>
 8009a82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	db05      	blt.n	8009a98 <_printf_float+0x1d0>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	6121      	str	r1, [r4, #16]
 8009a90:	07d8      	lsls	r0, r3, #31
 8009a92:	d5ea      	bpl.n	8009a6a <_printf_float+0x1a2>
 8009a94:	1c4b      	adds	r3, r1, #1
 8009a96:	e7e7      	b.n	8009a68 <_printf_float+0x1a0>
 8009a98:	2900      	cmp	r1, #0
 8009a9a:	bfd4      	ite	le
 8009a9c:	f1c1 0202 	rsble	r2, r1, #2
 8009aa0:	2201      	movgt	r2, #1
 8009aa2:	4413      	add	r3, r2
 8009aa4:	e7e0      	b.n	8009a68 <_printf_float+0x1a0>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	055a      	lsls	r2, r3, #21
 8009aaa:	d407      	bmi.n	8009abc <_printf_float+0x1f4>
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	4642      	mov	r2, r8
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d12c      	bne.n	8009b14 <_printf_float+0x24c>
 8009aba:	e764      	b.n	8009986 <_printf_float+0xbe>
 8009abc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ac0:	f240 80e0 	bls.w	8009c84 <_printf_float+0x3bc>
 8009ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2300      	movs	r3, #0
 8009acc:	f7f7 f824 	bl	8000b18 <__aeabi_dcmpeq>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d034      	beq.n	8009b3e <_printf_float+0x276>
 8009ad4:	4a37      	ldr	r2, [pc, #220]	; (8009bb4 <_printf_float+0x2ec>)
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	f43f af51 	beq.w	8009986 <_printf_float+0xbe>
 8009ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	db02      	blt.n	8009af2 <_printf_float+0x22a>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	07d8      	lsls	r0, r3, #31
 8009af0:	d510      	bpl.n	8009b14 <_printf_float+0x24c>
 8009af2:	ee18 3a10 	vmov	r3, s16
 8009af6:	4652      	mov	r2, sl
 8009af8:	4631      	mov	r1, r6
 8009afa:	4628      	mov	r0, r5
 8009afc:	47b8      	blx	r7
 8009afe:	3001      	adds	r0, #1
 8009b00:	f43f af41 	beq.w	8009986 <_printf_float+0xbe>
 8009b04:	f04f 0800 	mov.w	r8, #0
 8009b08:	f104 091a 	add.w	r9, r4, #26
 8009b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	4543      	cmp	r3, r8
 8009b12:	dc09      	bgt.n	8009b28 <_printf_float+0x260>
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	079b      	lsls	r3, r3, #30
 8009b18:	f100 8107 	bmi.w	8009d2a <_printf_float+0x462>
 8009b1c:	68e0      	ldr	r0, [r4, #12]
 8009b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b20:	4298      	cmp	r0, r3
 8009b22:	bfb8      	it	lt
 8009b24:	4618      	movlt	r0, r3
 8009b26:	e730      	b.n	800998a <_printf_float+0xc2>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	464a      	mov	r2, r9
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f af27 	beq.w	8009986 <_printf_float+0xbe>
 8009b38:	f108 0801 	add.w	r8, r8, #1
 8009b3c:	e7e6      	b.n	8009b0c <_printf_float+0x244>
 8009b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc39      	bgt.n	8009bb8 <_printf_float+0x2f0>
 8009b44:	4a1b      	ldr	r2, [pc, #108]	; (8009bb4 <_printf_float+0x2ec>)
 8009b46:	2301      	movs	r3, #1
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f af19 	beq.w	8009986 <_printf_float+0xbe>
 8009b54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	d102      	bne.n	8009b62 <_printf_float+0x29a>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	07d9      	lsls	r1, r3, #31
 8009b60:	d5d8      	bpl.n	8009b14 <_printf_float+0x24c>
 8009b62:	ee18 3a10 	vmov	r3, s16
 8009b66:	4652      	mov	r2, sl
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af09 	beq.w	8009986 <_printf_float+0xbe>
 8009b74:	f04f 0900 	mov.w	r9, #0
 8009b78:	f104 0a1a 	add.w	sl, r4, #26
 8009b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7e:	425b      	negs	r3, r3
 8009b80:	454b      	cmp	r3, r9
 8009b82:	dc01      	bgt.n	8009b88 <_printf_float+0x2c0>
 8009b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b86:	e792      	b.n	8009aae <_printf_float+0x1e6>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f aef7 	beq.w	8009986 <_printf_float+0xbe>
 8009b98:	f109 0901 	add.w	r9, r9, #1
 8009b9c:	e7ee      	b.n	8009b7c <_printf_float+0x2b4>
 8009b9e:	bf00      	nop
 8009ba0:	7fefffff 	.word	0x7fefffff
 8009ba4:	0800e023 	.word	0x0800e023
 8009ba8:	0800e027 	.word	0x0800e027
 8009bac:	0800e02b 	.word	0x0800e02b
 8009bb0:	0800e02f 	.word	0x0800e02f
 8009bb4:	0800e033 	.word	0x0800e033
 8009bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	bfa8      	it	ge
 8009bc0:	461a      	movge	r2, r3
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	4691      	mov	r9, r2
 8009bc6:	dc37      	bgt.n	8009c38 <_printf_float+0x370>
 8009bc8:	f04f 0b00 	mov.w	fp, #0
 8009bcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd0:	f104 021a 	add.w	r2, r4, #26
 8009bd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bd6:	9305      	str	r3, [sp, #20]
 8009bd8:	eba3 0309 	sub.w	r3, r3, r9
 8009bdc:	455b      	cmp	r3, fp
 8009bde:	dc33      	bgt.n	8009c48 <_printf_float+0x380>
 8009be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009be4:	429a      	cmp	r2, r3
 8009be6:	db3b      	blt.n	8009c60 <_printf_float+0x398>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	07da      	lsls	r2, r3, #31
 8009bec:	d438      	bmi.n	8009c60 <_printf_float+0x398>
 8009bee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009bf2:	eba2 0903 	sub.w	r9, r2, r3
 8009bf6:	9b05      	ldr	r3, [sp, #20]
 8009bf8:	1ad2      	subs	r2, r2, r3
 8009bfa:	4591      	cmp	r9, r2
 8009bfc:	bfa8      	it	ge
 8009bfe:	4691      	movge	r9, r2
 8009c00:	f1b9 0f00 	cmp.w	r9, #0
 8009c04:	dc35      	bgt.n	8009c72 <_printf_float+0x3aa>
 8009c06:	f04f 0800 	mov.w	r8, #0
 8009c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c0e:	f104 0a1a 	add.w	sl, r4, #26
 8009c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	eba3 0309 	sub.w	r3, r3, r9
 8009c1c:	4543      	cmp	r3, r8
 8009c1e:	f77f af79 	ble.w	8009b14 <_printf_float+0x24c>
 8009c22:	2301      	movs	r3, #1
 8009c24:	4652      	mov	r2, sl
 8009c26:	4631      	mov	r1, r6
 8009c28:	4628      	mov	r0, r5
 8009c2a:	47b8      	blx	r7
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	f43f aeaa 	beq.w	8009986 <_printf_float+0xbe>
 8009c32:	f108 0801 	add.w	r8, r8, #1
 8009c36:	e7ec      	b.n	8009c12 <_printf_float+0x34a>
 8009c38:	4613      	mov	r3, r2
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	d1c0      	bne.n	8009bc8 <_printf_float+0x300>
 8009c46:	e69e      	b.n	8009986 <_printf_float+0xbe>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	9205      	str	r2, [sp, #20]
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f ae97 	beq.w	8009986 <_printf_float+0xbe>
 8009c58:	9a05      	ldr	r2, [sp, #20]
 8009c5a:	f10b 0b01 	add.w	fp, fp, #1
 8009c5e:	e7b9      	b.n	8009bd4 <_printf_float+0x30c>
 8009c60:	ee18 3a10 	vmov	r3, s16
 8009c64:	4652      	mov	r2, sl
 8009c66:	4631      	mov	r1, r6
 8009c68:	4628      	mov	r0, r5
 8009c6a:	47b8      	blx	r7
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d1be      	bne.n	8009bee <_printf_float+0x326>
 8009c70:	e689      	b.n	8009986 <_printf_float+0xbe>
 8009c72:	9a05      	ldr	r2, [sp, #20]
 8009c74:	464b      	mov	r3, r9
 8009c76:	4442      	add	r2, r8
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d1c1      	bne.n	8009c06 <_printf_float+0x33e>
 8009c82:	e680      	b.n	8009986 <_printf_float+0xbe>
 8009c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c86:	2a01      	cmp	r2, #1
 8009c88:	dc01      	bgt.n	8009c8e <_printf_float+0x3c6>
 8009c8a:	07db      	lsls	r3, r3, #31
 8009c8c:	d53a      	bpl.n	8009d04 <_printf_float+0x43c>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	4642      	mov	r2, r8
 8009c92:	4631      	mov	r1, r6
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b8      	blx	r7
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f43f ae74 	beq.w	8009986 <_printf_float+0xbe>
 8009c9e:	ee18 3a10 	vmov	r3, s16
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	f43f ae6b 	beq.w	8009986 <_printf_float+0xbe>
 8009cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009cbc:	f7f6 ff2c 	bl	8000b18 <__aeabi_dcmpeq>
 8009cc0:	b9d8      	cbnz	r0, 8009cfa <_printf_float+0x432>
 8009cc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009cc6:	f108 0201 	add.w	r2, r8, #1
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b8      	blx	r7
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d10e      	bne.n	8009cf2 <_printf_float+0x42a>
 8009cd4:	e657      	b.n	8009986 <_printf_float+0xbe>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4652      	mov	r2, sl
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4628      	mov	r0, r5
 8009cde:	47b8      	blx	r7
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	f43f ae50 	beq.w	8009986 <_printf_float+0xbe>
 8009ce6:	f108 0801 	add.w	r8, r8, #1
 8009cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cec:	3b01      	subs	r3, #1
 8009cee:	4543      	cmp	r3, r8
 8009cf0:	dcf1      	bgt.n	8009cd6 <_printf_float+0x40e>
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cf8:	e6da      	b.n	8009ab0 <_printf_float+0x1e8>
 8009cfa:	f04f 0800 	mov.w	r8, #0
 8009cfe:	f104 0a1a 	add.w	sl, r4, #26
 8009d02:	e7f2      	b.n	8009cea <_printf_float+0x422>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4642      	mov	r2, r8
 8009d08:	e7df      	b.n	8009cca <_printf_float+0x402>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	464a      	mov	r2, r9
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	f43f ae36 	beq.w	8009986 <_printf_float+0xbe>
 8009d1a:	f108 0801 	add.w	r8, r8, #1
 8009d1e:	68e3      	ldr	r3, [r4, #12]
 8009d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d22:	1a5b      	subs	r3, r3, r1
 8009d24:	4543      	cmp	r3, r8
 8009d26:	dcf0      	bgt.n	8009d0a <_printf_float+0x442>
 8009d28:	e6f8      	b.n	8009b1c <_printf_float+0x254>
 8009d2a:	f04f 0800 	mov.w	r8, #0
 8009d2e:	f104 0919 	add.w	r9, r4, #25
 8009d32:	e7f4      	b.n	8009d1e <_printf_float+0x456>

08009d34 <_printf_common>:
 8009d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d38:	4616      	mov	r6, r2
 8009d3a:	4699      	mov	r9, r3
 8009d3c:	688a      	ldr	r2, [r1, #8]
 8009d3e:	690b      	ldr	r3, [r1, #16]
 8009d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d44:	4293      	cmp	r3, r2
 8009d46:	bfb8      	it	lt
 8009d48:	4613      	movlt	r3, r2
 8009d4a:	6033      	str	r3, [r6, #0]
 8009d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d50:	4607      	mov	r7, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	b10a      	cbz	r2, 8009d5a <_printf_common+0x26>
 8009d56:	3301      	adds	r3, #1
 8009d58:	6033      	str	r3, [r6, #0]
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	0699      	lsls	r1, r3, #26
 8009d5e:	bf42      	ittt	mi
 8009d60:	6833      	ldrmi	r3, [r6, #0]
 8009d62:	3302      	addmi	r3, #2
 8009d64:	6033      	strmi	r3, [r6, #0]
 8009d66:	6825      	ldr	r5, [r4, #0]
 8009d68:	f015 0506 	ands.w	r5, r5, #6
 8009d6c:	d106      	bne.n	8009d7c <_printf_common+0x48>
 8009d6e:	f104 0a19 	add.w	sl, r4, #25
 8009d72:	68e3      	ldr	r3, [r4, #12]
 8009d74:	6832      	ldr	r2, [r6, #0]
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	42ab      	cmp	r3, r5
 8009d7a:	dc26      	bgt.n	8009dca <_printf_common+0x96>
 8009d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d80:	1e13      	subs	r3, r2, #0
 8009d82:	6822      	ldr	r2, [r4, #0]
 8009d84:	bf18      	it	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	0692      	lsls	r2, r2, #26
 8009d8a:	d42b      	bmi.n	8009de4 <_printf_common+0xb0>
 8009d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d90:	4649      	mov	r1, r9
 8009d92:	4638      	mov	r0, r7
 8009d94:	47c0      	blx	r8
 8009d96:	3001      	adds	r0, #1
 8009d98:	d01e      	beq.n	8009dd8 <_printf_common+0xa4>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	6922      	ldr	r2, [r4, #16]
 8009d9e:	f003 0306 	and.w	r3, r3, #6
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	bf02      	ittt	eq
 8009da6:	68e5      	ldreq	r5, [r4, #12]
 8009da8:	6833      	ldreq	r3, [r6, #0]
 8009daa:	1aed      	subeq	r5, r5, r3
 8009dac:	68a3      	ldr	r3, [r4, #8]
 8009dae:	bf0c      	ite	eq
 8009db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db4:	2500      	movne	r5, #0
 8009db6:	4293      	cmp	r3, r2
 8009db8:	bfc4      	itt	gt
 8009dba:	1a9b      	subgt	r3, r3, r2
 8009dbc:	18ed      	addgt	r5, r5, r3
 8009dbe:	2600      	movs	r6, #0
 8009dc0:	341a      	adds	r4, #26
 8009dc2:	42b5      	cmp	r5, r6
 8009dc4:	d11a      	bne.n	8009dfc <_printf_common+0xc8>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e008      	b.n	8009ddc <_printf_common+0xa8>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4652      	mov	r2, sl
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	47c0      	blx	r8
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d103      	bne.n	8009de0 <_printf_common+0xac>
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de0:	3501      	adds	r5, #1
 8009de2:	e7c6      	b.n	8009d72 <_printf_common+0x3e>
 8009de4:	18e1      	adds	r1, r4, r3
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	2030      	movs	r0, #48	; 0x30
 8009dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dee:	4422      	add	r2, r4
 8009df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009df8:	3302      	adds	r3, #2
 8009dfa:	e7c7      	b.n	8009d8c <_printf_common+0x58>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4649      	mov	r1, r9
 8009e02:	4638      	mov	r0, r7
 8009e04:	47c0      	blx	r8
 8009e06:	3001      	adds	r0, #1
 8009e08:	d0e6      	beq.n	8009dd8 <_printf_common+0xa4>
 8009e0a:	3601      	adds	r6, #1
 8009e0c:	e7d9      	b.n	8009dc2 <_printf_common+0x8e>
	...

08009e10 <_printf_i>:
 8009e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	7e0f      	ldrb	r7, [r1, #24]
 8009e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e18:	2f78      	cmp	r7, #120	; 0x78
 8009e1a:	4691      	mov	r9, r2
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	469a      	mov	sl, r3
 8009e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e26:	d807      	bhi.n	8009e38 <_printf_i+0x28>
 8009e28:	2f62      	cmp	r7, #98	; 0x62
 8009e2a:	d80a      	bhi.n	8009e42 <_printf_i+0x32>
 8009e2c:	2f00      	cmp	r7, #0
 8009e2e:	f000 80d4 	beq.w	8009fda <_printf_i+0x1ca>
 8009e32:	2f58      	cmp	r7, #88	; 0x58
 8009e34:	f000 80c0 	beq.w	8009fb8 <_printf_i+0x1a8>
 8009e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e40:	e03a      	b.n	8009eb8 <_printf_i+0xa8>
 8009e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e46:	2b15      	cmp	r3, #21
 8009e48:	d8f6      	bhi.n	8009e38 <_printf_i+0x28>
 8009e4a:	a101      	add	r1, pc, #4	; (adr r1, 8009e50 <_printf_i+0x40>)
 8009e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e50:	08009ea9 	.word	0x08009ea9
 8009e54:	08009ebd 	.word	0x08009ebd
 8009e58:	08009e39 	.word	0x08009e39
 8009e5c:	08009e39 	.word	0x08009e39
 8009e60:	08009e39 	.word	0x08009e39
 8009e64:	08009e39 	.word	0x08009e39
 8009e68:	08009ebd 	.word	0x08009ebd
 8009e6c:	08009e39 	.word	0x08009e39
 8009e70:	08009e39 	.word	0x08009e39
 8009e74:	08009e39 	.word	0x08009e39
 8009e78:	08009e39 	.word	0x08009e39
 8009e7c:	08009fc1 	.word	0x08009fc1
 8009e80:	08009ee9 	.word	0x08009ee9
 8009e84:	08009f7b 	.word	0x08009f7b
 8009e88:	08009e39 	.word	0x08009e39
 8009e8c:	08009e39 	.word	0x08009e39
 8009e90:	08009fe3 	.word	0x08009fe3
 8009e94:	08009e39 	.word	0x08009e39
 8009e98:	08009ee9 	.word	0x08009ee9
 8009e9c:	08009e39 	.word	0x08009e39
 8009ea0:	08009e39 	.word	0x08009e39
 8009ea4:	08009f83 	.word	0x08009f83
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	1d1a      	adds	r2, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	602a      	str	r2, [r5, #0]
 8009eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e09f      	b.n	8009ffc <_printf_i+0x1ec>
 8009ebc:	6820      	ldr	r0, [r4, #0]
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	0607      	lsls	r7, r0, #24
 8009ec2:	f103 0104 	add.w	r1, r3, #4
 8009ec6:	6029      	str	r1, [r5, #0]
 8009ec8:	d501      	bpl.n	8009ece <_printf_i+0xbe>
 8009eca:	681e      	ldr	r6, [r3, #0]
 8009ecc:	e003      	b.n	8009ed6 <_printf_i+0xc6>
 8009ece:	0646      	lsls	r6, r0, #25
 8009ed0:	d5fb      	bpl.n	8009eca <_printf_i+0xba>
 8009ed2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	da03      	bge.n	8009ee2 <_printf_i+0xd2>
 8009eda:	232d      	movs	r3, #45	; 0x2d
 8009edc:	4276      	negs	r6, r6
 8009ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee2:	485a      	ldr	r0, [pc, #360]	; (800a04c <_printf_i+0x23c>)
 8009ee4:	230a      	movs	r3, #10
 8009ee6:	e012      	b.n	8009f0e <_printf_i+0xfe>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	6820      	ldr	r0, [r4, #0]
 8009eec:	1d19      	adds	r1, r3, #4
 8009eee:	6029      	str	r1, [r5, #0]
 8009ef0:	0605      	lsls	r5, r0, #24
 8009ef2:	d501      	bpl.n	8009ef8 <_printf_i+0xe8>
 8009ef4:	681e      	ldr	r6, [r3, #0]
 8009ef6:	e002      	b.n	8009efe <_printf_i+0xee>
 8009ef8:	0641      	lsls	r1, r0, #25
 8009efa:	d5fb      	bpl.n	8009ef4 <_printf_i+0xe4>
 8009efc:	881e      	ldrh	r6, [r3, #0]
 8009efe:	4853      	ldr	r0, [pc, #332]	; (800a04c <_printf_i+0x23c>)
 8009f00:	2f6f      	cmp	r7, #111	; 0x6f
 8009f02:	bf0c      	ite	eq
 8009f04:	2308      	moveq	r3, #8
 8009f06:	230a      	movne	r3, #10
 8009f08:	2100      	movs	r1, #0
 8009f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f0e:	6865      	ldr	r5, [r4, #4]
 8009f10:	60a5      	str	r5, [r4, #8]
 8009f12:	2d00      	cmp	r5, #0
 8009f14:	bfa2      	ittt	ge
 8009f16:	6821      	ldrge	r1, [r4, #0]
 8009f18:	f021 0104 	bicge.w	r1, r1, #4
 8009f1c:	6021      	strge	r1, [r4, #0]
 8009f1e:	b90e      	cbnz	r6, 8009f24 <_printf_i+0x114>
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	d04b      	beq.n	8009fbc <_printf_i+0x1ac>
 8009f24:	4615      	mov	r5, r2
 8009f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8009f2e:	5dc7      	ldrb	r7, [r0, r7]
 8009f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f34:	4637      	mov	r7, r6
 8009f36:	42bb      	cmp	r3, r7
 8009f38:	460e      	mov	r6, r1
 8009f3a:	d9f4      	bls.n	8009f26 <_printf_i+0x116>
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d10b      	bne.n	8009f58 <_printf_i+0x148>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	07de      	lsls	r6, r3, #31
 8009f44:	d508      	bpl.n	8009f58 <_printf_i+0x148>
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	6861      	ldr	r1, [r4, #4]
 8009f4a:	4299      	cmp	r1, r3
 8009f4c:	bfde      	ittt	le
 8009f4e:	2330      	movle	r3, #48	; 0x30
 8009f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f58:	1b52      	subs	r2, r2, r5
 8009f5a:	6122      	str	r2, [r4, #16]
 8009f5c:	f8cd a000 	str.w	sl, [sp]
 8009f60:	464b      	mov	r3, r9
 8009f62:	aa03      	add	r2, sp, #12
 8009f64:	4621      	mov	r1, r4
 8009f66:	4640      	mov	r0, r8
 8009f68:	f7ff fee4 	bl	8009d34 <_printf_common>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d14a      	bne.n	800a006 <_printf_i+0x1f6>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	b004      	add	sp, #16
 8009f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	f043 0320 	orr.w	r3, r3, #32
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	4833      	ldr	r0, [pc, #204]	; (800a050 <_printf_i+0x240>)
 8009f84:	2778      	movs	r7, #120	; 0x78
 8009f86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	6829      	ldr	r1, [r5, #0]
 8009f8e:	061f      	lsls	r7, r3, #24
 8009f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f94:	d402      	bmi.n	8009f9c <_printf_i+0x18c>
 8009f96:	065f      	lsls	r7, r3, #25
 8009f98:	bf48      	it	mi
 8009f9a:	b2b6      	uxthmi	r6, r6
 8009f9c:	07df      	lsls	r7, r3, #31
 8009f9e:	bf48      	it	mi
 8009fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8009fa4:	6029      	str	r1, [r5, #0]
 8009fa6:	bf48      	it	mi
 8009fa8:	6023      	strmi	r3, [r4, #0]
 8009faa:	b91e      	cbnz	r6, 8009fb4 <_printf_i+0x1a4>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	f023 0320 	bic.w	r3, r3, #32
 8009fb2:	6023      	str	r3, [r4, #0]
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	e7a7      	b.n	8009f08 <_printf_i+0xf8>
 8009fb8:	4824      	ldr	r0, [pc, #144]	; (800a04c <_printf_i+0x23c>)
 8009fba:	e7e4      	b.n	8009f86 <_printf_i+0x176>
 8009fbc:	4615      	mov	r5, r2
 8009fbe:	e7bd      	b.n	8009f3c <_printf_i+0x12c>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	6826      	ldr	r6, [r4, #0]
 8009fc4:	6961      	ldr	r1, [r4, #20]
 8009fc6:	1d18      	adds	r0, r3, #4
 8009fc8:	6028      	str	r0, [r5, #0]
 8009fca:	0635      	lsls	r5, r6, #24
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	d501      	bpl.n	8009fd4 <_printf_i+0x1c4>
 8009fd0:	6019      	str	r1, [r3, #0]
 8009fd2:	e002      	b.n	8009fda <_printf_i+0x1ca>
 8009fd4:	0670      	lsls	r0, r6, #25
 8009fd6:	d5fb      	bpl.n	8009fd0 <_printf_i+0x1c0>
 8009fd8:	8019      	strh	r1, [r3, #0]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6123      	str	r3, [r4, #16]
 8009fde:	4615      	mov	r5, r2
 8009fe0:	e7bc      	b.n	8009f5c <_printf_i+0x14c>
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	1d1a      	adds	r2, r3, #4
 8009fe6:	602a      	str	r2, [r5, #0]
 8009fe8:	681d      	ldr	r5, [r3, #0]
 8009fea:	6862      	ldr	r2, [r4, #4]
 8009fec:	2100      	movs	r1, #0
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7f6 f916 	bl	8000220 <memchr>
 8009ff4:	b108      	cbz	r0, 8009ffa <_printf_i+0x1ea>
 8009ff6:	1b40      	subs	r0, r0, r5
 8009ff8:	6060      	str	r0, [r4, #4]
 8009ffa:	6863      	ldr	r3, [r4, #4]
 8009ffc:	6123      	str	r3, [r4, #16]
 8009ffe:	2300      	movs	r3, #0
 800a000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a004:	e7aa      	b.n	8009f5c <_printf_i+0x14c>
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	462a      	mov	r2, r5
 800a00a:	4649      	mov	r1, r9
 800a00c:	4640      	mov	r0, r8
 800a00e:	47d0      	blx	sl
 800a010:	3001      	adds	r0, #1
 800a012:	d0ad      	beq.n	8009f70 <_printf_i+0x160>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	079b      	lsls	r3, r3, #30
 800a018:	d413      	bmi.n	800a042 <_printf_i+0x232>
 800a01a:	68e0      	ldr	r0, [r4, #12]
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	4298      	cmp	r0, r3
 800a020:	bfb8      	it	lt
 800a022:	4618      	movlt	r0, r3
 800a024:	e7a6      	b.n	8009f74 <_printf_i+0x164>
 800a026:	2301      	movs	r3, #1
 800a028:	4632      	mov	r2, r6
 800a02a:	4649      	mov	r1, r9
 800a02c:	4640      	mov	r0, r8
 800a02e:	47d0      	blx	sl
 800a030:	3001      	adds	r0, #1
 800a032:	d09d      	beq.n	8009f70 <_printf_i+0x160>
 800a034:	3501      	adds	r5, #1
 800a036:	68e3      	ldr	r3, [r4, #12]
 800a038:	9903      	ldr	r1, [sp, #12]
 800a03a:	1a5b      	subs	r3, r3, r1
 800a03c:	42ab      	cmp	r3, r5
 800a03e:	dcf2      	bgt.n	800a026 <_printf_i+0x216>
 800a040:	e7eb      	b.n	800a01a <_printf_i+0x20a>
 800a042:	2500      	movs	r5, #0
 800a044:	f104 0619 	add.w	r6, r4, #25
 800a048:	e7f5      	b.n	800a036 <_printf_i+0x226>
 800a04a:	bf00      	nop
 800a04c:	0800e035 	.word	0x0800e035
 800a050:	0800e046 	.word	0x0800e046

0800a054 <_scanf_float>:
 800a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a058:	b087      	sub	sp, #28
 800a05a:	4617      	mov	r7, r2
 800a05c:	9303      	str	r3, [sp, #12]
 800a05e:	688b      	ldr	r3, [r1, #8]
 800a060:	1e5a      	subs	r2, r3, #1
 800a062:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a066:	bf83      	ittte	hi
 800a068:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a06c:	195b      	addhi	r3, r3, r5
 800a06e:	9302      	strhi	r3, [sp, #8]
 800a070:	2300      	movls	r3, #0
 800a072:	bf86      	itte	hi
 800a074:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a078:	608b      	strhi	r3, [r1, #8]
 800a07a:	9302      	strls	r3, [sp, #8]
 800a07c:	680b      	ldr	r3, [r1, #0]
 800a07e:	468b      	mov	fp, r1
 800a080:	2500      	movs	r5, #0
 800a082:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a086:	f84b 3b1c 	str.w	r3, [fp], #28
 800a08a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a08e:	4680      	mov	r8, r0
 800a090:	460c      	mov	r4, r1
 800a092:	465e      	mov	r6, fp
 800a094:	46aa      	mov	sl, r5
 800a096:	46a9      	mov	r9, r5
 800a098:	9501      	str	r5, [sp, #4]
 800a09a:	68a2      	ldr	r2, [r4, #8]
 800a09c:	b152      	cbz	r2, 800a0b4 <_scanf_float+0x60>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b4e      	cmp	r3, #78	; 0x4e
 800a0a4:	d864      	bhi.n	800a170 <_scanf_float+0x11c>
 800a0a6:	2b40      	cmp	r3, #64	; 0x40
 800a0a8:	d83c      	bhi.n	800a124 <_scanf_float+0xd0>
 800a0aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a0ae:	b2c8      	uxtb	r0, r1
 800a0b0:	280e      	cmp	r0, #14
 800a0b2:	d93a      	bls.n	800a12a <_scanf_float+0xd6>
 800a0b4:	f1b9 0f00 	cmp.w	r9, #0
 800a0b8:	d003      	beq.n	800a0c2 <_scanf_float+0x6e>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0c6:	f1ba 0f01 	cmp.w	sl, #1
 800a0ca:	f200 8113 	bhi.w	800a2f4 <_scanf_float+0x2a0>
 800a0ce:	455e      	cmp	r6, fp
 800a0d0:	f200 8105 	bhi.w	800a2de <_scanf_float+0x28a>
 800a0d4:	2501      	movs	r5, #1
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	b007      	add	sp, #28
 800a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a0e2:	2a0d      	cmp	r2, #13
 800a0e4:	d8e6      	bhi.n	800a0b4 <_scanf_float+0x60>
 800a0e6:	a101      	add	r1, pc, #4	; (adr r1, 800a0ec <_scanf_float+0x98>)
 800a0e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0ec:	0800a22b 	.word	0x0800a22b
 800a0f0:	0800a0b5 	.word	0x0800a0b5
 800a0f4:	0800a0b5 	.word	0x0800a0b5
 800a0f8:	0800a0b5 	.word	0x0800a0b5
 800a0fc:	0800a28b 	.word	0x0800a28b
 800a100:	0800a263 	.word	0x0800a263
 800a104:	0800a0b5 	.word	0x0800a0b5
 800a108:	0800a0b5 	.word	0x0800a0b5
 800a10c:	0800a239 	.word	0x0800a239
 800a110:	0800a0b5 	.word	0x0800a0b5
 800a114:	0800a0b5 	.word	0x0800a0b5
 800a118:	0800a0b5 	.word	0x0800a0b5
 800a11c:	0800a0b5 	.word	0x0800a0b5
 800a120:	0800a1f1 	.word	0x0800a1f1
 800a124:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a128:	e7db      	b.n	800a0e2 <_scanf_float+0x8e>
 800a12a:	290e      	cmp	r1, #14
 800a12c:	d8c2      	bhi.n	800a0b4 <_scanf_float+0x60>
 800a12e:	a001      	add	r0, pc, #4	; (adr r0, 800a134 <_scanf_float+0xe0>)
 800a130:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a134:	0800a1e3 	.word	0x0800a1e3
 800a138:	0800a0b5 	.word	0x0800a0b5
 800a13c:	0800a1e3 	.word	0x0800a1e3
 800a140:	0800a277 	.word	0x0800a277
 800a144:	0800a0b5 	.word	0x0800a0b5
 800a148:	0800a191 	.word	0x0800a191
 800a14c:	0800a1cd 	.word	0x0800a1cd
 800a150:	0800a1cd 	.word	0x0800a1cd
 800a154:	0800a1cd 	.word	0x0800a1cd
 800a158:	0800a1cd 	.word	0x0800a1cd
 800a15c:	0800a1cd 	.word	0x0800a1cd
 800a160:	0800a1cd 	.word	0x0800a1cd
 800a164:	0800a1cd 	.word	0x0800a1cd
 800a168:	0800a1cd 	.word	0x0800a1cd
 800a16c:	0800a1cd 	.word	0x0800a1cd
 800a170:	2b6e      	cmp	r3, #110	; 0x6e
 800a172:	d809      	bhi.n	800a188 <_scanf_float+0x134>
 800a174:	2b60      	cmp	r3, #96	; 0x60
 800a176:	d8b2      	bhi.n	800a0de <_scanf_float+0x8a>
 800a178:	2b54      	cmp	r3, #84	; 0x54
 800a17a:	d077      	beq.n	800a26c <_scanf_float+0x218>
 800a17c:	2b59      	cmp	r3, #89	; 0x59
 800a17e:	d199      	bne.n	800a0b4 <_scanf_float+0x60>
 800a180:	2d07      	cmp	r5, #7
 800a182:	d197      	bne.n	800a0b4 <_scanf_float+0x60>
 800a184:	2508      	movs	r5, #8
 800a186:	e029      	b.n	800a1dc <_scanf_float+0x188>
 800a188:	2b74      	cmp	r3, #116	; 0x74
 800a18a:	d06f      	beq.n	800a26c <_scanf_float+0x218>
 800a18c:	2b79      	cmp	r3, #121	; 0x79
 800a18e:	e7f6      	b.n	800a17e <_scanf_float+0x12a>
 800a190:	6821      	ldr	r1, [r4, #0]
 800a192:	05c8      	lsls	r0, r1, #23
 800a194:	d51a      	bpl.n	800a1cc <_scanf_float+0x178>
 800a196:	9b02      	ldr	r3, [sp, #8]
 800a198:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a19c:	6021      	str	r1, [r4, #0]
 800a19e:	f109 0901 	add.w	r9, r9, #1
 800a1a2:	b11b      	cbz	r3, 800a1ac <_scanf_float+0x158>
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	3201      	adds	r2, #1
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	60a2      	str	r2, [r4, #8]
 800a1ac:	68a3      	ldr	r3, [r4, #8]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	60a3      	str	r3, [r4, #8]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	f340 8084 	ble.w	800a2cc <_scanf_float+0x278>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	603b      	str	r3, [r7, #0]
 800a1ca:	e766      	b.n	800a09a <_scanf_float+0x46>
 800a1cc:	eb1a 0f05 	cmn.w	sl, r5
 800a1d0:	f47f af70 	bne.w	800a0b4 <_scanf_float+0x60>
 800a1d4:	6822      	ldr	r2, [r4, #0]
 800a1d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a1da:	6022      	str	r2, [r4, #0]
 800a1dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a1e0:	e7e4      	b.n	800a1ac <_scanf_float+0x158>
 800a1e2:	6822      	ldr	r2, [r4, #0]
 800a1e4:	0610      	lsls	r0, r2, #24
 800a1e6:	f57f af65 	bpl.w	800a0b4 <_scanf_float+0x60>
 800a1ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1ee:	e7f4      	b.n	800a1da <_scanf_float+0x186>
 800a1f0:	f1ba 0f00 	cmp.w	sl, #0
 800a1f4:	d10e      	bne.n	800a214 <_scanf_float+0x1c0>
 800a1f6:	f1b9 0f00 	cmp.w	r9, #0
 800a1fa:	d10e      	bne.n	800a21a <_scanf_float+0x1c6>
 800a1fc:	6822      	ldr	r2, [r4, #0]
 800a1fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a202:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a206:	d108      	bne.n	800a21a <_scanf_float+0x1c6>
 800a208:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a20c:	6022      	str	r2, [r4, #0]
 800a20e:	f04f 0a01 	mov.w	sl, #1
 800a212:	e7e3      	b.n	800a1dc <_scanf_float+0x188>
 800a214:	f1ba 0f02 	cmp.w	sl, #2
 800a218:	d055      	beq.n	800a2c6 <_scanf_float+0x272>
 800a21a:	2d01      	cmp	r5, #1
 800a21c:	d002      	beq.n	800a224 <_scanf_float+0x1d0>
 800a21e:	2d04      	cmp	r5, #4
 800a220:	f47f af48 	bne.w	800a0b4 <_scanf_float+0x60>
 800a224:	3501      	adds	r5, #1
 800a226:	b2ed      	uxtb	r5, r5
 800a228:	e7d8      	b.n	800a1dc <_scanf_float+0x188>
 800a22a:	f1ba 0f01 	cmp.w	sl, #1
 800a22e:	f47f af41 	bne.w	800a0b4 <_scanf_float+0x60>
 800a232:	f04f 0a02 	mov.w	sl, #2
 800a236:	e7d1      	b.n	800a1dc <_scanf_float+0x188>
 800a238:	b97d      	cbnz	r5, 800a25a <_scanf_float+0x206>
 800a23a:	f1b9 0f00 	cmp.w	r9, #0
 800a23e:	f47f af3c 	bne.w	800a0ba <_scanf_float+0x66>
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a248:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a24c:	f47f af39 	bne.w	800a0c2 <_scanf_float+0x6e>
 800a250:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a254:	6022      	str	r2, [r4, #0]
 800a256:	2501      	movs	r5, #1
 800a258:	e7c0      	b.n	800a1dc <_scanf_float+0x188>
 800a25a:	2d03      	cmp	r5, #3
 800a25c:	d0e2      	beq.n	800a224 <_scanf_float+0x1d0>
 800a25e:	2d05      	cmp	r5, #5
 800a260:	e7de      	b.n	800a220 <_scanf_float+0x1cc>
 800a262:	2d02      	cmp	r5, #2
 800a264:	f47f af26 	bne.w	800a0b4 <_scanf_float+0x60>
 800a268:	2503      	movs	r5, #3
 800a26a:	e7b7      	b.n	800a1dc <_scanf_float+0x188>
 800a26c:	2d06      	cmp	r5, #6
 800a26e:	f47f af21 	bne.w	800a0b4 <_scanf_float+0x60>
 800a272:	2507      	movs	r5, #7
 800a274:	e7b2      	b.n	800a1dc <_scanf_float+0x188>
 800a276:	6822      	ldr	r2, [r4, #0]
 800a278:	0591      	lsls	r1, r2, #22
 800a27a:	f57f af1b 	bpl.w	800a0b4 <_scanf_float+0x60>
 800a27e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a282:	6022      	str	r2, [r4, #0]
 800a284:	f8cd 9004 	str.w	r9, [sp, #4]
 800a288:	e7a8      	b.n	800a1dc <_scanf_float+0x188>
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a290:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a294:	d006      	beq.n	800a2a4 <_scanf_float+0x250>
 800a296:	0550      	lsls	r0, r2, #21
 800a298:	f57f af0c 	bpl.w	800a0b4 <_scanf_float+0x60>
 800a29c:	f1b9 0f00 	cmp.w	r9, #0
 800a2a0:	f43f af0f 	beq.w	800a0c2 <_scanf_float+0x6e>
 800a2a4:	0591      	lsls	r1, r2, #22
 800a2a6:	bf58      	it	pl
 800a2a8:	9901      	ldrpl	r1, [sp, #4]
 800a2aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2ae:	bf58      	it	pl
 800a2b0:	eba9 0101 	subpl.w	r1, r9, r1
 800a2b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2b8:	bf58      	it	pl
 800a2ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2be:	6022      	str	r2, [r4, #0]
 800a2c0:	f04f 0900 	mov.w	r9, #0
 800a2c4:	e78a      	b.n	800a1dc <_scanf_float+0x188>
 800a2c6:	f04f 0a03 	mov.w	sl, #3
 800a2ca:	e787      	b.n	800a1dc <_scanf_float+0x188>
 800a2cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4798      	blx	r3
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f43f aedf 	beq.w	800a09a <_scanf_float+0x46>
 800a2dc:	e6ea      	b.n	800a0b4 <_scanf_float+0x60>
 800a2de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2e6:	463a      	mov	r2, r7
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	4798      	blx	r3
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	6123      	str	r3, [r4, #16]
 800a2f2:	e6ec      	b.n	800a0ce <_scanf_float+0x7a>
 800a2f4:	1e6b      	subs	r3, r5, #1
 800a2f6:	2b06      	cmp	r3, #6
 800a2f8:	d825      	bhi.n	800a346 <_scanf_float+0x2f2>
 800a2fa:	2d02      	cmp	r5, #2
 800a2fc:	d836      	bhi.n	800a36c <_scanf_float+0x318>
 800a2fe:	455e      	cmp	r6, fp
 800a300:	f67f aee8 	bls.w	800a0d4 <_scanf_float+0x80>
 800a304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a308:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a30c:	463a      	mov	r2, r7
 800a30e:	4640      	mov	r0, r8
 800a310:	4798      	blx	r3
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	3b01      	subs	r3, #1
 800a316:	6123      	str	r3, [r4, #16]
 800a318:	e7f1      	b.n	800a2fe <_scanf_float+0x2aa>
 800a31a:	9802      	ldr	r0, [sp, #8]
 800a31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a320:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a324:	9002      	str	r0, [sp, #8]
 800a326:	463a      	mov	r2, r7
 800a328:	4640      	mov	r0, r8
 800a32a:	4798      	blx	r3
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	3b01      	subs	r3, #1
 800a330:	6123      	str	r3, [r4, #16]
 800a332:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a336:	fa5f fa8a 	uxtb.w	sl, sl
 800a33a:	f1ba 0f02 	cmp.w	sl, #2
 800a33e:	d1ec      	bne.n	800a31a <_scanf_float+0x2c6>
 800a340:	3d03      	subs	r5, #3
 800a342:	b2ed      	uxtb	r5, r5
 800a344:	1b76      	subs	r6, r6, r5
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	05da      	lsls	r2, r3, #23
 800a34a:	d52f      	bpl.n	800a3ac <_scanf_float+0x358>
 800a34c:	055b      	lsls	r3, r3, #21
 800a34e:	d510      	bpl.n	800a372 <_scanf_float+0x31e>
 800a350:	455e      	cmp	r6, fp
 800a352:	f67f aebf 	bls.w	800a0d4 <_scanf_float+0x80>
 800a356:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a35a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a35e:	463a      	mov	r2, r7
 800a360:	4640      	mov	r0, r8
 800a362:	4798      	blx	r3
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	3b01      	subs	r3, #1
 800a368:	6123      	str	r3, [r4, #16]
 800a36a:	e7f1      	b.n	800a350 <_scanf_float+0x2fc>
 800a36c:	46aa      	mov	sl, r5
 800a36e:	9602      	str	r6, [sp, #8]
 800a370:	e7df      	b.n	800a332 <_scanf_float+0x2de>
 800a372:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	2965      	cmp	r1, #101	; 0x65
 800a37a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a37e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a382:	6123      	str	r3, [r4, #16]
 800a384:	d00c      	beq.n	800a3a0 <_scanf_float+0x34c>
 800a386:	2945      	cmp	r1, #69	; 0x45
 800a388:	d00a      	beq.n	800a3a0 <_scanf_float+0x34c>
 800a38a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a38e:	463a      	mov	r2, r7
 800a390:	4640      	mov	r0, r8
 800a392:	4798      	blx	r3
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	1eb5      	subs	r5, r6, #2
 800a39e:	6123      	str	r3, [r4, #16]
 800a3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3a4:	463a      	mov	r2, r7
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4798      	blx	r3
 800a3aa:	462e      	mov	r6, r5
 800a3ac:	6825      	ldr	r5, [r4, #0]
 800a3ae:	f015 0510 	ands.w	r5, r5, #16
 800a3b2:	d158      	bne.n	800a466 <_scanf_float+0x412>
 800a3b4:	7035      	strb	r5, [r6, #0]
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c0:	d11c      	bne.n	800a3fc <_scanf_float+0x3a8>
 800a3c2:	9b01      	ldr	r3, [sp, #4]
 800a3c4:	454b      	cmp	r3, r9
 800a3c6:	eba3 0209 	sub.w	r2, r3, r9
 800a3ca:	d124      	bne.n	800a416 <_scanf_float+0x3c2>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f002 fc39 	bl	800cc48 <_strtod_r>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	6821      	ldr	r1, [r4, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f011 0f02 	tst.w	r1, #2
 800a3e0:	ec57 6b10 	vmov	r6, r7, d0
 800a3e4:	f103 0204 	add.w	r2, r3, #4
 800a3e8:	d020      	beq.n	800a42c <_scanf_float+0x3d8>
 800a3ea:	9903      	ldr	r1, [sp, #12]
 800a3ec:	600a      	str	r2, [r1, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	e9c3 6700 	strd	r6, r7, [r3]
 800a3f4:	68e3      	ldr	r3, [r4, #12]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	60e3      	str	r3, [r4, #12]
 800a3fa:	e66c      	b.n	800a0d6 <_scanf_float+0x82>
 800a3fc:	9b04      	ldr	r3, [sp, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d0e4      	beq.n	800a3cc <_scanf_float+0x378>
 800a402:	9905      	ldr	r1, [sp, #20]
 800a404:	230a      	movs	r3, #10
 800a406:	462a      	mov	r2, r5
 800a408:	3101      	adds	r1, #1
 800a40a:	4640      	mov	r0, r8
 800a40c:	f002 fca4 	bl	800cd58 <_strtol_r>
 800a410:	9b04      	ldr	r3, [sp, #16]
 800a412:	9e05      	ldr	r6, [sp, #20]
 800a414:	1ac2      	subs	r2, r0, r3
 800a416:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a41a:	429e      	cmp	r6, r3
 800a41c:	bf28      	it	cs
 800a41e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a422:	4912      	ldr	r1, [pc, #72]	; (800a46c <_scanf_float+0x418>)
 800a424:	4630      	mov	r0, r6
 800a426:	f000 f8d5 	bl	800a5d4 <siprintf>
 800a42a:	e7cf      	b.n	800a3cc <_scanf_float+0x378>
 800a42c:	f011 0f04 	tst.w	r1, #4
 800a430:	9903      	ldr	r1, [sp, #12]
 800a432:	600a      	str	r2, [r1, #0]
 800a434:	d1db      	bne.n	800a3ee <_scanf_float+0x39a>
 800a436:	f8d3 8000 	ldr.w	r8, [r3]
 800a43a:	ee10 2a10 	vmov	r2, s0
 800a43e:	ee10 0a10 	vmov	r0, s0
 800a442:	463b      	mov	r3, r7
 800a444:	4639      	mov	r1, r7
 800a446:	f7f6 fb99 	bl	8000b7c <__aeabi_dcmpun>
 800a44a:	b128      	cbz	r0, 800a458 <_scanf_float+0x404>
 800a44c:	4808      	ldr	r0, [pc, #32]	; (800a470 <_scanf_float+0x41c>)
 800a44e:	f000 f9a3 	bl	800a798 <nanf>
 800a452:	ed88 0a00 	vstr	s0, [r8]
 800a456:	e7cd      	b.n	800a3f4 <_scanf_float+0x3a0>
 800a458:	4630      	mov	r0, r6
 800a45a:	4639      	mov	r1, r7
 800a45c:	f7f6 fbec 	bl	8000c38 <__aeabi_d2f>
 800a460:	f8c8 0000 	str.w	r0, [r8]
 800a464:	e7c6      	b.n	800a3f4 <_scanf_float+0x3a0>
 800a466:	2500      	movs	r5, #0
 800a468:	e635      	b.n	800a0d6 <_scanf_float+0x82>
 800a46a:	bf00      	nop
 800a46c:	0800e057 	.word	0x0800e057
 800a470:	0800e097 	.word	0x0800e097

0800a474 <std>:
 800a474:	2300      	movs	r3, #0
 800a476:	b510      	push	{r4, lr}
 800a478:	4604      	mov	r4, r0
 800a47a:	e9c0 3300 	strd	r3, r3, [r0]
 800a47e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a482:	6083      	str	r3, [r0, #8]
 800a484:	8181      	strh	r1, [r0, #12]
 800a486:	6643      	str	r3, [r0, #100]	; 0x64
 800a488:	81c2      	strh	r2, [r0, #14]
 800a48a:	6183      	str	r3, [r0, #24]
 800a48c:	4619      	mov	r1, r3
 800a48e:	2208      	movs	r2, #8
 800a490:	305c      	adds	r0, #92	; 0x5c
 800a492:	f000 f902 	bl	800a69a <memset>
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <std+0x38>)
 800a498:	6263      	str	r3, [r4, #36]	; 0x24
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <std+0x3c>)
 800a49c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <std+0x40>)
 800a4a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4a2:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <std+0x44>)
 800a4a4:	6224      	str	r4, [r4, #32]
 800a4a6:	6323      	str	r3, [r4, #48]	; 0x30
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0800a615 	.word	0x0800a615
 800a4b0:	0800a637 	.word	0x0800a637
 800a4b4:	0800a66f 	.word	0x0800a66f
 800a4b8:	0800a693 	.word	0x0800a693

0800a4bc <stdio_exit_handler>:
 800a4bc:	4a02      	ldr	r2, [pc, #8]	; (800a4c8 <stdio_exit_handler+0xc>)
 800a4be:	4903      	ldr	r1, [pc, #12]	; (800a4cc <stdio_exit_handler+0x10>)
 800a4c0:	4803      	ldr	r0, [pc, #12]	; (800a4d0 <stdio_exit_handler+0x14>)
 800a4c2:	f000 b869 	b.w	800a598 <_fwalk_sglue>
 800a4c6:	bf00      	nop
 800a4c8:	20000040 	.word	0x20000040
 800a4cc:	0800d119 	.word	0x0800d119
 800a4d0:	2000004c 	.word	0x2000004c

0800a4d4 <cleanup_stdio>:
 800a4d4:	6841      	ldr	r1, [r0, #4]
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <cleanup_stdio+0x34>)
 800a4d8:	4299      	cmp	r1, r3
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	4604      	mov	r4, r0
 800a4de:	d001      	beq.n	800a4e4 <cleanup_stdio+0x10>
 800a4e0:	f002 fe1a 	bl	800d118 <_fflush_r>
 800a4e4:	68a1      	ldr	r1, [r4, #8]
 800a4e6:	4b09      	ldr	r3, [pc, #36]	; (800a50c <cleanup_stdio+0x38>)
 800a4e8:	4299      	cmp	r1, r3
 800a4ea:	d002      	beq.n	800a4f2 <cleanup_stdio+0x1e>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f002 fe13 	bl	800d118 <_fflush_r>
 800a4f2:	68e1      	ldr	r1, [r4, #12]
 800a4f4:	4b06      	ldr	r3, [pc, #24]	; (800a510 <cleanup_stdio+0x3c>)
 800a4f6:	4299      	cmp	r1, r3
 800a4f8:	d004      	beq.n	800a504 <cleanup_stdio+0x30>
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a500:	f002 be0a 	b.w	800d118 <_fflush_r>
 800a504:	bd10      	pop	{r4, pc}
 800a506:	bf00      	nop
 800a508:	200007b0 	.word	0x200007b0
 800a50c:	20000818 	.word	0x20000818
 800a510:	20000880 	.word	0x20000880

0800a514 <global_stdio_init.part.0>:
 800a514:	b510      	push	{r4, lr}
 800a516:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <global_stdio_init.part.0+0x30>)
 800a518:	4c0b      	ldr	r4, [pc, #44]	; (800a548 <global_stdio_init.part.0+0x34>)
 800a51a:	4a0c      	ldr	r2, [pc, #48]	; (800a54c <global_stdio_init.part.0+0x38>)
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	4620      	mov	r0, r4
 800a520:	2200      	movs	r2, #0
 800a522:	2104      	movs	r1, #4
 800a524:	f7ff ffa6 	bl	800a474 <std>
 800a528:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a52c:	2201      	movs	r2, #1
 800a52e:	2109      	movs	r1, #9
 800a530:	f7ff ffa0 	bl	800a474 <std>
 800a534:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a538:	2202      	movs	r2, #2
 800a53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a53e:	2112      	movs	r1, #18
 800a540:	f7ff bf98 	b.w	800a474 <std>
 800a544:	200008e8 	.word	0x200008e8
 800a548:	200007b0 	.word	0x200007b0
 800a54c:	0800a4bd 	.word	0x0800a4bd

0800a550 <__sfp_lock_acquire>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__sfp_lock_acquire+0x8>)
 800a552:	f000 b91f 	b.w	800a794 <__retarget_lock_acquire_recursive>
 800a556:	bf00      	nop
 800a558:	200008f1 	.word	0x200008f1

0800a55c <__sfp_lock_release>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__sfp_lock_release+0x8>)
 800a55e:	f000 b91a 	b.w	800a796 <__retarget_lock_release_recursive>
 800a562:	bf00      	nop
 800a564:	200008f1 	.word	0x200008f1

0800a568 <__sinit>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	4604      	mov	r4, r0
 800a56c:	f7ff fff0 	bl	800a550 <__sfp_lock_acquire>
 800a570:	6a23      	ldr	r3, [r4, #32]
 800a572:	b11b      	cbz	r3, 800a57c <__sinit+0x14>
 800a574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a578:	f7ff bff0 	b.w	800a55c <__sfp_lock_release>
 800a57c:	4b04      	ldr	r3, [pc, #16]	; (800a590 <__sinit+0x28>)
 800a57e:	6223      	str	r3, [r4, #32]
 800a580:	4b04      	ldr	r3, [pc, #16]	; (800a594 <__sinit+0x2c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1f5      	bne.n	800a574 <__sinit+0xc>
 800a588:	f7ff ffc4 	bl	800a514 <global_stdio_init.part.0>
 800a58c:	e7f2      	b.n	800a574 <__sinit+0xc>
 800a58e:	bf00      	nop
 800a590:	0800a4d5 	.word	0x0800a4d5
 800a594:	200008e8 	.word	0x200008e8

0800a598 <_fwalk_sglue>:
 800a598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a59c:	4607      	mov	r7, r0
 800a59e:	4688      	mov	r8, r1
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	2600      	movs	r6, #0
 800a5a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a5ac:	d505      	bpl.n	800a5ba <_fwalk_sglue+0x22>
 800a5ae:	6824      	ldr	r4, [r4, #0]
 800a5b0:	2c00      	cmp	r4, #0
 800a5b2:	d1f7      	bne.n	800a5a4 <_fwalk_sglue+0xc>
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d907      	bls.n	800a5d0 <_fwalk_sglue+0x38>
 800a5c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	d003      	beq.n	800a5d0 <_fwalk_sglue+0x38>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	47c0      	blx	r8
 800a5ce:	4306      	orrs	r6, r0
 800a5d0:	3568      	adds	r5, #104	; 0x68
 800a5d2:	e7e9      	b.n	800a5a8 <_fwalk_sglue+0x10>

0800a5d4 <siprintf>:
 800a5d4:	b40e      	push	{r1, r2, r3}
 800a5d6:	b500      	push	{lr}
 800a5d8:	b09c      	sub	sp, #112	; 0x70
 800a5da:	ab1d      	add	r3, sp, #116	; 0x74
 800a5dc:	9002      	str	r0, [sp, #8]
 800a5de:	9006      	str	r0, [sp, #24]
 800a5e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5e4:	4809      	ldr	r0, [pc, #36]	; (800a60c <siprintf+0x38>)
 800a5e6:	9107      	str	r1, [sp, #28]
 800a5e8:	9104      	str	r1, [sp, #16]
 800a5ea:	4909      	ldr	r1, [pc, #36]	; (800a610 <siprintf+0x3c>)
 800a5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f0:	9105      	str	r1, [sp, #20]
 800a5f2:	6800      	ldr	r0, [r0, #0]
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	a902      	add	r1, sp, #8
 800a5f8:	f002 fc0a 	bl	800ce10 <_svfiprintf_r>
 800a5fc:	9b02      	ldr	r3, [sp, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	b01c      	add	sp, #112	; 0x70
 800a604:	f85d eb04 	ldr.w	lr, [sp], #4
 800a608:	b003      	add	sp, #12
 800a60a:	4770      	bx	lr
 800a60c:	20000098 	.word	0x20000098
 800a610:	ffff0208 	.word	0xffff0208

0800a614 <__sread>:
 800a614:	b510      	push	{r4, lr}
 800a616:	460c      	mov	r4, r1
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	f000 f86c 	bl	800a6f8 <_read_r>
 800a620:	2800      	cmp	r0, #0
 800a622:	bfab      	itete	ge
 800a624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a626:	89a3      	ldrhlt	r3, [r4, #12]
 800a628:	181b      	addge	r3, r3, r0
 800a62a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a62e:	bfac      	ite	ge
 800a630:	6563      	strge	r3, [r4, #84]	; 0x54
 800a632:	81a3      	strhlt	r3, [r4, #12]
 800a634:	bd10      	pop	{r4, pc}

0800a636 <__swrite>:
 800a636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63a:	461f      	mov	r7, r3
 800a63c:	898b      	ldrh	r3, [r1, #12]
 800a63e:	05db      	lsls	r3, r3, #23
 800a640:	4605      	mov	r5, r0
 800a642:	460c      	mov	r4, r1
 800a644:	4616      	mov	r6, r2
 800a646:	d505      	bpl.n	800a654 <__swrite+0x1e>
 800a648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64c:	2302      	movs	r3, #2
 800a64e:	2200      	movs	r2, #0
 800a650:	f000 f840 	bl	800a6d4 <_lseek_r>
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a65a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	4632      	mov	r2, r6
 800a662:	463b      	mov	r3, r7
 800a664:	4628      	mov	r0, r5
 800a666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a66a:	f000 b857 	b.w	800a71c <_write_r>

0800a66e <__sseek>:
 800a66e:	b510      	push	{r4, lr}
 800a670:	460c      	mov	r4, r1
 800a672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a676:	f000 f82d 	bl	800a6d4 <_lseek_r>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	bf15      	itete	ne
 800a680:	6560      	strne	r0, [r4, #84]	; 0x54
 800a682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a68a:	81a3      	strheq	r3, [r4, #12]
 800a68c:	bf18      	it	ne
 800a68e:	81a3      	strhne	r3, [r4, #12]
 800a690:	bd10      	pop	{r4, pc}

0800a692 <__sclose>:
 800a692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a696:	f000 b80d 	b.w	800a6b4 <_close_r>

0800a69a <memset>:
 800a69a:	4402      	add	r2, r0
 800a69c:	4603      	mov	r3, r0
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d100      	bne.n	800a6a4 <memset+0xa>
 800a6a2:	4770      	bx	lr
 800a6a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a6a8:	e7f9      	b.n	800a69e <memset+0x4>
	...

0800a6ac <_localeconv_r>:
 800a6ac:	4800      	ldr	r0, [pc, #0]	; (800a6b0 <_localeconv_r+0x4>)
 800a6ae:	4770      	bx	lr
 800a6b0:	2000018c 	.word	0x2000018c

0800a6b4 <_close_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d06      	ldr	r5, [pc, #24]	; (800a6d0 <_close_r+0x1c>)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	602b      	str	r3, [r5, #0]
 800a6c0:	f7f8 fb81 	bl	8002dc6 <_close>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_close_r+0x1a>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_close_r+0x1a>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	200008ec 	.word	0x200008ec

0800a6d4 <_lseek_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4d07      	ldr	r5, [pc, #28]	; (800a6f4 <_lseek_r+0x20>)
 800a6d8:	4604      	mov	r4, r0
 800a6da:	4608      	mov	r0, r1
 800a6dc:	4611      	mov	r1, r2
 800a6de:	2200      	movs	r2, #0
 800a6e0:	602a      	str	r2, [r5, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f7f8 fb96 	bl	8002e14 <_lseek>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_lseek_r+0x1e>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_lseek_r+0x1e>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	200008ec 	.word	0x200008ec

0800a6f8 <_read_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <_read_r+0x20>)
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	4608      	mov	r0, r1
 800a700:	4611      	mov	r1, r2
 800a702:	2200      	movs	r2, #0
 800a704:	602a      	str	r2, [r5, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	f7f8 fb24 	bl	8002d54 <_read>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <_read_r+0x1e>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b103      	cbz	r3, 800a716 <_read_r+0x1e>
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	200008ec 	.word	0x200008ec

0800a71c <_write_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d07      	ldr	r5, [pc, #28]	; (800a73c <_write_r+0x20>)
 800a720:	4604      	mov	r4, r0
 800a722:	4608      	mov	r0, r1
 800a724:	4611      	mov	r1, r2
 800a726:	2200      	movs	r2, #0
 800a728:	602a      	str	r2, [r5, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	f7f8 fb2f 	bl	8002d8e <_write>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d102      	bne.n	800a73a <_write_r+0x1e>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	b103      	cbz	r3, 800a73a <_write_r+0x1e>
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	200008ec 	.word	0x200008ec

0800a740 <__errno>:
 800a740:	4b01      	ldr	r3, [pc, #4]	; (800a748 <__errno+0x8>)
 800a742:	6818      	ldr	r0, [r3, #0]
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	20000098 	.word	0x20000098

0800a74c <__libc_init_array>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	4d0d      	ldr	r5, [pc, #52]	; (800a784 <__libc_init_array+0x38>)
 800a750:	4c0d      	ldr	r4, [pc, #52]	; (800a788 <__libc_init_array+0x3c>)
 800a752:	1b64      	subs	r4, r4, r5
 800a754:	10a4      	asrs	r4, r4, #2
 800a756:	2600      	movs	r6, #0
 800a758:	42a6      	cmp	r6, r4
 800a75a:	d109      	bne.n	800a770 <__libc_init_array+0x24>
 800a75c:	4d0b      	ldr	r5, [pc, #44]	; (800a78c <__libc_init_array+0x40>)
 800a75e:	4c0c      	ldr	r4, [pc, #48]	; (800a790 <__libc_init_array+0x44>)
 800a760:	f003 fbd0 	bl	800df04 <_init>
 800a764:	1b64      	subs	r4, r4, r5
 800a766:	10a4      	asrs	r4, r4, #2
 800a768:	2600      	movs	r6, #0
 800a76a:	42a6      	cmp	r6, r4
 800a76c:	d105      	bne.n	800a77a <__libc_init_array+0x2e>
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	f855 3b04 	ldr.w	r3, [r5], #4
 800a774:	4798      	blx	r3
 800a776:	3601      	adds	r6, #1
 800a778:	e7ee      	b.n	800a758 <__libc_init_array+0xc>
 800a77a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77e:	4798      	blx	r3
 800a780:	3601      	adds	r6, #1
 800a782:	e7f2      	b.n	800a76a <__libc_init_array+0x1e>
 800a784:	0800e43c 	.word	0x0800e43c
 800a788:	0800e43c 	.word	0x0800e43c
 800a78c:	0800e43c 	.word	0x0800e43c
 800a790:	0800e440 	.word	0x0800e440

0800a794 <__retarget_lock_acquire_recursive>:
 800a794:	4770      	bx	lr

0800a796 <__retarget_lock_release_recursive>:
 800a796:	4770      	bx	lr

0800a798 <nanf>:
 800a798:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a7a0 <nanf+0x8>
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	7fc00000 	.word	0x7fc00000

0800a7a4 <__assert_func>:
 800a7a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7a6:	4614      	mov	r4, r2
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <__assert_func+0x2c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	68d8      	ldr	r0, [r3, #12]
 800a7b2:	b14c      	cbz	r4, 800a7c8 <__assert_func+0x24>
 800a7b4:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <__assert_func+0x30>)
 800a7b6:	9100      	str	r1, [sp, #0]
 800a7b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7bc:	4906      	ldr	r1, [pc, #24]	; (800a7d8 <__assert_func+0x34>)
 800a7be:	462b      	mov	r3, r5
 800a7c0:	f002 fcd2 	bl	800d168 <fiprintf>
 800a7c4:	f002 fd34 	bl	800d230 <abort>
 800a7c8:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <__assert_func+0x38>)
 800a7ca:	461c      	mov	r4, r3
 800a7cc:	e7f3      	b.n	800a7b6 <__assert_func+0x12>
 800a7ce:	bf00      	nop
 800a7d0:	20000098 	.word	0x20000098
 800a7d4:	0800e05c 	.word	0x0800e05c
 800a7d8:	0800e069 	.word	0x0800e069
 800a7dc:	0800e097 	.word	0x0800e097

0800a7e0 <quorem>:
 800a7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	6903      	ldr	r3, [r0, #16]
 800a7e6:	690c      	ldr	r4, [r1, #16]
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	db7e      	blt.n	800a8ec <quorem+0x10c>
 800a7ee:	3c01      	subs	r4, #1
 800a7f0:	f101 0814 	add.w	r8, r1, #20
 800a7f4:	f100 0514 	add.w	r5, r0, #20
 800a7f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a806:	3301      	adds	r3, #1
 800a808:	429a      	cmp	r2, r3
 800a80a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a80e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a812:	fbb2 f6f3 	udiv	r6, r2, r3
 800a816:	d331      	bcc.n	800a87c <quorem+0x9c>
 800a818:	f04f 0e00 	mov.w	lr, #0
 800a81c:	4640      	mov	r0, r8
 800a81e:	46ac      	mov	ip, r5
 800a820:	46f2      	mov	sl, lr
 800a822:	f850 2b04 	ldr.w	r2, [r0], #4
 800a826:	b293      	uxth	r3, r2
 800a828:	fb06 e303 	mla	r3, r6, r3, lr
 800a82c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a830:	0c1a      	lsrs	r2, r3, #16
 800a832:	b29b      	uxth	r3, r3
 800a834:	ebaa 0303 	sub.w	r3, sl, r3
 800a838:	f8dc a000 	ldr.w	sl, [ip]
 800a83c:	fa13 f38a 	uxtah	r3, r3, sl
 800a840:	fb06 220e 	mla	r2, r6, lr, r2
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	9b00      	ldr	r3, [sp, #0]
 800a848:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a84c:	b292      	uxth	r2, r2
 800a84e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a852:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a856:	f8bd 3000 	ldrh.w	r3, [sp]
 800a85a:	4581      	cmp	r9, r0
 800a85c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a860:	f84c 3b04 	str.w	r3, [ip], #4
 800a864:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a868:	d2db      	bcs.n	800a822 <quorem+0x42>
 800a86a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a86e:	b92b      	cbnz	r3, 800a87c <quorem+0x9c>
 800a870:	9b01      	ldr	r3, [sp, #4]
 800a872:	3b04      	subs	r3, #4
 800a874:	429d      	cmp	r5, r3
 800a876:	461a      	mov	r2, r3
 800a878:	d32c      	bcc.n	800a8d4 <quorem+0xf4>
 800a87a:	613c      	str	r4, [r7, #16]
 800a87c:	4638      	mov	r0, r7
 800a87e:	f001 f9ef 	bl	800bc60 <__mcmp>
 800a882:	2800      	cmp	r0, #0
 800a884:	db22      	blt.n	800a8cc <quorem+0xec>
 800a886:	3601      	adds	r6, #1
 800a888:	4629      	mov	r1, r5
 800a88a:	2000      	movs	r0, #0
 800a88c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a890:	f8d1 c000 	ldr.w	ip, [r1]
 800a894:	b293      	uxth	r3, r2
 800a896:	1ac3      	subs	r3, r0, r3
 800a898:	0c12      	lsrs	r2, r2, #16
 800a89a:	fa13 f38c 	uxtah	r3, r3, ip
 800a89e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a8a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8ac:	45c1      	cmp	r9, r8
 800a8ae:	f841 3b04 	str.w	r3, [r1], #4
 800a8b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8b6:	d2e9      	bcs.n	800a88c <quorem+0xac>
 800a8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8c0:	b922      	cbnz	r2, 800a8cc <quorem+0xec>
 800a8c2:	3b04      	subs	r3, #4
 800a8c4:	429d      	cmp	r5, r3
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	d30a      	bcc.n	800a8e0 <quorem+0x100>
 800a8ca:	613c      	str	r4, [r7, #16]
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	b003      	add	sp, #12
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	6812      	ldr	r2, [r2, #0]
 800a8d6:	3b04      	subs	r3, #4
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	d1ce      	bne.n	800a87a <quorem+0x9a>
 800a8dc:	3c01      	subs	r4, #1
 800a8de:	e7c9      	b.n	800a874 <quorem+0x94>
 800a8e0:	6812      	ldr	r2, [r2, #0]
 800a8e2:	3b04      	subs	r3, #4
 800a8e4:	2a00      	cmp	r2, #0
 800a8e6:	d1f0      	bne.n	800a8ca <quorem+0xea>
 800a8e8:	3c01      	subs	r4, #1
 800a8ea:	e7eb      	b.n	800a8c4 <quorem+0xe4>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e7ee      	b.n	800a8ce <quorem+0xee>

0800a8f0 <_dtoa_r>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	ed2d 8b04 	vpush	{d8-d9}
 800a8f8:	69c5      	ldr	r5, [r0, #28]
 800a8fa:	b093      	sub	sp, #76	; 0x4c
 800a8fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a900:	ec57 6b10 	vmov	r6, r7, d0
 800a904:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a908:	9107      	str	r1, [sp, #28]
 800a90a:	4604      	mov	r4, r0
 800a90c:	920a      	str	r2, [sp, #40]	; 0x28
 800a90e:	930d      	str	r3, [sp, #52]	; 0x34
 800a910:	b975      	cbnz	r5, 800a930 <_dtoa_r+0x40>
 800a912:	2010      	movs	r0, #16
 800a914:	f000 fe2a 	bl	800b56c <malloc>
 800a918:	4602      	mov	r2, r0
 800a91a:	61e0      	str	r0, [r4, #28]
 800a91c:	b920      	cbnz	r0, 800a928 <_dtoa_r+0x38>
 800a91e:	4bae      	ldr	r3, [pc, #696]	; (800abd8 <_dtoa_r+0x2e8>)
 800a920:	21ef      	movs	r1, #239	; 0xef
 800a922:	48ae      	ldr	r0, [pc, #696]	; (800abdc <_dtoa_r+0x2ec>)
 800a924:	f7ff ff3e 	bl	800a7a4 <__assert_func>
 800a928:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a92c:	6005      	str	r5, [r0, #0]
 800a92e:	60c5      	str	r5, [r0, #12]
 800a930:	69e3      	ldr	r3, [r4, #28]
 800a932:	6819      	ldr	r1, [r3, #0]
 800a934:	b151      	cbz	r1, 800a94c <_dtoa_r+0x5c>
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	604a      	str	r2, [r1, #4]
 800a93a:	2301      	movs	r3, #1
 800a93c:	4093      	lsls	r3, r2
 800a93e:	608b      	str	r3, [r1, #8]
 800a940:	4620      	mov	r0, r4
 800a942:	f000 ff07 	bl	800b754 <_Bfree>
 800a946:	69e3      	ldr	r3, [r4, #28]
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	1e3b      	subs	r3, r7, #0
 800a94e:	bfbb      	ittet	lt
 800a950:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a954:	9303      	strlt	r3, [sp, #12]
 800a956:	2300      	movge	r3, #0
 800a958:	2201      	movlt	r2, #1
 800a95a:	bfac      	ite	ge
 800a95c:	f8c8 3000 	strge.w	r3, [r8]
 800a960:	f8c8 2000 	strlt.w	r2, [r8]
 800a964:	4b9e      	ldr	r3, [pc, #632]	; (800abe0 <_dtoa_r+0x2f0>)
 800a966:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a96a:	ea33 0308 	bics.w	r3, r3, r8
 800a96e:	d11b      	bne.n	800a9a8 <_dtoa_r+0xb8>
 800a970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a972:	f242 730f 	movw	r3, #9999	; 0x270f
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a97c:	4333      	orrs	r3, r6
 800a97e:	f000 8593 	beq.w	800b4a8 <_dtoa_r+0xbb8>
 800a982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a984:	b963      	cbnz	r3, 800a9a0 <_dtoa_r+0xb0>
 800a986:	4b97      	ldr	r3, [pc, #604]	; (800abe4 <_dtoa_r+0x2f4>)
 800a988:	e027      	b.n	800a9da <_dtoa_r+0xea>
 800a98a:	4b97      	ldr	r3, [pc, #604]	; (800abe8 <_dtoa_r+0x2f8>)
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	9800      	ldr	r0, [sp, #0]
 800a996:	b013      	add	sp, #76	; 0x4c
 800a998:	ecbd 8b04 	vpop	{d8-d9}
 800a99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a0:	4b90      	ldr	r3, [pc, #576]	; (800abe4 <_dtoa_r+0x2f4>)
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	3303      	adds	r3, #3
 800a9a6:	e7f3      	b.n	800a990 <_dtoa_r+0xa0>
 800a9a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	ec51 0b17 	vmov	r0, r1, d7
 800a9b2:	eeb0 8a47 	vmov.f32	s16, s14
 800a9b6:	eef0 8a67 	vmov.f32	s17, s15
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f7f6 f8ac 	bl	8000b18 <__aeabi_dcmpeq>
 800a9c0:	4681      	mov	r9, r0
 800a9c2:	b160      	cbz	r0, 800a9de <_dtoa_r+0xee>
 800a9c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 8568 	beq.w	800b4a2 <_dtoa_r+0xbb2>
 800a9d2:	4b86      	ldr	r3, [pc, #536]	; (800abec <_dtoa_r+0x2fc>)
 800a9d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	e7da      	b.n	800a994 <_dtoa_r+0xa4>
 800a9de:	aa10      	add	r2, sp, #64	; 0x40
 800a9e0:	a911      	add	r1, sp, #68	; 0x44
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a9e8:	eef0 0a68 	vmov.f32	s1, s17
 800a9ec:	f001 fa4e 	bl	800be8c <__d2b>
 800a9f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	2d00      	cmp	r5, #0
 800a9f8:	d07f      	beq.n	800aafa <_dtoa_r+0x20a>
 800a9fa:	ee18 3a90 	vmov	r3, s17
 800a9fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aa06:	ec51 0b18 	vmov	r0, r1, d8
 800aa0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aa16:	4619      	mov	r1, r3
 800aa18:	2200      	movs	r2, #0
 800aa1a:	4b75      	ldr	r3, [pc, #468]	; (800abf0 <_dtoa_r+0x300>)
 800aa1c:	f7f5 fc5c 	bl	80002d8 <__aeabi_dsub>
 800aa20:	a367      	add	r3, pc, #412	; (adr r3, 800abc0 <_dtoa_r+0x2d0>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f5 fe0f 	bl	8000648 <__aeabi_dmul>
 800aa2a:	a367      	add	r3, pc, #412	; (adr r3, 800abc8 <_dtoa_r+0x2d8>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fc54 	bl	80002dc <__adddf3>
 800aa34:	4606      	mov	r6, r0
 800aa36:	4628      	mov	r0, r5
 800aa38:	460f      	mov	r7, r1
 800aa3a:	f7f5 fd9b 	bl	8000574 <__aeabi_i2d>
 800aa3e:	a364      	add	r3, pc, #400	; (adr r3, 800abd0 <_dtoa_r+0x2e0>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f7f5 fe00 	bl	8000648 <__aeabi_dmul>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	f7f5 fc44 	bl	80002dc <__adddf3>
 800aa54:	4606      	mov	r6, r0
 800aa56:	460f      	mov	r7, r1
 800aa58:	f7f6 f8a6 	bl	8000ba8 <__aeabi_d2iz>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4683      	mov	fp, r0
 800aa60:	2300      	movs	r3, #0
 800aa62:	4630      	mov	r0, r6
 800aa64:	4639      	mov	r1, r7
 800aa66:	f7f6 f861 	bl	8000b2c <__aeabi_dcmplt>
 800aa6a:	b148      	cbz	r0, 800aa80 <_dtoa_r+0x190>
 800aa6c:	4658      	mov	r0, fp
 800aa6e:	f7f5 fd81 	bl	8000574 <__aeabi_i2d>
 800aa72:	4632      	mov	r2, r6
 800aa74:	463b      	mov	r3, r7
 800aa76:	f7f6 f84f 	bl	8000b18 <__aeabi_dcmpeq>
 800aa7a:	b908      	cbnz	r0, 800aa80 <_dtoa_r+0x190>
 800aa7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa80:	f1bb 0f16 	cmp.w	fp, #22
 800aa84:	d857      	bhi.n	800ab36 <_dtoa_r+0x246>
 800aa86:	4b5b      	ldr	r3, [pc, #364]	; (800abf4 <_dtoa_r+0x304>)
 800aa88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	ec51 0b18 	vmov	r0, r1, d8
 800aa94:	f7f6 f84a 	bl	8000b2c <__aeabi_dcmplt>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d04e      	beq.n	800ab3a <_dtoa_r+0x24a>
 800aa9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	930c      	str	r3, [sp, #48]	; 0x30
 800aaa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaa6:	1b5b      	subs	r3, r3, r5
 800aaa8:	1e5a      	subs	r2, r3, #1
 800aaaa:	bf45      	ittet	mi
 800aaac:	f1c3 0301 	rsbmi	r3, r3, #1
 800aab0:	9305      	strmi	r3, [sp, #20]
 800aab2:	2300      	movpl	r3, #0
 800aab4:	2300      	movmi	r3, #0
 800aab6:	9206      	str	r2, [sp, #24]
 800aab8:	bf54      	ite	pl
 800aaba:	9305      	strpl	r3, [sp, #20]
 800aabc:	9306      	strmi	r3, [sp, #24]
 800aabe:	f1bb 0f00 	cmp.w	fp, #0
 800aac2:	db3c      	blt.n	800ab3e <_dtoa_r+0x24e>
 800aac4:	9b06      	ldr	r3, [sp, #24]
 800aac6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aaca:	445b      	add	r3, fp
 800aacc:	9306      	str	r3, [sp, #24]
 800aace:	2300      	movs	r3, #0
 800aad0:	9308      	str	r3, [sp, #32]
 800aad2:	9b07      	ldr	r3, [sp, #28]
 800aad4:	2b09      	cmp	r3, #9
 800aad6:	d868      	bhi.n	800abaa <_dtoa_r+0x2ba>
 800aad8:	2b05      	cmp	r3, #5
 800aada:	bfc4      	itt	gt
 800aadc:	3b04      	subgt	r3, #4
 800aade:	9307      	strgt	r3, [sp, #28]
 800aae0:	9b07      	ldr	r3, [sp, #28]
 800aae2:	f1a3 0302 	sub.w	r3, r3, #2
 800aae6:	bfcc      	ite	gt
 800aae8:	2500      	movgt	r5, #0
 800aaea:	2501      	movle	r5, #1
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	f200 8085 	bhi.w	800abfc <_dtoa_r+0x30c>
 800aaf2:	e8df f003 	tbb	[pc, r3]
 800aaf6:	3b2e      	.short	0x3b2e
 800aaf8:	5839      	.short	0x5839
 800aafa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aafe:	441d      	add	r5, r3
 800ab00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	bfc1      	itttt	gt
 800ab08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab0c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ab10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ab14:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ab18:	bfd6      	itet	le
 800ab1a:	f1c3 0320 	rsble	r3, r3, #32
 800ab1e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ab22:	fa06 f003 	lslle.w	r0, r6, r3
 800ab26:	f7f5 fd15 	bl	8000554 <__aeabi_ui2d>
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ab30:	3d01      	subs	r5, #1
 800ab32:	920e      	str	r2, [sp, #56]	; 0x38
 800ab34:	e76f      	b.n	800aa16 <_dtoa_r+0x126>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e7b3      	b.n	800aaa2 <_dtoa_r+0x1b2>
 800ab3a:	900c      	str	r0, [sp, #48]	; 0x30
 800ab3c:	e7b2      	b.n	800aaa4 <_dtoa_r+0x1b4>
 800ab3e:	9b05      	ldr	r3, [sp, #20]
 800ab40:	eba3 030b 	sub.w	r3, r3, fp
 800ab44:	9305      	str	r3, [sp, #20]
 800ab46:	f1cb 0300 	rsb	r3, fp, #0
 800ab4a:	9308      	str	r3, [sp, #32]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab50:	e7bf      	b.n	800aad2 <_dtoa_r+0x1e2>
 800ab52:	2300      	movs	r3, #0
 800ab54:	9309      	str	r3, [sp, #36]	; 0x24
 800ab56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dc52      	bgt.n	800ac02 <_dtoa_r+0x312>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	9304      	str	r3, [sp, #16]
 800ab62:	461a      	mov	r2, r3
 800ab64:	920a      	str	r2, [sp, #40]	; 0x28
 800ab66:	e00b      	b.n	800ab80 <_dtoa_r+0x290>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e7f3      	b.n	800ab54 <_dtoa_r+0x264>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab72:	445b      	add	r3, fp
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	3301      	adds	r3, #1
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	9304      	str	r3, [sp, #16]
 800ab7c:	bfb8      	it	lt
 800ab7e:	2301      	movlt	r3, #1
 800ab80:	69e0      	ldr	r0, [r4, #28]
 800ab82:	2100      	movs	r1, #0
 800ab84:	2204      	movs	r2, #4
 800ab86:	f102 0614 	add.w	r6, r2, #20
 800ab8a:	429e      	cmp	r6, r3
 800ab8c:	d93d      	bls.n	800ac0a <_dtoa_r+0x31a>
 800ab8e:	6041      	str	r1, [r0, #4]
 800ab90:	4620      	mov	r0, r4
 800ab92:	f000 fd9f 	bl	800b6d4 <_Balloc>
 800ab96:	9000      	str	r0, [sp, #0]
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d139      	bne.n	800ac10 <_dtoa_r+0x320>
 800ab9c:	4b16      	ldr	r3, [pc, #88]	; (800abf8 <_dtoa_r+0x308>)
 800ab9e:	4602      	mov	r2, r0
 800aba0:	f240 11af 	movw	r1, #431	; 0x1af
 800aba4:	e6bd      	b.n	800a922 <_dtoa_r+0x32>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e7e1      	b.n	800ab6e <_dtoa_r+0x27e>
 800abaa:	2501      	movs	r5, #1
 800abac:	2300      	movs	r3, #0
 800abae:	9307      	str	r3, [sp, #28]
 800abb0:	9509      	str	r5, [sp, #36]	; 0x24
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	2200      	movs	r2, #0
 800abbc:	2312      	movs	r3, #18
 800abbe:	e7d1      	b.n	800ab64 <_dtoa_r+0x274>
 800abc0:	636f4361 	.word	0x636f4361
 800abc4:	3fd287a7 	.word	0x3fd287a7
 800abc8:	8b60c8b3 	.word	0x8b60c8b3
 800abcc:	3fc68a28 	.word	0x3fc68a28
 800abd0:	509f79fb 	.word	0x509f79fb
 800abd4:	3fd34413 	.word	0x3fd34413
 800abd8:	0800dfb4 	.word	0x0800dfb4
 800abdc:	0800e0a5 	.word	0x0800e0a5
 800abe0:	7ff00000 	.word	0x7ff00000
 800abe4:	0800e0a1 	.word	0x0800e0a1
 800abe8:	0800e098 	.word	0x0800e098
 800abec:	0800e034 	.word	0x0800e034
 800abf0:	3ff80000 	.word	0x3ff80000
 800abf4:	0800e190 	.word	0x0800e190
 800abf8:	0800e0fd 	.word	0x0800e0fd
 800abfc:	2301      	movs	r3, #1
 800abfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ac00:	e7d7      	b.n	800abb2 <_dtoa_r+0x2c2>
 800ac02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	9304      	str	r3, [sp, #16]
 800ac08:	e7ba      	b.n	800ab80 <_dtoa_r+0x290>
 800ac0a:	3101      	adds	r1, #1
 800ac0c:	0052      	lsls	r2, r2, #1
 800ac0e:	e7ba      	b.n	800ab86 <_dtoa_r+0x296>
 800ac10:	69e3      	ldr	r3, [r4, #28]
 800ac12:	9a00      	ldr	r2, [sp, #0]
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	2b0e      	cmp	r3, #14
 800ac1a:	f200 80a8 	bhi.w	800ad6e <_dtoa_r+0x47e>
 800ac1e:	2d00      	cmp	r5, #0
 800ac20:	f000 80a5 	beq.w	800ad6e <_dtoa_r+0x47e>
 800ac24:	f1bb 0f00 	cmp.w	fp, #0
 800ac28:	dd38      	ble.n	800ac9c <_dtoa_r+0x3ac>
 800ac2a:	4bc0      	ldr	r3, [pc, #768]	; (800af2c <_dtoa_r+0x63c>)
 800ac2c:	f00b 020f 	and.w	r2, fp, #15
 800ac30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ac38:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ac3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ac40:	d019      	beq.n	800ac76 <_dtoa_r+0x386>
 800ac42:	4bbb      	ldr	r3, [pc, #748]	; (800af30 <_dtoa_r+0x640>)
 800ac44:	ec51 0b18 	vmov	r0, r1, d8
 800ac48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac4c:	f7f5 fe26 	bl	800089c <__aeabi_ddiv>
 800ac50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac54:	f008 080f 	and.w	r8, r8, #15
 800ac58:	2503      	movs	r5, #3
 800ac5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800af30 <_dtoa_r+0x640>
 800ac5e:	f1b8 0f00 	cmp.w	r8, #0
 800ac62:	d10a      	bne.n	800ac7a <_dtoa_r+0x38a>
 800ac64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac68:	4632      	mov	r2, r6
 800ac6a:	463b      	mov	r3, r7
 800ac6c:	f7f5 fe16 	bl	800089c <__aeabi_ddiv>
 800ac70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac74:	e02b      	b.n	800acce <_dtoa_r+0x3de>
 800ac76:	2502      	movs	r5, #2
 800ac78:	e7ef      	b.n	800ac5a <_dtoa_r+0x36a>
 800ac7a:	f018 0f01 	tst.w	r8, #1
 800ac7e:	d008      	beq.n	800ac92 <_dtoa_r+0x3a2>
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac88:	f7f5 fcde 	bl	8000648 <__aeabi_dmul>
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460f      	mov	r7, r1
 800ac92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac96:	f109 0908 	add.w	r9, r9, #8
 800ac9a:	e7e0      	b.n	800ac5e <_dtoa_r+0x36e>
 800ac9c:	f000 809f 	beq.w	800adde <_dtoa_r+0x4ee>
 800aca0:	f1cb 0600 	rsb	r6, fp, #0
 800aca4:	4ba1      	ldr	r3, [pc, #644]	; (800af2c <_dtoa_r+0x63c>)
 800aca6:	4fa2      	ldr	r7, [pc, #648]	; (800af30 <_dtoa_r+0x640>)
 800aca8:	f006 020f 	and.w	r2, r6, #15
 800acac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	ec51 0b18 	vmov	r0, r1, d8
 800acb8:	f7f5 fcc6 	bl	8000648 <__aeabi_dmul>
 800acbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc0:	1136      	asrs	r6, r6, #4
 800acc2:	2300      	movs	r3, #0
 800acc4:	2502      	movs	r5, #2
 800acc6:	2e00      	cmp	r6, #0
 800acc8:	d17e      	bne.n	800adc8 <_dtoa_r+0x4d8>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1d0      	bne.n	800ac70 <_dtoa_r+0x380>
 800acce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 8084 	beq.w	800ade2 <_dtoa_r+0x4f2>
 800acda:	4b96      	ldr	r3, [pc, #600]	; (800af34 <_dtoa_r+0x644>)
 800acdc:	2200      	movs	r2, #0
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	f7f5 ff23 	bl	8000b2c <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d07b      	beq.n	800ade2 <_dtoa_r+0x4f2>
 800acea:	9b04      	ldr	r3, [sp, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d078      	beq.n	800ade2 <_dtoa_r+0x4f2>
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dd39      	ble.n	800ad6a <_dtoa_r+0x47a>
 800acf6:	4b90      	ldr	r3, [pc, #576]	; (800af38 <_dtoa_r+0x648>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	4640      	mov	r0, r8
 800acfc:	4649      	mov	r1, r9
 800acfe:	f7f5 fca3 	bl	8000648 <__aeabi_dmul>
 800ad02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad06:	9e01      	ldr	r6, [sp, #4]
 800ad08:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ad0c:	3501      	adds	r5, #1
 800ad0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad12:	4628      	mov	r0, r5
 800ad14:	f7f5 fc2e 	bl	8000574 <__aeabi_i2d>
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	f7f5 fc94 	bl	8000648 <__aeabi_dmul>
 800ad20:	4b86      	ldr	r3, [pc, #536]	; (800af3c <_dtoa_r+0x64c>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	f7f5 fada 	bl	80002dc <__adddf3>
 800ad28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ad2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad30:	9303      	str	r3, [sp, #12]
 800ad32:	2e00      	cmp	r6, #0
 800ad34:	d158      	bne.n	800ade8 <_dtoa_r+0x4f8>
 800ad36:	4b82      	ldr	r3, [pc, #520]	; (800af40 <_dtoa_r+0x650>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	f7f5 facb 	bl	80002d8 <__aeabi_dsub>
 800ad42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad46:	4680      	mov	r8, r0
 800ad48:	4689      	mov	r9, r1
 800ad4a:	f7f5 ff0d 	bl	8000b68 <__aeabi_dcmpgt>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	f040 8296 	bne.w	800b280 <_dtoa_r+0x990>
 800ad54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad58:	4640      	mov	r0, r8
 800ad5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad5e:	4649      	mov	r1, r9
 800ad60:	f7f5 fee4 	bl	8000b2c <__aeabi_dcmplt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 8289 	bne.w	800b27c <_dtoa_r+0x98c>
 800ad6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f2c0 814e 	blt.w	800b012 <_dtoa_r+0x722>
 800ad76:	f1bb 0f0e 	cmp.w	fp, #14
 800ad7a:	f300 814a 	bgt.w	800b012 <_dtoa_r+0x722>
 800ad7e:	4b6b      	ldr	r3, [pc, #428]	; (800af2c <_dtoa_r+0x63c>)
 800ad80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f280 80dc 	bge.w	800af48 <_dtoa_r+0x658>
 800ad90:	9b04      	ldr	r3, [sp, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f300 80d8 	bgt.w	800af48 <_dtoa_r+0x658>
 800ad98:	f040 826f 	bne.w	800b27a <_dtoa_r+0x98a>
 800ad9c:	4b68      	ldr	r3, [pc, #416]	; (800af40 <_dtoa_r+0x650>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4640      	mov	r0, r8
 800ada2:	4649      	mov	r1, r9
 800ada4:	f7f5 fc50 	bl	8000648 <__aeabi_dmul>
 800ada8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adac:	f7f5 fed2 	bl	8000b54 <__aeabi_dcmpge>
 800adb0:	9e04      	ldr	r6, [sp, #16]
 800adb2:	4637      	mov	r7, r6
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f040 8245 	bne.w	800b244 <_dtoa_r+0x954>
 800adba:	9d00      	ldr	r5, [sp, #0]
 800adbc:	2331      	movs	r3, #49	; 0x31
 800adbe:	f805 3b01 	strb.w	r3, [r5], #1
 800adc2:	f10b 0b01 	add.w	fp, fp, #1
 800adc6:	e241      	b.n	800b24c <_dtoa_r+0x95c>
 800adc8:	07f2      	lsls	r2, r6, #31
 800adca:	d505      	bpl.n	800add8 <_dtoa_r+0x4e8>
 800adcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800add0:	f7f5 fc3a 	bl	8000648 <__aeabi_dmul>
 800add4:	3501      	adds	r5, #1
 800add6:	2301      	movs	r3, #1
 800add8:	1076      	asrs	r6, r6, #1
 800adda:	3708      	adds	r7, #8
 800addc:	e773      	b.n	800acc6 <_dtoa_r+0x3d6>
 800adde:	2502      	movs	r5, #2
 800ade0:	e775      	b.n	800acce <_dtoa_r+0x3de>
 800ade2:	9e04      	ldr	r6, [sp, #16]
 800ade4:	465f      	mov	r7, fp
 800ade6:	e792      	b.n	800ad0e <_dtoa_r+0x41e>
 800ade8:	9900      	ldr	r1, [sp, #0]
 800adea:	4b50      	ldr	r3, [pc, #320]	; (800af2c <_dtoa_r+0x63c>)
 800adec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adf0:	4431      	add	r1, r6
 800adf2:	9102      	str	r1, [sp, #8]
 800adf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adf6:	eeb0 9a47 	vmov.f32	s18, s14
 800adfa:	eef0 9a67 	vmov.f32	s19, s15
 800adfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae06:	2900      	cmp	r1, #0
 800ae08:	d044      	beq.n	800ae94 <_dtoa_r+0x5a4>
 800ae0a:	494e      	ldr	r1, [pc, #312]	; (800af44 <_dtoa_r+0x654>)
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	f7f5 fd45 	bl	800089c <__aeabi_ddiv>
 800ae12:	ec53 2b19 	vmov	r2, r3, d9
 800ae16:	f7f5 fa5f 	bl	80002d8 <__aeabi_dsub>
 800ae1a:	9d00      	ldr	r5, [sp, #0]
 800ae1c:	ec41 0b19 	vmov	d9, r0, r1
 800ae20:	4649      	mov	r1, r9
 800ae22:	4640      	mov	r0, r8
 800ae24:	f7f5 fec0 	bl	8000ba8 <__aeabi_d2iz>
 800ae28:	4606      	mov	r6, r0
 800ae2a:	f7f5 fba3 	bl	8000574 <__aeabi_i2d>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4640      	mov	r0, r8
 800ae34:	4649      	mov	r1, r9
 800ae36:	f7f5 fa4f 	bl	80002d8 <__aeabi_dsub>
 800ae3a:	3630      	adds	r6, #48	; 0x30
 800ae3c:	f805 6b01 	strb.w	r6, [r5], #1
 800ae40:	ec53 2b19 	vmov	r2, r3, d9
 800ae44:	4680      	mov	r8, r0
 800ae46:	4689      	mov	r9, r1
 800ae48:	f7f5 fe70 	bl	8000b2c <__aeabi_dcmplt>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d164      	bne.n	800af1a <_dtoa_r+0x62a>
 800ae50:	4642      	mov	r2, r8
 800ae52:	464b      	mov	r3, r9
 800ae54:	4937      	ldr	r1, [pc, #220]	; (800af34 <_dtoa_r+0x644>)
 800ae56:	2000      	movs	r0, #0
 800ae58:	f7f5 fa3e 	bl	80002d8 <__aeabi_dsub>
 800ae5c:	ec53 2b19 	vmov	r2, r3, d9
 800ae60:	f7f5 fe64 	bl	8000b2c <__aeabi_dcmplt>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f040 80b6 	bne.w	800afd6 <_dtoa_r+0x6e6>
 800ae6a:	9b02      	ldr	r3, [sp, #8]
 800ae6c:	429d      	cmp	r5, r3
 800ae6e:	f43f af7c 	beq.w	800ad6a <_dtoa_r+0x47a>
 800ae72:	4b31      	ldr	r3, [pc, #196]	; (800af38 <_dtoa_r+0x648>)
 800ae74:	ec51 0b19 	vmov	r0, r1, d9
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f7f5 fbe5 	bl	8000648 <__aeabi_dmul>
 800ae7e:	4b2e      	ldr	r3, [pc, #184]	; (800af38 <_dtoa_r+0x648>)
 800ae80:	ec41 0b19 	vmov	d9, r0, r1
 800ae84:	2200      	movs	r2, #0
 800ae86:	4640      	mov	r0, r8
 800ae88:	4649      	mov	r1, r9
 800ae8a:	f7f5 fbdd 	bl	8000648 <__aeabi_dmul>
 800ae8e:	4680      	mov	r8, r0
 800ae90:	4689      	mov	r9, r1
 800ae92:	e7c5      	b.n	800ae20 <_dtoa_r+0x530>
 800ae94:	ec51 0b17 	vmov	r0, r1, d7
 800ae98:	f7f5 fbd6 	bl	8000648 <__aeabi_dmul>
 800ae9c:	9b02      	ldr	r3, [sp, #8]
 800ae9e:	9d00      	ldr	r5, [sp, #0]
 800aea0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aea2:	ec41 0b19 	vmov	d9, r0, r1
 800aea6:	4649      	mov	r1, r9
 800aea8:	4640      	mov	r0, r8
 800aeaa:	f7f5 fe7d 	bl	8000ba8 <__aeabi_d2iz>
 800aeae:	4606      	mov	r6, r0
 800aeb0:	f7f5 fb60 	bl	8000574 <__aeabi_i2d>
 800aeb4:	3630      	adds	r6, #48	; 0x30
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4640      	mov	r0, r8
 800aebc:	4649      	mov	r1, r9
 800aebe:	f7f5 fa0b 	bl	80002d8 <__aeabi_dsub>
 800aec2:	f805 6b01 	strb.w	r6, [r5], #1
 800aec6:	9b02      	ldr	r3, [sp, #8]
 800aec8:	429d      	cmp	r5, r3
 800aeca:	4680      	mov	r8, r0
 800aecc:	4689      	mov	r9, r1
 800aece:	f04f 0200 	mov.w	r2, #0
 800aed2:	d124      	bne.n	800af1e <_dtoa_r+0x62e>
 800aed4:	4b1b      	ldr	r3, [pc, #108]	; (800af44 <_dtoa_r+0x654>)
 800aed6:	ec51 0b19 	vmov	r0, r1, d9
 800aeda:	f7f5 f9ff 	bl	80002dc <__adddf3>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4640      	mov	r0, r8
 800aee4:	4649      	mov	r1, r9
 800aee6:	f7f5 fe3f 	bl	8000b68 <__aeabi_dcmpgt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d173      	bne.n	800afd6 <_dtoa_r+0x6e6>
 800aeee:	ec53 2b19 	vmov	r2, r3, d9
 800aef2:	4914      	ldr	r1, [pc, #80]	; (800af44 <_dtoa_r+0x654>)
 800aef4:	2000      	movs	r0, #0
 800aef6:	f7f5 f9ef 	bl	80002d8 <__aeabi_dsub>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4640      	mov	r0, r8
 800af00:	4649      	mov	r1, r9
 800af02:	f7f5 fe13 	bl	8000b2c <__aeabi_dcmplt>
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f af2f 	beq.w	800ad6a <_dtoa_r+0x47a>
 800af0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af0e:	1e6b      	subs	r3, r5, #1
 800af10:	930f      	str	r3, [sp, #60]	; 0x3c
 800af12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af16:	2b30      	cmp	r3, #48	; 0x30
 800af18:	d0f8      	beq.n	800af0c <_dtoa_r+0x61c>
 800af1a:	46bb      	mov	fp, r7
 800af1c:	e04a      	b.n	800afb4 <_dtoa_r+0x6c4>
 800af1e:	4b06      	ldr	r3, [pc, #24]	; (800af38 <_dtoa_r+0x648>)
 800af20:	f7f5 fb92 	bl	8000648 <__aeabi_dmul>
 800af24:	4680      	mov	r8, r0
 800af26:	4689      	mov	r9, r1
 800af28:	e7bd      	b.n	800aea6 <_dtoa_r+0x5b6>
 800af2a:	bf00      	nop
 800af2c:	0800e190 	.word	0x0800e190
 800af30:	0800e168 	.word	0x0800e168
 800af34:	3ff00000 	.word	0x3ff00000
 800af38:	40240000 	.word	0x40240000
 800af3c:	401c0000 	.word	0x401c0000
 800af40:	40140000 	.word	0x40140000
 800af44:	3fe00000 	.word	0x3fe00000
 800af48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af4c:	9d00      	ldr	r5, [sp, #0]
 800af4e:	4642      	mov	r2, r8
 800af50:	464b      	mov	r3, r9
 800af52:	4630      	mov	r0, r6
 800af54:	4639      	mov	r1, r7
 800af56:	f7f5 fca1 	bl	800089c <__aeabi_ddiv>
 800af5a:	f7f5 fe25 	bl	8000ba8 <__aeabi_d2iz>
 800af5e:	9001      	str	r0, [sp, #4]
 800af60:	f7f5 fb08 	bl	8000574 <__aeabi_i2d>
 800af64:	4642      	mov	r2, r8
 800af66:	464b      	mov	r3, r9
 800af68:	f7f5 fb6e 	bl	8000648 <__aeabi_dmul>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	f7f5 f9b0 	bl	80002d8 <__aeabi_dsub>
 800af78:	9e01      	ldr	r6, [sp, #4]
 800af7a:	9f04      	ldr	r7, [sp, #16]
 800af7c:	3630      	adds	r6, #48	; 0x30
 800af7e:	f805 6b01 	strb.w	r6, [r5], #1
 800af82:	9e00      	ldr	r6, [sp, #0]
 800af84:	1bae      	subs	r6, r5, r6
 800af86:	42b7      	cmp	r7, r6
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	d134      	bne.n	800aff8 <_dtoa_r+0x708>
 800af8e:	f7f5 f9a5 	bl	80002dc <__adddf3>
 800af92:	4642      	mov	r2, r8
 800af94:	464b      	mov	r3, r9
 800af96:	4606      	mov	r6, r0
 800af98:	460f      	mov	r7, r1
 800af9a:	f7f5 fde5 	bl	8000b68 <__aeabi_dcmpgt>
 800af9e:	b9c8      	cbnz	r0, 800afd4 <_dtoa_r+0x6e4>
 800afa0:	4642      	mov	r2, r8
 800afa2:	464b      	mov	r3, r9
 800afa4:	4630      	mov	r0, r6
 800afa6:	4639      	mov	r1, r7
 800afa8:	f7f5 fdb6 	bl	8000b18 <__aeabi_dcmpeq>
 800afac:	b110      	cbz	r0, 800afb4 <_dtoa_r+0x6c4>
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	07db      	lsls	r3, r3, #31
 800afb2:	d40f      	bmi.n	800afd4 <_dtoa_r+0x6e4>
 800afb4:	4651      	mov	r1, sl
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 fbcc 	bl	800b754 <_Bfree>
 800afbc:	2300      	movs	r3, #0
 800afbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afc0:	702b      	strb	r3, [r5, #0]
 800afc2:	f10b 0301 	add.w	r3, fp, #1
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f43f ace2 	beq.w	800a994 <_dtoa_r+0xa4>
 800afd0:	601d      	str	r5, [r3, #0]
 800afd2:	e4df      	b.n	800a994 <_dtoa_r+0xa4>
 800afd4:	465f      	mov	r7, fp
 800afd6:	462b      	mov	r3, r5
 800afd8:	461d      	mov	r5, r3
 800afda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afde:	2a39      	cmp	r2, #57	; 0x39
 800afe0:	d106      	bne.n	800aff0 <_dtoa_r+0x700>
 800afe2:	9a00      	ldr	r2, [sp, #0]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d1f7      	bne.n	800afd8 <_dtoa_r+0x6e8>
 800afe8:	9900      	ldr	r1, [sp, #0]
 800afea:	2230      	movs	r2, #48	; 0x30
 800afec:	3701      	adds	r7, #1
 800afee:	700a      	strb	r2, [r1, #0]
 800aff0:	781a      	ldrb	r2, [r3, #0]
 800aff2:	3201      	adds	r2, #1
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	e790      	b.n	800af1a <_dtoa_r+0x62a>
 800aff8:	4ba3      	ldr	r3, [pc, #652]	; (800b288 <_dtoa_r+0x998>)
 800affa:	2200      	movs	r2, #0
 800affc:	f7f5 fb24 	bl	8000648 <__aeabi_dmul>
 800b000:	2200      	movs	r2, #0
 800b002:	2300      	movs	r3, #0
 800b004:	4606      	mov	r6, r0
 800b006:	460f      	mov	r7, r1
 800b008:	f7f5 fd86 	bl	8000b18 <__aeabi_dcmpeq>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d09e      	beq.n	800af4e <_dtoa_r+0x65e>
 800b010:	e7d0      	b.n	800afb4 <_dtoa_r+0x6c4>
 800b012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b014:	2a00      	cmp	r2, #0
 800b016:	f000 80ca 	beq.w	800b1ae <_dtoa_r+0x8be>
 800b01a:	9a07      	ldr	r2, [sp, #28]
 800b01c:	2a01      	cmp	r2, #1
 800b01e:	f300 80ad 	bgt.w	800b17c <_dtoa_r+0x88c>
 800b022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b024:	2a00      	cmp	r2, #0
 800b026:	f000 80a5 	beq.w	800b174 <_dtoa_r+0x884>
 800b02a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b02e:	9e08      	ldr	r6, [sp, #32]
 800b030:	9d05      	ldr	r5, [sp, #20]
 800b032:	9a05      	ldr	r2, [sp, #20]
 800b034:	441a      	add	r2, r3
 800b036:	9205      	str	r2, [sp, #20]
 800b038:	9a06      	ldr	r2, [sp, #24]
 800b03a:	2101      	movs	r1, #1
 800b03c:	441a      	add	r2, r3
 800b03e:	4620      	mov	r0, r4
 800b040:	9206      	str	r2, [sp, #24]
 800b042:	f000 fc87 	bl	800b954 <__i2b>
 800b046:	4607      	mov	r7, r0
 800b048:	b165      	cbz	r5, 800b064 <_dtoa_r+0x774>
 800b04a:	9b06      	ldr	r3, [sp, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dd09      	ble.n	800b064 <_dtoa_r+0x774>
 800b050:	42ab      	cmp	r3, r5
 800b052:	9a05      	ldr	r2, [sp, #20]
 800b054:	bfa8      	it	ge
 800b056:	462b      	movge	r3, r5
 800b058:	1ad2      	subs	r2, r2, r3
 800b05a:	9205      	str	r2, [sp, #20]
 800b05c:	9a06      	ldr	r2, [sp, #24]
 800b05e:	1aed      	subs	r5, r5, r3
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	9306      	str	r3, [sp, #24]
 800b064:	9b08      	ldr	r3, [sp, #32]
 800b066:	b1f3      	cbz	r3, 800b0a6 <_dtoa_r+0x7b6>
 800b068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 80a3 	beq.w	800b1b6 <_dtoa_r+0x8c6>
 800b070:	2e00      	cmp	r6, #0
 800b072:	dd10      	ble.n	800b096 <_dtoa_r+0x7a6>
 800b074:	4639      	mov	r1, r7
 800b076:	4632      	mov	r2, r6
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 fd2b 	bl	800bad4 <__pow5mult>
 800b07e:	4652      	mov	r2, sl
 800b080:	4601      	mov	r1, r0
 800b082:	4607      	mov	r7, r0
 800b084:	4620      	mov	r0, r4
 800b086:	f000 fc7b 	bl	800b980 <__multiply>
 800b08a:	4651      	mov	r1, sl
 800b08c:	4680      	mov	r8, r0
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 fb60 	bl	800b754 <_Bfree>
 800b094:	46c2      	mov	sl, r8
 800b096:	9b08      	ldr	r3, [sp, #32]
 800b098:	1b9a      	subs	r2, r3, r6
 800b09a:	d004      	beq.n	800b0a6 <_dtoa_r+0x7b6>
 800b09c:	4651      	mov	r1, sl
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 fd18 	bl	800bad4 <__pow5mult>
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fc53 	bl	800b954 <__i2b>
 800b0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	f340 8081 	ble.w	800b1ba <_dtoa_r+0x8ca>
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 fd09 	bl	800bad4 <__pow5mult>
 800b0c2:	9b07      	ldr	r3, [sp, #28]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	dd7a      	ble.n	800b1c0 <_dtoa_r+0x8d0>
 800b0ca:	f04f 0800 	mov.w	r8, #0
 800b0ce:	6933      	ldr	r3, [r6, #16]
 800b0d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b0d4:	6918      	ldr	r0, [r3, #16]
 800b0d6:	f000 fbef 	bl	800b8b8 <__hi0bits>
 800b0da:	f1c0 0020 	rsb	r0, r0, #32
 800b0de:	9b06      	ldr	r3, [sp, #24]
 800b0e0:	4418      	add	r0, r3
 800b0e2:	f010 001f 	ands.w	r0, r0, #31
 800b0e6:	f000 8094 	beq.w	800b212 <_dtoa_r+0x922>
 800b0ea:	f1c0 0320 	rsb	r3, r0, #32
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	f340 8085 	ble.w	800b1fe <_dtoa_r+0x90e>
 800b0f4:	9b05      	ldr	r3, [sp, #20]
 800b0f6:	f1c0 001c 	rsb	r0, r0, #28
 800b0fa:	4403      	add	r3, r0
 800b0fc:	9305      	str	r3, [sp, #20]
 800b0fe:	9b06      	ldr	r3, [sp, #24]
 800b100:	4403      	add	r3, r0
 800b102:	4405      	add	r5, r0
 800b104:	9306      	str	r3, [sp, #24]
 800b106:	9b05      	ldr	r3, [sp, #20]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	dd05      	ble.n	800b118 <_dtoa_r+0x828>
 800b10c:	4651      	mov	r1, sl
 800b10e:	461a      	mov	r2, r3
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fd39 	bl	800bb88 <__lshift>
 800b116:	4682      	mov	sl, r0
 800b118:	9b06      	ldr	r3, [sp, #24]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	dd05      	ble.n	800b12a <_dtoa_r+0x83a>
 800b11e:	4631      	mov	r1, r6
 800b120:	461a      	mov	r2, r3
 800b122:	4620      	mov	r0, r4
 800b124:	f000 fd30 	bl	800bb88 <__lshift>
 800b128:	4606      	mov	r6, r0
 800b12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d072      	beq.n	800b216 <_dtoa_r+0x926>
 800b130:	4631      	mov	r1, r6
 800b132:	4650      	mov	r0, sl
 800b134:	f000 fd94 	bl	800bc60 <__mcmp>
 800b138:	2800      	cmp	r0, #0
 800b13a:	da6c      	bge.n	800b216 <_dtoa_r+0x926>
 800b13c:	2300      	movs	r3, #0
 800b13e:	4651      	mov	r1, sl
 800b140:	220a      	movs	r2, #10
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fb28 	bl	800b798 <__multadd>
 800b148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b14e:	4682      	mov	sl, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 81b0 	beq.w	800b4b6 <_dtoa_r+0xbc6>
 800b156:	2300      	movs	r3, #0
 800b158:	4639      	mov	r1, r7
 800b15a:	220a      	movs	r2, #10
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 fb1b 	bl	800b798 <__multadd>
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	4607      	mov	r7, r0
 800b168:	f300 8096 	bgt.w	800b298 <_dtoa_r+0x9a8>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	dc59      	bgt.n	800b226 <_dtoa_r+0x936>
 800b172:	e091      	b.n	800b298 <_dtoa_r+0x9a8>
 800b174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b176:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b17a:	e758      	b.n	800b02e <_dtoa_r+0x73e>
 800b17c:	9b04      	ldr	r3, [sp, #16]
 800b17e:	1e5e      	subs	r6, r3, #1
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	42b3      	cmp	r3, r6
 800b184:	bfbf      	itttt	lt
 800b186:	9b08      	ldrlt	r3, [sp, #32]
 800b188:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b18a:	9608      	strlt	r6, [sp, #32]
 800b18c:	1af3      	sublt	r3, r6, r3
 800b18e:	bfb4      	ite	lt
 800b190:	18d2      	addlt	r2, r2, r3
 800b192:	1b9e      	subge	r6, r3, r6
 800b194:	9b04      	ldr	r3, [sp, #16]
 800b196:	bfbc      	itt	lt
 800b198:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b19a:	2600      	movlt	r6, #0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bfb7      	itett	lt
 800b1a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b1a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b1a8:	1a9d      	sublt	r5, r3, r2
 800b1aa:	2300      	movlt	r3, #0
 800b1ac:	e741      	b.n	800b032 <_dtoa_r+0x742>
 800b1ae:	9e08      	ldr	r6, [sp, #32]
 800b1b0:	9d05      	ldr	r5, [sp, #20]
 800b1b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b1b4:	e748      	b.n	800b048 <_dtoa_r+0x758>
 800b1b6:	9a08      	ldr	r2, [sp, #32]
 800b1b8:	e770      	b.n	800b09c <_dtoa_r+0x7ac>
 800b1ba:	9b07      	ldr	r3, [sp, #28]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	dc19      	bgt.n	800b1f4 <_dtoa_r+0x904>
 800b1c0:	9b02      	ldr	r3, [sp, #8]
 800b1c2:	b9bb      	cbnz	r3, 800b1f4 <_dtoa_r+0x904>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ca:	b99b      	cbnz	r3, 800b1f4 <_dtoa_r+0x904>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1d2:	0d1b      	lsrs	r3, r3, #20
 800b1d4:	051b      	lsls	r3, r3, #20
 800b1d6:	b183      	cbz	r3, 800b1fa <_dtoa_r+0x90a>
 800b1d8:	9b05      	ldr	r3, [sp, #20]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	9b06      	ldr	r3, [sp, #24]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	9306      	str	r3, [sp, #24]
 800b1e4:	f04f 0801 	mov.w	r8, #1
 800b1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f47f af6f 	bne.w	800b0ce <_dtoa_r+0x7de>
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	e774      	b.n	800b0de <_dtoa_r+0x7ee>
 800b1f4:	f04f 0800 	mov.w	r8, #0
 800b1f8:	e7f6      	b.n	800b1e8 <_dtoa_r+0x8f8>
 800b1fa:	4698      	mov	r8, r3
 800b1fc:	e7f4      	b.n	800b1e8 <_dtoa_r+0x8f8>
 800b1fe:	d082      	beq.n	800b106 <_dtoa_r+0x816>
 800b200:	9a05      	ldr	r2, [sp, #20]
 800b202:	331c      	adds	r3, #28
 800b204:	441a      	add	r2, r3
 800b206:	9205      	str	r2, [sp, #20]
 800b208:	9a06      	ldr	r2, [sp, #24]
 800b20a:	441a      	add	r2, r3
 800b20c:	441d      	add	r5, r3
 800b20e:	9206      	str	r2, [sp, #24]
 800b210:	e779      	b.n	800b106 <_dtoa_r+0x816>
 800b212:	4603      	mov	r3, r0
 800b214:	e7f4      	b.n	800b200 <_dtoa_r+0x910>
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dc37      	bgt.n	800b28c <_dtoa_r+0x99c>
 800b21c:	9b07      	ldr	r3, [sp, #28]
 800b21e:	2b02      	cmp	r3, #2
 800b220:	dd34      	ble.n	800b28c <_dtoa_r+0x99c>
 800b222:	9b04      	ldr	r3, [sp, #16]
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	9b01      	ldr	r3, [sp, #4]
 800b228:	b963      	cbnz	r3, 800b244 <_dtoa_r+0x954>
 800b22a:	4631      	mov	r1, r6
 800b22c:	2205      	movs	r2, #5
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 fab2 	bl	800b798 <__multadd>
 800b234:	4601      	mov	r1, r0
 800b236:	4606      	mov	r6, r0
 800b238:	4650      	mov	r0, sl
 800b23a:	f000 fd11 	bl	800bc60 <__mcmp>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f73f adbb 	bgt.w	800adba <_dtoa_r+0x4ca>
 800b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b246:	9d00      	ldr	r5, [sp, #0]
 800b248:	ea6f 0b03 	mvn.w	fp, r3
 800b24c:	f04f 0800 	mov.w	r8, #0
 800b250:	4631      	mov	r1, r6
 800b252:	4620      	mov	r0, r4
 800b254:	f000 fa7e 	bl	800b754 <_Bfree>
 800b258:	2f00      	cmp	r7, #0
 800b25a:	f43f aeab 	beq.w	800afb4 <_dtoa_r+0x6c4>
 800b25e:	f1b8 0f00 	cmp.w	r8, #0
 800b262:	d005      	beq.n	800b270 <_dtoa_r+0x980>
 800b264:	45b8      	cmp	r8, r7
 800b266:	d003      	beq.n	800b270 <_dtoa_r+0x980>
 800b268:	4641      	mov	r1, r8
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fa72 	bl	800b754 <_Bfree>
 800b270:	4639      	mov	r1, r7
 800b272:	4620      	mov	r0, r4
 800b274:	f000 fa6e 	bl	800b754 <_Bfree>
 800b278:	e69c      	b.n	800afb4 <_dtoa_r+0x6c4>
 800b27a:	2600      	movs	r6, #0
 800b27c:	4637      	mov	r7, r6
 800b27e:	e7e1      	b.n	800b244 <_dtoa_r+0x954>
 800b280:	46bb      	mov	fp, r7
 800b282:	4637      	mov	r7, r6
 800b284:	e599      	b.n	800adba <_dtoa_r+0x4ca>
 800b286:	bf00      	nop
 800b288:	40240000 	.word	0x40240000
 800b28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f000 80c8 	beq.w	800b424 <_dtoa_r+0xb34>
 800b294:	9b04      	ldr	r3, [sp, #16]
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	2d00      	cmp	r5, #0
 800b29a:	dd05      	ble.n	800b2a8 <_dtoa_r+0x9b8>
 800b29c:	4639      	mov	r1, r7
 800b29e:	462a      	mov	r2, r5
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fc71 	bl	800bb88 <__lshift>
 800b2a6:	4607      	mov	r7, r0
 800b2a8:	f1b8 0f00 	cmp.w	r8, #0
 800b2ac:	d05b      	beq.n	800b366 <_dtoa_r+0xa76>
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fa0f 	bl	800b6d4 <_Balloc>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b928      	cbnz	r0, 800b2c6 <_dtoa_r+0x9d6>
 800b2ba:	4b83      	ldr	r3, [pc, #524]	; (800b4c8 <_dtoa_r+0xbd8>)
 800b2bc:	4602      	mov	r2, r0
 800b2be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b2c2:	f7ff bb2e 	b.w	800a922 <_dtoa_r+0x32>
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	3202      	adds	r2, #2
 800b2ca:	0092      	lsls	r2, r2, #2
 800b2cc:	f107 010c 	add.w	r1, r7, #12
 800b2d0:	300c      	adds	r0, #12
 800b2d2:	f001 ff97 	bl	800d204 <memcpy>
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fc54 	bl	800bb88 <__lshift>
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	9308      	str	r3, [sp, #32]
 800b2ee:	9b02      	ldr	r3, [sp, #8]
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	46b8      	mov	r8, r7
 800b2f6:	9306      	str	r3, [sp, #24]
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	9b04      	ldr	r3, [sp, #16]
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	3b01      	subs	r3, #1
 800b300:	4650      	mov	r0, sl
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	f7ff fa6c 	bl	800a7e0 <quorem>
 800b308:	4641      	mov	r1, r8
 800b30a:	9002      	str	r0, [sp, #8]
 800b30c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b310:	4650      	mov	r0, sl
 800b312:	f000 fca5 	bl	800bc60 <__mcmp>
 800b316:	463a      	mov	r2, r7
 800b318:	9005      	str	r0, [sp, #20]
 800b31a:	4631      	mov	r1, r6
 800b31c:	4620      	mov	r0, r4
 800b31e:	f000 fcbb 	bl	800bc98 <__mdiff>
 800b322:	68c2      	ldr	r2, [r0, #12]
 800b324:	4605      	mov	r5, r0
 800b326:	bb02      	cbnz	r2, 800b36a <_dtoa_r+0xa7a>
 800b328:	4601      	mov	r1, r0
 800b32a:	4650      	mov	r0, sl
 800b32c:	f000 fc98 	bl	800bc60 <__mcmp>
 800b330:	4602      	mov	r2, r0
 800b332:	4629      	mov	r1, r5
 800b334:	4620      	mov	r0, r4
 800b336:	9209      	str	r2, [sp, #36]	; 0x24
 800b338:	f000 fa0c 	bl	800b754 <_Bfree>
 800b33c:	9b07      	ldr	r3, [sp, #28]
 800b33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b340:	9d04      	ldr	r5, [sp, #16]
 800b342:	ea43 0102 	orr.w	r1, r3, r2
 800b346:	9b06      	ldr	r3, [sp, #24]
 800b348:	4319      	orrs	r1, r3
 800b34a:	d110      	bne.n	800b36e <_dtoa_r+0xa7e>
 800b34c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b350:	d029      	beq.n	800b3a6 <_dtoa_r+0xab6>
 800b352:	9b05      	ldr	r3, [sp, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	dd02      	ble.n	800b35e <_dtoa_r+0xa6e>
 800b358:	9b02      	ldr	r3, [sp, #8]
 800b35a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	f883 9000 	strb.w	r9, [r3]
 800b364:	e774      	b.n	800b250 <_dtoa_r+0x960>
 800b366:	4638      	mov	r0, r7
 800b368:	e7ba      	b.n	800b2e0 <_dtoa_r+0x9f0>
 800b36a:	2201      	movs	r2, #1
 800b36c:	e7e1      	b.n	800b332 <_dtoa_r+0xa42>
 800b36e:	9b05      	ldr	r3, [sp, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	db04      	blt.n	800b37e <_dtoa_r+0xa8e>
 800b374:	9907      	ldr	r1, [sp, #28]
 800b376:	430b      	orrs	r3, r1
 800b378:	9906      	ldr	r1, [sp, #24]
 800b37a:	430b      	orrs	r3, r1
 800b37c:	d120      	bne.n	800b3c0 <_dtoa_r+0xad0>
 800b37e:	2a00      	cmp	r2, #0
 800b380:	dded      	ble.n	800b35e <_dtoa_r+0xa6e>
 800b382:	4651      	mov	r1, sl
 800b384:	2201      	movs	r2, #1
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fbfe 	bl	800bb88 <__lshift>
 800b38c:	4631      	mov	r1, r6
 800b38e:	4682      	mov	sl, r0
 800b390:	f000 fc66 	bl	800bc60 <__mcmp>
 800b394:	2800      	cmp	r0, #0
 800b396:	dc03      	bgt.n	800b3a0 <_dtoa_r+0xab0>
 800b398:	d1e1      	bne.n	800b35e <_dtoa_r+0xa6e>
 800b39a:	f019 0f01 	tst.w	r9, #1
 800b39e:	d0de      	beq.n	800b35e <_dtoa_r+0xa6e>
 800b3a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3a4:	d1d8      	bne.n	800b358 <_dtoa_r+0xa68>
 800b3a6:	9a01      	ldr	r2, [sp, #4]
 800b3a8:	2339      	movs	r3, #57	; 0x39
 800b3aa:	7013      	strb	r3, [r2, #0]
 800b3ac:	462b      	mov	r3, r5
 800b3ae:	461d      	mov	r5, r3
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3b6:	2a39      	cmp	r2, #57	; 0x39
 800b3b8:	d06c      	beq.n	800b494 <_dtoa_r+0xba4>
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	e747      	b.n	800b250 <_dtoa_r+0x960>
 800b3c0:	2a00      	cmp	r2, #0
 800b3c2:	dd07      	ble.n	800b3d4 <_dtoa_r+0xae4>
 800b3c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3c8:	d0ed      	beq.n	800b3a6 <_dtoa_r+0xab6>
 800b3ca:	9a01      	ldr	r2, [sp, #4]
 800b3cc:	f109 0301 	add.w	r3, r9, #1
 800b3d0:	7013      	strb	r3, [r2, #0]
 800b3d2:	e73d      	b.n	800b250 <_dtoa_r+0x960>
 800b3d4:	9b04      	ldr	r3, [sp, #16]
 800b3d6:	9a08      	ldr	r2, [sp, #32]
 800b3d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d043      	beq.n	800b468 <_dtoa_r+0xb78>
 800b3e0:	4651      	mov	r1, sl
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	220a      	movs	r2, #10
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 f9d6 	bl	800b798 <__multadd>
 800b3ec:	45b8      	cmp	r8, r7
 800b3ee:	4682      	mov	sl, r0
 800b3f0:	f04f 0300 	mov.w	r3, #0
 800b3f4:	f04f 020a 	mov.w	r2, #10
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	d107      	bne.n	800b40e <_dtoa_r+0xb1e>
 800b3fe:	f000 f9cb 	bl	800b798 <__multadd>
 800b402:	4680      	mov	r8, r0
 800b404:	4607      	mov	r7, r0
 800b406:	9b04      	ldr	r3, [sp, #16]
 800b408:	3301      	adds	r3, #1
 800b40a:	9304      	str	r3, [sp, #16]
 800b40c:	e775      	b.n	800b2fa <_dtoa_r+0xa0a>
 800b40e:	f000 f9c3 	bl	800b798 <__multadd>
 800b412:	4639      	mov	r1, r7
 800b414:	4680      	mov	r8, r0
 800b416:	2300      	movs	r3, #0
 800b418:	220a      	movs	r2, #10
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 f9bc 	bl	800b798 <__multadd>
 800b420:	4607      	mov	r7, r0
 800b422:	e7f0      	b.n	800b406 <_dtoa_r+0xb16>
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	9301      	str	r3, [sp, #4]
 800b428:	9d00      	ldr	r5, [sp, #0]
 800b42a:	4631      	mov	r1, r6
 800b42c:	4650      	mov	r0, sl
 800b42e:	f7ff f9d7 	bl	800a7e0 <quorem>
 800b432:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b436:	9b00      	ldr	r3, [sp, #0]
 800b438:	f805 9b01 	strb.w	r9, [r5], #1
 800b43c:	1aea      	subs	r2, r5, r3
 800b43e:	9b01      	ldr	r3, [sp, #4]
 800b440:	4293      	cmp	r3, r2
 800b442:	dd07      	ble.n	800b454 <_dtoa_r+0xb64>
 800b444:	4651      	mov	r1, sl
 800b446:	2300      	movs	r3, #0
 800b448:	220a      	movs	r2, #10
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 f9a4 	bl	800b798 <__multadd>
 800b450:	4682      	mov	sl, r0
 800b452:	e7ea      	b.n	800b42a <_dtoa_r+0xb3a>
 800b454:	9b01      	ldr	r3, [sp, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	bfc8      	it	gt
 800b45a:	461d      	movgt	r5, r3
 800b45c:	9b00      	ldr	r3, [sp, #0]
 800b45e:	bfd8      	it	le
 800b460:	2501      	movle	r5, #1
 800b462:	441d      	add	r5, r3
 800b464:	f04f 0800 	mov.w	r8, #0
 800b468:	4651      	mov	r1, sl
 800b46a:	2201      	movs	r2, #1
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 fb8b 	bl	800bb88 <__lshift>
 800b472:	4631      	mov	r1, r6
 800b474:	4682      	mov	sl, r0
 800b476:	f000 fbf3 	bl	800bc60 <__mcmp>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	dc96      	bgt.n	800b3ac <_dtoa_r+0xabc>
 800b47e:	d102      	bne.n	800b486 <_dtoa_r+0xb96>
 800b480:	f019 0f01 	tst.w	r9, #1
 800b484:	d192      	bne.n	800b3ac <_dtoa_r+0xabc>
 800b486:	462b      	mov	r3, r5
 800b488:	461d      	mov	r5, r3
 800b48a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b48e:	2a30      	cmp	r2, #48	; 0x30
 800b490:	d0fa      	beq.n	800b488 <_dtoa_r+0xb98>
 800b492:	e6dd      	b.n	800b250 <_dtoa_r+0x960>
 800b494:	9a00      	ldr	r2, [sp, #0]
 800b496:	429a      	cmp	r2, r3
 800b498:	d189      	bne.n	800b3ae <_dtoa_r+0xabe>
 800b49a:	f10b 0b01 	add.w	fp, fp, #1
 800b49e:	2331      	movs	r3, #49	; 0x31
 800b4a0:	e796      	b.n	800b3d0 <_dtoa_r+0xae0>
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <_dtoa_r+0xbdc>)
 800b4a4:	f7ff ba99 	b.w	800a9da <_dtoa_r+0xea>
 800b4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f47f aa6d 	bne.w	800a98a <_dtoa_r+0x9a>
 800b4b0:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <_dtoa_r+0xbe0>)
 800b4b2:	f7ff ba92 	b.w	800a9da <_dtoa_r+0xea>
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	dcb5      	bgt.n	800b428 <_dtoa_r+0xb38>
 800b4bc:	9b07      	ldr	r3, [sp, #28]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	f73f aeb1 	bgt.w	800b226 <_dtoa_r+0x936>
 800b4c4:	e7b0      	b.n	800b428 <_dtoa_r+0xb38>
 800b4c6:	bf00      	nop
 800b4c8:	0800e0fd 	.word	0x0800e0fd
 800b4cc:	0800e033 	.word	0x0800e033
 800b4d0:	0800e098 	.word	0x0800e098

0800b4d4 <_free_r>:
 800b4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	d044      	beq.n	800b564 <_free_r+0x90>
 800b4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4de:	9001      	str	r0, [sp, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4e6:	bfb8      	it	lt
 800b4e8:	18e4      	addlt	r4, r4, r3
 800b4ea:	f000 f8e7 	bl	800b6bc <__malloc_lock>
 800b4ee:	4a1e      	ldr	r2, [pc, #120]	; (800b568 <_free_r+0x94>)
 800b4f0:	9801      	ldr	r0, [sp, #4]
 800b4f2:	6813      	ldr	r3, [r2, #0]
 800b4f4:	b933      	cbnz	r3, 800b504 <_free_r+0x30>
 800b4f6:	6063      	str	r3, [r4, #4]
 800b4f8:	6014      	str	r4, [r2, #0]
 800b4fa:	b003      	add	sp, #12
 800b4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b500:	f000 b8e2 	b.w	800b6c8 <__malloc_unlock>
 800b504:	42a3      	cmp	r3, r4
 800b506:	d908      	bls.n	800b51a <_free_r+0x46>
 800b508:	6825      	ldr	r5, [r4, #0]
 800b50a:	1961      	adds	r1, r4, r5
 800b50c:	428b      	cmp	r3, r1
 800b50e:	bf01      	itttt	eq
 800b510:	6819      	ldreq	r1, [r3, #0]
 800b512:	685b      	ldreq	r3, [r3, #4]
 800b514:	1949      	addeq	r1, r1, r5
 800b516:	6021      	streq	r1, [r4, #0]
 800b518:	e7ed      	b.n	800b4f6 <_free_r+0x22>
 800b51a:	461a      	mov	r2, r3
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	b10b      	cbz	r3, 800b524 <_free_r+0x50>
 800b520:	42a3      	cmp	r3, r4
 800b522:	d9fa      	bls.n	800b51a <_free_r+0x46>
 800b524:	6811      	ldr	r1, [r2, #0]
 800b526:	1855      	adds	r5, r2, r1
 800b528:	42a5      	cmp	r5, r4
 800b52a:	d10b      	bne.n	800b544 <_free_r+0x70>
 800b52c:	6824      	ldr	r4, [r4, #0]
 800b52e:	4421      	add	r1, r4
 800b530:	1854      	adds	r4, r2, r1
 800b532:	42a3      	cmp	r3, r4
 800b534:	6011      	str	r1, [r2, #0]
 800b536:	d1e0      	bne.n	800b4fa <_free_r+0x26>
 800b538:	681c      	ldr	r4, [r3, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	6053      	str	r3, [r2, #4]
 800b53e:	440c      	add	r4, r1
 800b540:	6014      	str	r4, [r2, #0]
 800b542:	e7da      	b.n	800b4fa <_free_r+0x26>
 800b544:	d902      	bls.n	800b54c <_free_r+0x78>
 800b546:	230c      	movs	r3, #12
 800b548:	6003      	str	r3, [r0, #0]
 800b54a:	e7d6      	b.n	800b4fa <_free_r+0x26>
 800b54c:	6825      	ldr	r5, [r4, #0]
 800b54e:	1961      	adds	r1, r4, r5
 800b550:	428b      	cmp	r3, r1
 800b552:	bf04      	itt	eq
 800b554:	6819      	ldreq	r1, [r3, #0]
 800b556:	685b      	ldreq	r3, [r3, #4]
 800b558:	6063      	str	r3, [r4, #4]
 800b55a:	bf04      	itt	eq
 800b55c:	1949      	addeq	r1, r1, r5
 800b55e:	6021      	streq	r1, [r4, #0]
 800b560:	6054      	str	r4, [r2, #4]
 800b562:	e7ca      	b.n	800b4fa <_free_r+0x26>
 800b564:	b003      	add	sp, #12
 800b566:	bd30      	pop	{r4, r5, pc}
 800b568:	200008f4 	.word	0x200008f4

0800b56c <malloc>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	; (800b578 <malloc+0xc>)
 800b56e:	4601      	mov	r1, r0
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f000 b823 	b.w	800b5bc <_malloc_r>
 800b576:	bf00      	nop
 800b578:	20000098 	.word	0x20000098

0800b57c <sbrk_aligned>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	4e0e      	ldr	r6, [pc, #56]	; (800b5b8 <sbrk_aligned+0x3c>)
 800b580:	460c      	mov	r4, r1
 800b582:	6831      	ldr	r1, [r6, #0]
 800b584:	4605      	mov	r5, r0
 800b586:	b911      	cbnz	r1, 800b58e <sbrk_aligned+0x12>
 800b588:	f001 fe2c 	bl	800d1e4 <_sbrk_r>
 800b58c:	6030      	str	r0, [r6, #0]
 800b58e:	4621      	mov	r1, r4
 800b590:	4628      	mov	r0, r5
 800b592:	f001 fe27 	bl	800d1e4 <_sbrk_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	d00a      	beq.n	800b5b0 <sbrk_aligned+0x34>
 800b59a:	1cc4      	adds	r4, r0, #3
 800b59c:	f024 0403 	bic.w	r4, r4, #3
 800b5a0:	42a0      	cmp	r0, r4
 800b5a2:	d007      	beq.n	800b5b4 <sbrk_aligned+0x38>
 800b5a4:	1a21      	subs	r1, r4, r0
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f001 fe1c 	bl	800d1e4 <_sbrk_r>
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d101      	bne.n	800b5b4 <sbrk_aligned+0x38>
 800b5b0:	f04f 34ff 	mov.w	r4, #4294967295
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}
 800b5b8:	200008f8 	.word	0x200008f8

0800b5bc <_malloc_r>:
 800b5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c0:	1ccd      	adds	r5, r1, #3
 800b5c2:	f025 0503 	bic.w	r5, r5, #3
 800b5c6:	3508      	adds	r5, #8
 800b5c8:	2d0c      	cmp	r5, #12
 800b5ca:	bf38      	it	cc
 800b5cc:	250c      	movcc	r5, #12
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	db01      	blt.n	800b5d8 <_malloc_r+0x1c>
 800b5d4:	42a9      	cmp	r1, r5
 800b5d6:	d905      	bls.n	800b5e4 <_malloc_r+0x28>
 800b5d8:	230c      	movs	r3, #12
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	2600      	movs	r6, #0
 800b5de:	4630      	mov	r0, r6
 800b5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6b8 <_malloc_r+0xfc>
 800b5e8:	f000 f868 	bl	800b6bc <__malloc_lock>
 800b5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f0:	461c      	mov	r4, r3
 800b5f2:	bb5c      	cbnz	r4, 800b64c <_malloc_r+0x90>
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f7ff ffc0 	bl	800b57c <sbrk_aligned>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	4604      	mov	r4, r0
 800b600:	d155      	bne.n	800b6ae <_malloc_r+0xf2>
 800b602:	f8d8 4000 	ldr.w	r4, [r8]
 800b606:	4626      	mov	r6, r4
 800b608:	2e00      	cmp	r6, #0
 800b60a:	d145      	bne.n	800b698 <_malloc_r+0xdc>
 800b60c:	2c00      	cmp	r4, #0
 800b60e:	d048      	beq.n	800b6a2 <_malloc_r+0xe6>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	4631      	mov	r1, r6
 800b614:	4638      	mov	r0, r7
 800b616:	eb04 0903 	add.w	r9, r4, r3
 800b61a:	f001 fde3 	bl	800d1e4 <_sbrk_r>
 800b61e:	4581      	cmp	r9, r0
 800b620:	d13f      	bne.n	800b6a2 <_malloc_r+0xe6>
 800b622:	6821      	ldr	r1, [r4, #0]
 800b624:	1a6d      	subs	r5, r5, r1
 800b626:	4629      	mov	r1, r5
 800b628:	4638      	mov	r0, r7
 800b62a:	f7ff ffa7 	bl	800b57c <sbrk_aligned>
 800b62e:	3001      	adds	r0, #1
 800b630:	d037      	beq.n	800b6a2 <_malloc_r+0xe6>
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	442b      	add	r3, r5
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	f8d8 3000 	ldr.w	r3, [r8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d038      	beq.n	800b6b2 <_malloc_r+0xf6>
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	42a2      	cmp	r2, r4
 800b644:	d12b      	bne.n	800b69e <_malloc_r+0xe2>
 800b646:	2200      	movs	r2, #0
 800b648:	605a      	str	r2, [r3, #4]
 800b64a:	e00f      	b.n	800b66c <_malloc_r+0xb0>
 800b64c:	6822      	ldr	r2, [r4, #0]
 800b64e:	1b52      	subs	r2, r2, r5
 800b650:	d41f      	bmi.n	800b692 <_malloc_r+0xd6>
 800b652:	2a0b      	cmp	r2, #11
 800b654:	d917      	bls.n	800b686 <_malloc_r+0xca>
 800b656:	1961      	adds	r1, r4, r5
 800b658:	42a3      	cmp	r3, r4
 800b65a:	6025      	str	r5, [r4, #0]
 800b65c:	bf18      	it	ne
 800b65e:	6059      	strne	r1, [r3, #4]
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	bf08      	it	eq
 800b664:	f8c8 1000 	streq.w	r1, [r8]
 800b668:	5162      	str	r2, [r4, r5]
 800b66a:	604b      	str	r3, [r1, #4]
 800b66c:	4638      	mov	r0, r7
 800b66e:	f104 060b 	add.w	r6, r4, #11
 800b672:	f000 f829 	bl	800b6c8 <__malloc_unlock>
 800b676:	f026 0607 	bic.w	r6, r6, #7
 800b67a:	1d23      	adds	r3, r4, #4
 800b67c:	1af2      	subs	r2, r6, r3
 800b67e:	d0ae      	beq.n	800b5de <_malloc_r+0x22>
 800b680:	1b9b      	subs	r3, r3, r6
 800b682:	50a3      	str	r3, [r4, r2]
 800b684:	e7ab      	b.n	800b5de <_malloc_r+0x22>
 800b686:	42a3      	cmp	r3, r4
 800b688:	6862      	ldr	r2, [r4, #4]
 800b68a:	d1dd      	bne.n	800b648 <_malloc_r+0x8c>
 800b68c:	f8c8 2000 	str.w	r2, [r8]
 800b690:	e7ec      	b.n	800b66c <_malloc_r+0xb0>
 800b692:	4623      	mov	r3, r4
 800b694:	6864      	ldr	r4, [r4, #4]
 800b696:	e7ac      	b.n	800b5f2 <_malloc_r+0x36>
 800b698:	4634      	mov	r4, r6
 800b69a:	6876      	ldr	r6, [r6, #4]
 800b69c:	e7b4      	b.n	800b608 <_malloc_r+0x4c>
 800b69e:	4613      	mov	r3, r2
 800b6a0:	e7cc      	b.n	800b63c <_malloc_r+0x80>
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	603b      	str	r3, [r7, #0]
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	f000 f80e 	bl	800b6c8 <__malloc_unlock>
 800b6ac:	e797      	b.n	800b5de <_malloc_r+0x22>
 800b6ae:	6025      	str	r5, [r4, #0]
 800b6b0:	e7dc      	b.n	800b66c <_malloc_r+0xb0>
 800b6b2:	605b      	str	r3, [r3, #4]
 800b6b4:	deff      	udf	#255	; 0xff
 800b6b6:	bf00      	nop
 800b6b8:	200008f4 	.word	0x200008f4

0800b6bc <__malloc_lock>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__malloc_lock+0x8>)
 800b6be:	f7ff b869 	b.w	800a794 <__retarget_lock_acquire_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	200008f0 	.word	0x200008f0

0800b6c8 <__malloc_unlock>:
 800b6c8:	4801      	ldr	r0, [pc, #4]	; (800b6d0 <__malloc_unlock+0x8>)
 800b6ca:	f7ff b864 	b.w	800a796 <__retarget_lock_release_recursive>
 800b6ce:	bf00      	nop
 800b6d0:	200008f0 	.word	0x200008f0

0800b6d4 <_Balloc>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	69c6      	ldr	r6, [r0, #28]
 800b6d8:	4604      	mov	r4, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	b976      	cbnz	r6, 800b6fc <_Balloc+0x28>
 800b6de:	2010      	movs	r0, #16
 800b6e0:	f7ff ff44 	bl	800b56c <malloc>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	61e0      	str	r0, [r4, #28]
 800b6e8:	b920      	cbnz	r0, 800b6f4 <_Balloc+0x20>
 800b6ea:	4b18      	ldr	r3, [pc, #96]	; (800b74c <_Balloc+0x78>)
 800b6ec:	4818      	ldr	r0, [pc, #96]	; (800b750 <_Balloc+0x7c>)
 800b6ee:	216b      	movs	r1, #107	; 0x6b
 800b6f0:	f7ff f858 	bl	800a7a4 <__assert_func>
 800b6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6f8:	6006      	str	r6, [r0, #0]
 800b6fa:	60c6      	str	r6, [r0, #12]
 800b6fc:	69e6      	ldr	r6, [r4, #28]
 800b6fe:	68f3      	ldr	r3, [r6, #12]
 800b700:	b183      	cbz	r3, 800b724 <_Balloc+0x50>
 800b702:	69e3      	ldr	r3, [r4, #28]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b70a:	b9b8      	cbnz	r0, 800b73c <_Balloc+0x68>
 800b70c:	2101      	movs	r1, #1
 800b70e:	fa01 f605 	lsl.w	r6, r1, r5
 800b712:	1d72      	adds	r2, r6, #5
 800b714:	0092      	lsls	r2, r2, #2
 800b716:	4620      	mov	r0, r4
 800b718:	f001 fd91 	bl	800d23e <_calloc_r>
 800b71c:	b160      	cbz	r0, 800b738 <_Balloc+0x64>
 800b71e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b722:	e00e      	b.n	800b742 <_Balloc+0x6e>
 800b724:	2221      	movs	r2, #33	; 0x21
 800b726:	2104      	movs	r1, #4
 800b728:	4620      	mov	r0, r4
 800b72a:	f001 fd88 	bl	800d23e <_calloc_r>
 800b72e:	69e3      	ldr	r3, [r4, #28]
 800b730:	60f0      	str	r0, [r6, #12]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e4      	bne.n	800b702 <_Balloc+0x2e>
 800b738:	2000      	movs	r0, #0
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	6802      	ldr	r2, [r0, #0]
 800b73e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b742:	2300      	movs	r3, #0
 800b744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b748:	e7f7      	b.n	800b73a <_Balloc+0x66>
 800b74a:	bf00      	nop
 800b74c:	0800dfb4 	.word	0x0800dfb4
 800b750:	0800e10e 	.word	0x0800e10e

0800b754 <_Bfree>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	69c6      	ldr	r6, [r0, #28]
 800b758:	4605      	mov	r5, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	b976      	cbnz	r6, 800b77c <_Bfree+0x28>
 800b75e:	2010      	movs	r0, #16
 800b760:	f7ff ff04 	bl	800b56c <malloc>
 800b764:	4602      	mov	r2, r0
 800b766:	61e8      	str	r0, [r5, #28]
 800b768:	b920      	cbnz	r0, 800b774 <_Bfree+0x20>
 800b76a:	4b09      	ldr	r3, [pc, #36]	; (800b790 <_Bfree+0x3c>)
 800b76c:	4809      	ldr	r0, [pc, #36]	; (800b794 <_Bfree+0x40>)
 800b76e:	218f      	movs	r1, #143	; 0x8f
 800b770:	f7ff f818 	bl	800a7a4 <__assert_func>
 800b774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b778:	6006      	str	r6, [r0, #0]
 800b77a:	60c6      	str	r6, [r0, #12]
 800b77c:	b13c      	cbz	r4, 800b78e <_Bfree+0x3a>
 800b77e:	69eb      	ldr	r3, [r5, #28]
 800b780:	6862      	ldr	r2, [r4, #4]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b788:	6021      	str	r1, [r4, #0]
 800b78a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b78e:	bd70      	pop	{r4, r5, r6, pc}
 800b790:	0800dfb4 	.word	0x0800dfb4
 800b794:	0800e10e 	.word	0x0800e10e

0800b798 <__multadd>:
 800b798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79c:	690d      	ldr	r5, [r1, #16]
 800b79e:	4607      	mov	r7, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	461e      	mov	r6, r3
 800b7a4:	f101 0c14 	add.w	ip, r1, #20
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	f8dc 3000 	ldr.w	r3, [ip]
 800b7ae:	b299      	uxth	r1, r3
 800b7b0:	fb02 6101 	mla	r1, r2, r1, r6
 800b7b4:	0c1e      	lsrs	r6, r3, #16
 800b7b6:	0c0b      	lsrs	r3, r1, #16
 800b7b8:	fb02 3306 	mla	r3, r2, r6, r3
 800b7bc:	b289      	uxth	r1, r1
 800b7be:	3001      	adds	r0, #1
 800b7c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7c4:	4285      	cmp	r5, r0
 800b7c6:	f84c 1b04 	str.w	r1, [ip], #4
 800b7ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7ce:	dcec      	bgt.n	800b7aa <__multadd+0x12>
 800b7d0:	b30e      	cbz	r6, 800b816 <__multadd+0x7e>
 800b7d2:	68a3      	ldr	r3, [r4, #8]
 800b7d4:	42ab      	cmp	r3, r5
 800b7d6:	dc19      	bgt.n	800b80c <__multadd+0x74>
 800b7d8:	6861      	ldr	r1, [r4, #4]
 800b7da:	4638      	mov	r0, r7
 800b7dc:	3101      	adds	r1, #1
 800b7de:	f7ff ff79 	bl	800b6d4 <_Balloc>
 800b7e2:	4680      	mov	r8, r0
 800b7e4:	b928      	cbnz	r0, 800b7f2 <__multadd+0x5a>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <__multadd+0x84>)
 800b7ea:	480d      	ldr	r0, [pc, #52]	; (800b820 <__multadd+0x88>)
 800b7ec:	21ba      	movs	r1, #186	; 0xba
 800b7ee:	f7fe ffd9 	bl	800a7a4 <__assert_func>
 800b7f2:	6922      	ldr	r2, [r4, #16]
 800b7f4:	3202      	adds	r2, #2
 800b7f6:	f104 010c 	add.w	r1, r4, #12
 800b7fa:	0092      	lsls	r2, r2, #2
 800b7fc:	300c      	adds	r0, #12
 800b7fe:	f001 fd01 	bl	800d204 <memcpy>
 800b802:	4621      	mov	r1, r4
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff ffa5 	bl	800b754 <_Bfree>
 800b80a:	4644      	mov	r4, r8
 800b80c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b810:	3501      	adds	r5, #1
 800b812:	615e      	str	r6, [r3, #20]
 800b814:	6125      	str	r5, [r4, #16]
 800b816:	4620      	mov	r0, r4
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81c:	0800e0fd 	.word	0x0800e0fd
 800b820:	0800e10e 	.word	0x0800e10e

0800b824 <__s2b>:
 800b824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b828:	460c      	mov	r4, r1
 800b82a:	4615      	mov	r5, r2
 800b82c:	461f      	mov	r7, r3
 800b82e:	2209      	movs	r2, #9
 800b830:	3308      	adds	r3, #8
 800b832:	4606      	mov	r6, r0
 800b834:	fb93 f3f2 	sdiv	r3, r3, r2
 800b838:	2100      	movs	r1, #0
 800b83a:	2201      	movs	r2, #1
 800b83c:	429a      	cmp	r2, r3
 800b83e:	db09      	blt.n	800b854 <__s2b+0x30>
 800b840:	4630      	mov	r0, r6
 800b842:	f7ff ff47 	bl	800b6d4 <_Balloc>
 800b846:	b940      	cbnz	r0, 800b85a <__s2b+0x36>
 800b848:	4602      	mov	r2, r0
 800b84a:	4b19      	ldr	r3, [pc, #100]	; (800b8b0 <__s2b+0x8c>)
 800b84c:	4819      	ldr	r0, [pc, #100]	; (800b8b4 <__s2b+0x90>)
 800b84e:	21d3      	movs	r1, #211	; 0xd3
 800b850:	f7fe ffa8 	bl	800a7a4 <__assert_func>
 800b854:	0052      	lsls	r2, r2, #1
 800b856:	3101      	adds	r1, #1
 800b858:	e7f0      	b.n	800b83c <__s2b+0x18>
 800b85a:	9b08      	ldr	r3, [sp, #32]
 800b85c:	6143      	str	r3, [r0, #20]
 800b85e:	2d09      	cmp	r5, #9
 800b860:	f04f 0301 	mov.w	r3, #1
 800b864:	6103      	str	r3, [r0, #16]
 800b866:	dd16      	ble.n	800b896 <__s2b+0x72>
 800b868:	f104 0909 	add.w	r9, r4, #9
 800b86c:	46c8      	mov	r8, r9
 800b86e:	442c      	add	r4, r5
 800b870:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b874:	4601      	mov	r1, r0
 800b876:	3b30      	subs	r3, #48	; 0x30
 800b878:	220a      	movs	r2, #10
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7ff ff8c 	bl	800b798 <__multadd>
 800b880:	45a0      	cmp	r8, r4
 800b882:	d1f5      	bne.n	800b870 <__s2b+0x4c>
 800b884:	f1a5 0408 	sub.w	r4, r5, #8
 800b888:	444c      	add	r4, r9
 800b88a:	1b2d      	subs	r5, r5, r4
 800b88c:	1963      	adds	r3, r4, r5
 800b88e:	42bb      	cmp	r3, r7
 800b890:	db04      	blt.n	800b89c <__s2b+0x78>
 800b892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b896:	340a      	adds	r4, #10
 800b898:	2509      	movs	r5, #9
 800b89a:	e7f6      	b.n	800b88a <__s2b+0x66>
 800b89c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	3b30      	subs	r3, #48	; 0x30
 800b8a4:	220a      	movs	r2, #10
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff ff76 	bl	800b798 <__multadd>
 800b8ac:	e7ee      	b.n	800b88c <__s2b+0x68>
 800b8ae:	bf00      	nop
 800b8b0:	0800e0fd 	.word	0x0800e0fd
 800b8b4:	0800e10e 	.word	0x0800e10e

0800b8b8 <__hi0bits>:
 800b8b8:	0c03      	lsrs	r3, r0, #16
 800b8ba:	041b      	lsls	r3, r3, #16
 800b8bc:	b9d3      	cbnz	r3, 800b8f4 <__hi0bits+0x3c>
 800b8be:	0400      	lsls	r0, r0, #16
 800b8c0:	2310      	movs	r3, #16
 800b8c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8c6:	bf04      	itt	eq
 800b8c8:	0200      	lsleq	r0, r0, #8
 800b8ca:	3308      	addeq	r3, #8
 800b8cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8d0:	bf04      	itt	eq
 800b8d2:	0100      	lsleq	r0, r0, #4
 800b8d4:	3304      	addeq	r3, #4
 800b8d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8da:	bf04      	itt	eq
 800b8dc:	0080      	lsleq	r0, r0, #2
 800b8de:	3302      	addeq	r3, #2
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	db05      	blt.n	800b8f0 <__hi0bits+0x38>
 800b8e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8e8:	f103 0301 	add.w	r3, r3, #1
 800b8ec:	bf08      	it	eq
 800b8ee:	2320      	moveq	r3, #32
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	4770      	bx	lr
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e7e4      	b.n	800b8c2 <__hi0bits+0xa>

0800b8f8 <__lo0bits>:
 800b8f8:	6803      	ldr	r3, [r0, #0]
 800b8fa:	f013 0207 	ands.w	r2, r3, #7
 800b8fe:	d00c      	beq.n	800b91a <__lo0bits+0x22>
 800b900:	07d9      	lsls	r1, r3, #31
 800b902:	d422      	bmi.n	800b94a <__lo0bits+0x52>
 800b904:	079a      	lsls	r2, r3, #30
 800b906:	bf49      	itett	mi
 800b908:	085b      	lsrmi	r3, r3, #1
 800b90a:	089b      	lsrpl	r3, r3, #2
 800b90c:	6003      	strmi	r3, [r0, #0]
 800b90e:	2201      	movmi	r2, #1
 800b910:	bf5c      	itt	pl
 800b912:	6003      	strpl	r3, [r0, #0]
 800b914:	2202      	movpl	r2, #2
 800b916:	4610      	mov	r0, r2
 800b918:	4770      	bx	lr
 800b91a:	b299      	uxth	r1, r3
 800b91c:	b909      	cbnz	r1, 800b922 <__lo0bits+0x2a>
 800b91e:	0c1b      	lsrs	r3, r3, #16
 800b920:	2210      	movs	r2, #16
 800b922:	b2d9      	uxtb	r1, r3
 800b924:	b909      	cbnz	r1, 800b92a <__lo0bits+0x32>
 800b926:	3208      	adds	r2, #8
 800b928:	0a1b      	lsrs	r3, r3, #8
 800b92a:	0719      	lsls	r1, r3, #28
 800b92c:	bf04      	itt	eq
 800b92e:	091b      	lsreq	r3, r3, #4
 800b930:	3204      	addeq	r2, #4
 800b932:	0799      	lsls	r1, r3, #30
 800b934:	bf04      	itt	eq
 800b936:	089b      	lsreq	r3, r3, #2
 800b938:	3202      	addeq	r2, #2
 800b93a:	07d9      	lsls	r1, r3, #31
 800b93c:	d403      	bmi.n	800b946 <__lo0bits+0x4e>
 800b93e:	085b      	lsrs	r3, r3, #1
 800b940:	f102 0201 	add.w	r2, r2, #1
 800b944:	d003      	beq.n	800b94e <__lo0bits+0x56>
 800b946:	6003      	str	r3, [r0, #0]
 800b948:	e7e5      	b.n	800b916 <__lo0bits+0x1e>
 800b94a:	2200      	movs	r2, #0
 800b94c:	e7e3      	b.n	800b916 <__lo0bits+0x1e>
 800b94e:	2220      	movs	r2, #32
 800b950:	e7e1      	b.n	800b916 <__lo0bits+0x1e>
	...

0800b954 <__i2b>:
 800b954:	b510      	push	{r4, lr}
 800b956:	460c      	mov	r4, r1
 800b958:	2101      	movs	r1, #1
 800b95a:	f7ff febb 	bl	800b6d4 <_Balloc>
 800b95e:	4602      	mov	r2, r0
 800b960:	b928      	cbnz	r0, 800b96e <__i2b+0x1a>
 800b962:	4b05      	ldr	r3, [pc, #20]	; (800b978 <__i2b+0x24>)
 800b964:	4805      	ldr	r0, [pc, #20]	; (800b97c <__i2b+0x28>)
 800b966:	f240 1145 	movw	r1, #325	; 0x145
 800b96a:	f7fe ff1b 	bl	800a7a4 <__assert_func>
 800b96e:	2301      	movs	r3, #1
 800b970:	6144      	str	r4, [r0, #20]
 800b972:	6103      	str	r3, [r0, #16]
 800b974:	bd10      	pop	{r4, pc}
 800b976:	bf00      	nop
 800b978:	0800e0fd 	.word	0x0800e0fd
 800b97c:	0800e10e 	.word	0x0800e10e

0800b980 <__multiply>:
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	4691      	mov	r9, r2
 800b986:	690a      	ldr	r2, [r1, #16]
 800b988:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	bfb8      	it	lt
 800b990:	460b      	movlt	r3, r1
 800b992:	460c      	mov	r4, r1
 800b994:	bfbc      	itt	lt
 800b996:	464c      	movlt	r4, r9
 800b998:	4699      	movlt	r9, r3
 800b99a:	6927      	ldr	r7, [r4, #16]
 800b99c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9a0:	68a3      	ldr	r3, [r4, #8]
 800b9a2:	6861      	ldr	r1, [r4, #4]
 800b9a4:	eb07 060a 	add.w	r6, r7, sl
 800b9a8:	42b3      	cmp	r3, r6
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	bfb8      	it	lt
 800b9ae:	3101      	addlt	r1, #1
 800b9b0:	f7ff fe90 	bl	800b6d4 <_Balloc>
 800b9b4:	b930      	cbnz	r0, 800b9c4 <__multiply+0x44>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	4b44      	ldr	r3, [pc, #272]	; (800bacc <__multiply+0x14c>)
 800b9ba:	4845      	ldr	r0, [pc, #276]	; (800bad0 <__multiply+0x150>)
 800b9bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b9c0:	f7fe fef0 	bl	800a7a4 <__assert_func>
 800b9c4:	f100 0514 	add.w	r5, r0, #20
 800b9c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9cc:	462b      	mov	r3, r5
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4543      	cmp	r3, r8
 800b9d2:	d321      	bcc.n	800ba18 <__multiply+0x98>
 800b9d4:	f104 0314 	add.w	r3, r4, #20
 800b9d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9dc:	f109 0314 	add.w	r3, r9, #20
 800b9e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9e4:	9202      	str	r2, [sp, #8]
 800b9e6:	1b3a      	subs	r2, r7, r4
 800b9e8:	3a15      	subs	r2, #21
 800b9ea:	f022 0203 	bic.w	r2, r2, #3
 800b9ee:	3204      	adds	r2, #4
 800b9f0:	f104 0115 	add.w	r1, r4, #21
 800b9f4:	428f      	cmp	r7, r1
 800b9f6:	bf38      	it	cc
 800b9f8:	2204      	movcc	r2, #4
 800b9fa:	9201      	str	r2, [sp, #4]
 800b9fc:	9a02      	ldr	r2, [sp, #8]
 800b9fe:	9303      	str	r3, [sp, #12]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d80c      	bhi.n	800ba1e <__multiply+0x9e>
 800ba04:	2e00      	cmp	r6, #0
 800ba06:	dd03      	ble.n	800ba10 <__multiply+0x90>
 800ba08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d05b      	beq.n	800bac8 <__multiply+0x148>
 800ba10:	6106      	str	r6, [r0, #16]
 800ba12:	b005      	add	sp, #20
 800ba14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba18:	f843 2b04 	str.w	r2, [r3], #4
 800ba1c:	e7d8      	b.n	800b9d0 <__multiply+0x50>
 800ba1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba22:	f1ba 0f00 	cmp.w	sl, #0
 800ba26:	d024      	beq.n	800ba72 <__multiply+0xf2>
 800ba28:	f104 0e14 	add.w	lr, r4, #20
 800ba2c:	46a9      	mov	r9, r5
 800ba2e:	f04f 0c00 	mov.w	ip, #0
 800ba32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba36:	f8d9 1000 	ldr.w	r1, [r9]
 800ba3a:	fa1f fb82 	uxth.w	fp, r2
 800ba3e:	b289      	uxth	r1, r1
 800ba40:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba48:	f8d9 2000 	ldr.w	r2, [r9]
 800ba4c:	4461      	add	r1, ip
 800ba4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba52:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba5a:	b289      	uxth	r1, r1
 800ba5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba60:	4577      	cmp	r7, lr
 800ba62:	f849 1b04 	str.w	r1, [r9], #4
 800ba66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba6a:	d8e2      	bhi.n	800ba32 <__multiply+0xb2>
 800ba6c:	9a01      	ldr	r2, [sp, #4]
 800ba6e:	f845 c002 	str.w	ip, [r5, r2]
 800ba72:	9a03      	ldr	r2, [sp, #12]
 800ba74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba78:	3304      	adds	r3, #4
 800ba7a:	f1b9 0f00 	cmp.w	r9, #0
 800ba7e:	d021      	beq.n	800bac4 <__multiply+0x144>
 800ba80:	6829      	ldr	r1, [r5, #0]
 800ba82:	f104 0c14 	add.w	ip, r4, #20
 800ba86:	46ae      	mov	lr, r5
 800ba88:	f04f 0a00 	mov.w	sl, #0
 800ba8c:	f8bc b000 	ldrh.w	fp, [ip]
 800ba90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba94:	fb09 220b 	mla	r2, r9, fp, r2
 800ba98:	4452      	add	r2, sl
 800ba9a:	b289      	uxth	r1, r1
 800ba9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800baa0:	f84e 1b04 	str.w	r1, [lr], #4
 800baa4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800baa8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800baac:	f8be 1000 	ldrh.w	r1, [lr]
 800bab0:	fb09 110a 	mla	r1, r9, sl, r1
 800bab4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bab8:	4567      	cmp	r7, ip
 800baba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800babe:	d8e5      	bhi.n	800ba8c <__multiply+0x10c>
 800bac0:	9a01      	ldr	r2, [sp, #4]
 800bac2:	50a9      	str	r1, [r5, r2]
 800bac4:	3504      	adds	r5, #4
 800bac6:	e799      	b.n	800b9fc <__multiply+0x7c>
 800bac8:	3e01      	subs	r6, #1
 800baca:	e79b      	b.n	800ba04 <__multiply+0x84>
 800bacc:	0800e0fd 	.word	0x0800e0fd
 800bad0:	0800e10e 	.word	0x0800e10e

0800bad4 <__pow5mult>:
 800bad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bad8:	4615      	mov	r5, r2
 800bada:	f012 0203 	ands.w	r2, r2, #3
 800bade:	4606      	mov	r6, r0
 800bae0:	460f      	mov	r7, r1
 800bae2:	d007      	beq.n	800baf4 <__pow5mult+0x20>
 800bae4:	4c25      	ldr	r4, [pc, #148]	; (800bb7c <__pow5mult+0xa8>)
 800bae6:	3a01      	subs	r2, #1
 800bae8:	2300      	movs	r3, #0
 800baea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baee:	f7ff fe53 	bl	800b798 <__multadd>
 800baf2:	4607      	mov	r7, r0
 800baf4:	10ad      	asrs	r5, r5, #2
 800baf6:	d03d      	beq.n	800bb74 <__pow5mult+0xa0>
 800baf8:	69f4      	ldr	r4, [r6, #28]
 800bafa:	b97c      	cbnz	r4, 800bb1c <__pow5mult+0x48>
 800bafc:	2010      	movs	r0, #16
 800bafe:	f7ff fd35 	bl	800b56c <malloc>
 800bb02:	4602      	mov	r2, r0
 800bb04:	61f0      	str	r0, [r6, #28]
 800bb06:	b928      	cbnz	r0, 800bb14 <__pow5mult+0x40>
 800bb08:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <__pow5mult+0xac>)
 800bb0a:	481e      	ldr	r0, [pc, #120]	; (800bb84 <__pow5mult+0xb0>)
 800bb0c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bb10:	f7fe fe48 	bl	800a7a4 <__assert_func>
 800bb14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb18:	6004      	str	r4, [r0, #0]
 800bb1a:	60c4      	str	r4, [r0, #12]
 800bb1c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bb20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb24:	b94c      	cbnz	r4, 800bb3a <__pow5mult+0x66>
 800bb26:	f240 2171 	movw	r1, #625	; 0x271
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff ff12 	bl	800b954 <__i2b>
 800bb30:	2300      	movs	r3, #0
 800bb32:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb36:	4604      	mov	r4, r0
 800bb38:	6003      	str	r3, [r0, #0]
 800bb3a:	f04f 0900 	mov.w	r9, #0
 800bb3e:	07eb      	lsls	r3, r5, #31
 800bb40:	d50a      	bpl.n	800bb58 <__pow5mult+0x84>
 800bb42:	4639      	mov	r1, r7
 800bb44:	4622      	mov	r2, r4
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7ff ff1a 	bl	800b980 <__multiply>
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	4680      	mov	r8, r0
 800bb50:	4630      	mov	r0, r6
 800bb52:	f7ff fdff 	bl	800b754 <_Bfree>
 800bb56:	4647      	mov	r7, r8
 800bb58:	106d      	asrs	r5, r5, #1
 800bb5a:	d00b      	beq.n	800bb74 <__pow5mult+0xa0>
 800bb5c:	6820      	ldr	r0, [r4, #0]
 800bb5e:	b938      	cbnz	r0, 800bb70 <__pow5mult+0x9c>
 800bb60:	4622      	mov	r2, r4
 800bb62:	4621      	mov	r1, r4
 800bb64:	4630      	mov	r0, r6
 800bb66:	f7ff ff0b 	bl	800b980 <__multiply>
 800bb6a:	6020      	str	r0, [r4, #0]
 800bb6c:	f8c0 9000 	str.w	r9, [r0]
 800bb70:	4604      	mov	r4, r0
 800bb72:	e7e4      	b.n	800bb3e <__pow5mult+0x6a>
 800bb74:	4638      	mov	r0, r7
 800bb76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800e258 	.word	0x0800e258
 800bb80:	0800dfb4 	.word	0x0800dfb4
 800bb84:	0800e10e 	.word	0x0800e10e

0800bb88 <__lshift>:
 800bb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	6849      	ldr	r1, [r1, #4]
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	4607      	mov	r7, r0
 800bb9a:	4691      	mov	r9, r2
 800bb9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bba0:	f108 0601 	add.w	r6, r8, #1
 800bba4:	42b3      	cmp	r3, r6
 800bba6:	db0b      	blt.n	800bbc0 <__lshift+0x38>
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff fd93 	bl	800b6d4 <_Balloc>
 800bbae:	4605      	mov	r5, r0
 800bbb0:	b948      	cbnz	r0, 800bbc6 <__lshift+0x3e>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4b28      	ldr	r3, [pc, #160]	; (800bc58 <__lshift+0xd0>)
 800bbb6:	4829      	ldr	r0, [pc, #164]	; (800bc5c <__lshift+0xd4>)
 800bbb8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bbbc:	f7fe fdf2 	bl	800a7a4 <__assert_func>
 800bbc0:	3101      	adds	r1, #1
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	e7ee      	b.n	800bba4 <__lshift+0x1c>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f100 0114 	add.w	r1, r0, #20
 800bbcc:	f100 0210 	add.w	r2, r0, #16
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	4553      	cmp	r3, sl
 800bbd4:	db33      	blt.n	800bc3e <__lshift+0xb6>
 800bbd6:	6920      	ldr	r0, [r4, #16]
 800bbd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbdc:	f104 0314 	add.w	r3, r4, #20
 800bbe0:	f019 091f 	ands.w	r9, r9, #31
 800bbe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbec:	d02b      	beq.n	800bc46 <__lshift+0xbe>
 800bbee:	f1c9 0e20 	rsb	lr, r9, #32
 800bbf2:	468a      	mov	sl, r1
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	6818      	ldr	r0, [r3, #0]
 800bbf8:	fa00 f009 	lsl.w	r0, r0, r9
 800bbfc:	4310      	orrs	r0, r2
 800bbfe:	f84a 0b04 	str.w	r0, [sl], #4
 800bc02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc06:	459c      	cmp	ip, r3
 800bc08:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc0c:	d8f3      	bhi.n	800bbf6 <__lshift+0x6e>
 800bc0e:	ebac 0304 	sub.w	r3, ip, r4
 800bc12:	3b15      	subs	r3, #21
 800bc14:	f023 0303 	bic.w	r3, r3, #3
 800bc18:	3304      	adds	r3, #4
 800bc1a:	f104 0015 	add.w	r0, r4, #21
 800bc1e:	4584      	cmp	ip, r0
 800bc20:	bf38      	it	cc
 800bc22:	2304      	movcc	r3, #4
 800bc24:	50ca      	str	r2, [r1, r3]
 800bc26:	b10a      	cbz	r2, 800bc2c <__lshift+0xa4>
 800bc28:	f108 0602 	add.w	r6, r8, #2
 800bc2c:	3e01      	subs	r6, #1
 800bc2e:	4638      	mov	r0, r7
 800bc30:	612e      	str	r6, [r5, #16]
 800bc32:	4621      	mov	r1, r4
 800bc34:	f7ff fd8e 	bl	800b754 <_Bfree>
 800bc38:	4628      	mov	r0, r5
 800bc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc42:	3301      	adds	r3, #1
 800bc44:	e7c5      	b.n	800bbd2 <__lshift+0x4a>
 800bc46:	3904      	subs	r1, #4
 800bc48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc50:	459c      	cmp	ip, r3
 800bc52:	d8f9      	bhi.n	800bc48 <__lshift+0xc0>
 800bc54:	e7ea      	b.n	800bc2c <__lshift+0xa4>
 800bc56:	bf00      	nop
 800bc58:	0800e0fd 	.word	0x0800e0fd
 800bc5c:	0800e10e 	.word	0x0800e10e

0800bc60 <__mcmp>:
 800bc60:	b530      	push	{r4, r5, lr}
 800bc62:	6902      	ldr	r2, [r0, #16]
 800bc64:	690c      	ldr	r4, [r1, #16]
 800bc66:	1b12      	subs	r2, r2, r4
 800bc68:	d10e      	bne.n	800bc88 <__mcmp+0x28>
 800bc6a:	f100 0314 	add.w	r3, r0, #20
 800bc6e:	3114      	adds	r1, #20
 800bc70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc80:	42a5      	cmp	r5, r4
 800bc82:	d003      	beq.n	800bc8c <__mcmp+0x2c>
 800bc84:	d305      	bcc.n	800bc92 <__mcmp+0x32>
 800bc86:	2201      	movs	r2, #1
 800bc88:	4610      	mov	r0, r2
 800bc8a:	bd30      	pop	{r4, r5, pc}
 800bc8c:	4283      	cmp	r3, r0
 800bc8e:	d3f3      	bcc.n	800bc78 <__mcmp+0x18>
 800bc90:	e7fa      	b.n	800bc88 <__mcmp+0x28>
 800bc92:	f04f 32ff 	mov.w	r2, #4294967295
 800bc96:	e7f7      	b.n	800bc88 <__mcmp+0x28>

0800bc98 <__mdiff>:
 800bc98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	4606      	mov	r6, r0
 800bca0:	4611      	mov	r1, r2
 800bca2:	4620      	mov	r0, r4
 800bca4:	4690      	mov	r8, r2
 800bca6:	f7ff ffdb 	bl	800bc60 <__mcmp>
 800bcaa:	1e05      	subs	r5, r0, #0
 800bcac:	d110      	bne.n	800bcd0 <__mdiff+0x38>
 800bcae:	4629      	mov	r1, r5
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f7ff fd0f 	bl	800b6d4 <_Balloc>
 800bcb6:	b930      	cbnz	r0, 800bcc6 <__mdiff+0x2e>
 800bcb8:	4b3a      	ldr	r3, [pc, #232]	; (800bda4 <__mdiff+0x10c>)
 800bcba:	4602      	mov	r2, r0
 800bcbc:	f240 2137 	movw	r1, #567	; 0x237
 800bcc0:	4839      	ldr	r0, [pc, #228]	; (800bda8 <__mdiff+0x110>)
 800bcc2:	f7fe fd6f 	bl	800a7a4 <__assert_func>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd0:	bfa4      	itt	ge
 800bcd2:	4643      	movge	r3, r8
 800bcd4:	46a0      	movge	r8, r4
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bcdc:	bfa6      	itte	ge
 800bcde:	461c      	movge	r4, r3
 800bce0:	2500      	movge	r5, #0
 800bce2:	2501      	movlt	r5, #1
 800bce4:	f7ff fcf6 	bl	800b6d4 <_Balloc>
 800bce8:	b920      	cbnz	r0, 800bcf4 <__mdiff+0x5c>
 800bcea:	4b2e      	ldr	r3, [pc, #184]	; (800bda4 <__mdiff+0x10c>)
 800bcec:	4602      	mov	r2, r0
 800bcee:	f240 2145 	movw	r1, #581	; 0x245
 800bcf2:	e7e5      	b.n	800bcc0 <__mdiff+0x28>
 800bcf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bcf8:	6926      	ldr	r6, [r4, #16]
 800bcfa:	60c5      	str	r5, [r0, #12]
 800bcfc:	f104 0914 	add.w	r9, r4, #20
 800bd00:	f108 0514 	add.w	r5, r8, #20
 800bd04:	f100 0e14 	add.w	lr, r0, #20
 800bd08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd10:	f108 0210 	add.w	r2, r8, #16
 800bd14:	46f2      	mov	sl, lr
 800bd16:	2100      	movs	r1, #0
 800bd18:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd20:	fa11 f88b 	uxtah	r8, r1, fp
 800bd24:	b299      	uxth	r1, r3
 800bd26:	0c1b      	lsrs	r3, r3, #16
 800bd28:	eba8 0801 	sub.w	r8, r8, r1
 800bd2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd34:	fa1f f888 	uxth.w	r8, r8
 800bd38:	1419      	asrs	r1, r3, #16
 800bd3a:	454e      	cmp	r6, r9
 800bd3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd40:	f84a 3b04 	str.w	r3, [sl], #4
 800bd44:	d8e8      	bhi.n	800bd18 <__mdiff+0x80>
 800bd46:	1b33      	subs	r3, r6, r4
 800bd48:	3b15      	subs	r3, #21
 800bd4a:	f023 0303 	bic.w	r3, r3, #3
 800bd4e:	3304      	adds	r3, #4
 800bd50:	3415      	adds	r4, #21
 800bd52:	42a6      	cmp	r6, r4
 800bd54:	bf38      	it	cc
 800bd56:	2304      	movcc	r3, #4
 800bd58:	441d      	add	r5, r3
 800bd5a:	4473      	add	r3, lr
 800bd5c:	469e      	mov	lr, r3
 800bd5e:	462e      	mov	r6, r5
 800bd60:	4566      	cmp	r6, ip
 800bd62:	d30e      	bcc.n	800bd82 <__mdiff+0xea>
 800bd64:	f10c 0203 	add.w	r2, ip, #3
 800bd68:	1b52      	subs	r2, r2, r5
 800bd6a:	f022 0203 	bic.w	r2, r2, #3
 800bd6e:	3d03      	subs	r5, #3
 800bd70:	45ac      	cmp	ip, r5
 800bd72:	bf38      	it	cc
 800bd74:	2200      	movcc	r2, #0
 800bd76:	4413      	add	r3, r2
 800bd78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd7c:	b17a      	cbz	r2, 800bd9e <__mdiff+0x106>
 800bd7e:	6107      	str	r7, [r0, #16]
 800bd80:	e7a4      	b.n	800bccc <__mdiff+0x34>
 800bd82:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd86:	fa11 f288 	uxtah	r2, r1, r8
 800bd8a:	1414      	asrs	r4, r2, #16
 800bd8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd90:	b292      	uxth	r2, r2
 800bd92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd96:	f84e 2b04 	str.w	r2, [lr], #4
 800bd9a:	1421      	asrs	r1, r4, #16
 800bd9c:	e7e0      	b.n	800bd60 <__mdiff+0xc8>
 800bd9e:	3f01      	subs	r7, #1
 800bda0:	e7ea      	b.n	800bd78 <__mdiff+0xe0>
 800bda2:	bf00      	nop
 800bda4:	0800e0fd 	.word	0x0800e0fd
 800bda8:	0800e10e 	.word	0x0800e10e

0800bdac <__ulp>:
 800bdac:	b082      	sub	sp, #8
 800bdae:	ed8d 0b00 	vstr	d0, [sp]
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <__ulp+0x48>)
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	dc08      	bgt.n	800bdd2 <__ulp+0x26>
 800bdc0:	425b      	negs	r3, r3
 800bdc2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bdc6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bdca:	da04      	bge.n	800bdd6 <__ulp+0x2a>
 800bdcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bdd0:	4113      	asrs	r3, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	e008      	b.n	800bde8 <__ulp+0x3c>
 800bdd6:	f1a2 0314 	sub.w	r3, r2, #20
 800bdda:	2b1e      	cmp	r3, #30
 800bddc:	bfda      	itte	le
 800bdde:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bde2:	40da      	lsrle	r2, r3
 800bde4:	2201      	movgt	r2, #1
 800bde6:	2300      	movs	r3, #0
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	ec41 0b10 	vmov	d0, r0, r1
 800bdf0:	b002      	add	sp, #8
 800bdf2:	4770      	bx	lr
 800bdf4:	7ff00000 	.word	0x7ff00000

0800bdf8 <__b2d>:
 800bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfc:	6906      	ldr	r6, [r0, #16]
 800bdfe:	f100 0814 	add.w	r8, r0, #20
 800be02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be06:	1f37      	subs	r7, r6, #4
 800be08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be0c:	4610      	mov	r0, r2
 800be0e:	f7ff fd53 	bl	800b8b8 <__hi0bits>
 800be12:	f1c0 0320 	rsb	r3, r0, #32
 800be16:	280a      	cmp	r0, #10
 800be18:	600b      	str	r3, [r1, #0]
 800be1a:	491b      	ldr	r1, [pc, #108]	; (800be88 <__b2d+0x90>)
 800be1c:	dc15      	bgt.n	800be4a <__b2d+0x52>
 800be1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800be22:	fa22 f30c 	lsr.w	r3, r2, ip
 800be26:	45b8      	cmp	r8, r7
 800be28:	ea43 0501 	orr.w	r5, r3, r1
 800be2c:	bf34      	ite	cc
 800be2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be32:	2300      	movcs	r3, #0
 800be34:	3015      	adds	r0, #21
 800be36:	fa02 f000 	lsl.w	r0, r2, r0
 800be3a:	fa23 f30c 	lsr.w	r3, r3, ip
 800be3e:	4303      	orrs	r3, r0
 800be40:	461c      	mov	r4, r3
 800be42:	ec45 4b10 	vmov	d0, r4, r5
 800be46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4a:	45b8      	cmp	r8, r7
 800be4c:	bf3a      	itte	cc
 800be4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be52:	f1a6 0708 	subcc.w	r7, r6, #8
 800be56:	2300      	movcs	r3, #0
 800be58:	380b      	subs	r0, #11
 800be5a:	d012      	beq.n	800be82 <__b2d+0x8a>
 800be5c:	f1c0 0120 	rsb	r1, r0, #32
 800be60:	fa23 f401 	lsr.w	r4, r3, r1
 800be64:	4082      	lsls	r2, r0
 800be66:	4322      	orrs	r2, r4
 800be68:	4547      	cmp	r7, r8
 800be6a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800be6e:	bf8c      	ite	hi
 800be70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800be74:	2200      	movls	r2, #0
 800be76:	4083      	lsls	r3, r0
 800be78:	40ca      	lsrs	r2, r1
 800be7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800be7e:	4313      	orrs	r3, r2
 800be80:	e7de      	b.n	800be40 <__b2d+0x48>
 800be82:	ea42 0501 	orr.w	r5, r2, r1
 800be86:	e7db      	b.n	800be40 <__b2d+0x48>
 800be88:	3ff00000 	.word	0x3ff00000

0800be8c <__d2b>:
 800be8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be90:	460f      	mov	r7, r1
 800be92:	2101      	movs	r1, #1
 800be94:	ec59 8b10 	vmov	r8, r9, d0
 800be98:	4616      	mov	r6, r2
 800be9a:	f7ff fc1b 	bl	800b6d4 <_Balloc>
 800be9e:	4604      	mov	r4, r0
 800bea0:	b930      	cbnz	r0, 800beb0 <__d2b+0x24>
 800bea2:	4602      	mov	r2, r0
 800bea4:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <__d2b+0xac>)
 800bea6:	4825      	ldr	r0, [pc, #148]	; (800bf3c <__d2b+0xb0>)
 800bea8:	f240 310f 	movw	r1, #783	; 0x30f
 800beac:	f7fe fc7a 	bl	800a7a4 <__assert_func>
 800beb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800beb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800beb8:	bb2d      	cbnz	r5, 800bf06 <__d2b+0x7a>
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	f1b8 0300 	subs.w	r3, r8, #0
 800bec0:	d026      	beq.n	800bf10 <__d2b+0x84>
 800bec2:	4668      	mov	r0, sp
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	f7ff fd17 	bl	800b8f8 <__lo0bits>
 800beca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bece:	b1e8      	cbz	r0, 800bf0c <__d2b+0x80>
 800bed0:	f1c0 0320 	rsb	r3, r0, #32
 800bed4:	fa02 f303 	lsl.w	r3, r2, r3
 800bed8:	430b      	orrs	r3, r1
 800beda:	40c2      	lsrs	r2, r0
 800bedc:	6163      	str	r3, [r4, #20]
 800bede:	9201      	str	r2, [sp, #4]
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	61a3      	str	r3, [r4, #24]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bf14      	ite	ne
 800bee8:	2202      	movne	r2, #2
 800beea:	2201      	moveq	r2, #1
 800beec:	6122      	str	r2, [r4, #16]
 800beee:	b1bd      	cbz	r5, 800bf20 <__d2b+0x94>
 800bef0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bef4:	4405      	add	r5, r0
 800bef6:	603d      	str	r5, [r7, #0]
 800bef8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800befc:	6030      	str	r0, [r6, #0]
 800befe:	4620      	mov	r0, r4
 800bf00:	b003      	add	sp, #12
 800bf02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf0a:	e7d6      	b.n	800beba <__d2b+0x2e>
 800bf0c:	6161      	str	r1, [r4, #20]
 800bf0e:	e7e7      	b.n	800bee0 <__d2b+0x54>
 800bf10:	a801      	add	r0, sp, #4
 800bf12:	f7ff fcf1 	bl	800b8f8 <__lo0bits>
 800bf16:	9b01      	ldr	r3, [sp, #4]
 800bf18:	6163      	str	r3, [r4, #20]
 800bf1a:	3020      	adds	r0, #32
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	e7e5      	b.n	800beec <__d2b+0x60>
 800bf20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf28:	6038      	str	r0, [r7, #0]
 800bf2a:	6918      	ldr	r0, [r3, #16]
 800bf2c:	f7ff fcc4 	bl	800b8b8 <__hi0bits>
 800bf30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf34:	e7e2      	b.n	800befc <__d2b+0x70>
 800bf36:	bf00      	nop
 800bf38:	0800e0fd 	.word	0x0800e0fd
 800bf3c:	0800e10e 	.word	0x0800e10e

0800bf40 <__ratio>:
 800bf40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	4688      	mov	r8, r1
 800bf46:	4669      	mov	r1, sp
 800bf48:	4681      	mov	r9, r0
 800bf4a:	f7ff ff55 	bl	800bdf8 <__b2d>
 800bf4e:	a901      	add	r1, sp, #4
 800bf50:	4640      	mov	r0, r8
 800bf52:	ec55 4b10 	vmov	r4, r5, d0
 800bf56:	f7ff ff4f 	bl	800bdf8 <__b2d>
 800bf5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf62:	eba3 0c02 	sub.w	ip, r3, r2
 800bf66:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf6a:	1a9b      	subs	r3, r3, r2
 800bf6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf70:	ec51 0b10 	vmov	r0, r1, d0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bfd6      	itet	le
 800bf78:	460a      	movle	r2, r1
 800bf7a:	462a      	movgt	r2, r5
 800bf7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf80:	468b      	mov	fp, r1
 800bf82:	462f      	mov	r7, r5
 800bf84:	bfd4      	ite	le
 800bf86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf8e:	4620      	mov	r0, r4
 800bf90:	ee10 2a10 	vmov	r2, s0
 800bf94:	465b      	mov	r3, fp
 800bf96:	4639      	mov	r1, r7
 800bf98:	f7f4 fc80 	bl	800089c <__aeabi_ddiv>
 800bf9c:	ec41 0b10 	vmov	d0, r0, r1
 800bfa0:	b003      	add	sp, #12
 800bfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfa6 <__copybits>:
 800bfa6:	3901      	subs	r1, #1
 800bfa8:	b570      	push	{r4, r5, r6, lr}
 800bfaa:	1149      	asrs	r1, r1, #5
 800bfac:	6914      	ldr	r4, [r2, #16]
 800bfae:	3101      	adds	r1, #1
 800bfb0:	f102 0314 	add.w	r3, r2, #20
 800bfb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bfbc:	1f05      	subs	r5, r0, #4
 800bfbe:	42a3      	cmp	r3, r4
 800bfc0:	d30c      	bcc.n	800bfdc <__copybits+0x36>
 800bfc2:	1aa3      	subs	r3, r4, r2
 800bfc4:	3b11      	subs	r3, #17
 800bfc6:	f023 0303 	bic.w	r3, r3, #3
 800bfca:	3211      	adds	r2, #17
 800bfcc:	42a2      	cmp	r2, r4
 800bfce:	bf88      	it	hi
 800bfd0:	2300      	movhi	r3, #0
 800bfd2:	4418      	add	r0, r3
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4288      	cmp	r0, r1
 800bfd8:	d305      	bcc.n	800bfe6 <__copybits+0x40>
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfe0:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfe4:	e7eb      	b.n	800bfbe <__copybits+0x18>
 800bfe6:	f840 3b04 	str.w	r3, [r0], #4
 800bfea:	e7f4      	b.n	800bfd6 <__copybits+0x30>

0800bfec <__any_on>:
 800bfec:	f100 0214 	add.w	r2, r0, #20
 800bff0:	6900      	ldr	r0, [r0, #16]
 800bff2:	114b      	asrs	r3, r1, #5
 800bff4:	4298      	cmp	r0, r3
 800bff6:	b510      	push	{r4, lr}
 800bff8:	db11      	blt.n	800c01e <__any_on+0x32>
 800bffa:	dd0a      	ble.n	800c012 <__any_on+0x26>
 800bffc:	f011 011f 	ands.w	r1, r1, #31
 800c000:	d007      	beq.n	800c012 <__any_on+0x26>
 800c002:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c006:	fa24 f001 	lsr.w	r0, r4, r1
 800c00a:	fa00 f101 	lsl.w	r1, r0, r1
 800c00e:	428c      	cmp	r4, r1
 800c010:	d10b      	bne.n	800c02a <__any_on+0x3e>
 800c012:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c016:	4293      	cmp	r3, r2
 800c018:	d803      	bhi.n	800c022 <__any_on+0x36>
 800c01a:	2000      	movs	r0, #0
 800c01c:	bd10      	pop	{r4, pc}
 800c01e:	4603      	mov	r3, r0
 800c020:	e7f7      	b.n	800c012 <__any_on+0x26>
 800c022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c026:	2900      	cmp	r1, #0
 800c028:	d0f5      	beq.n	800c016 <__any_on+0x2a>
 800c02a:	2001      	movs	r0, #1
 800c02c:	e7f6      	b.n	800c01c <__any_on+0x30>

0800c02e <sulp>:
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	ec45 4b10 	vmov	d0, r4, r5
 800c038:	4616      	mov	r6, r2
 800c03a:	f7ff feb7 	bl	800bdac <__ulp>
 800c03e:	ec51 0b10 	vmov	r0, r1, d0
 800c042:	b17e      	cbz	r6, 800c064 <sulp+0x36>
 800c044:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c048:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dd09      	ble.n	800c064 <sulp+0x36>
 800c050:	051b      	lsls	r3, r3, #20
 800c052:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c056:	2400      	movs	r4, #0
 800c058:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c05c:	4622      	mov	r2, r4
 800c05e:	462b      	mov	r3, r5
 800c060:	f7f4 faf2 	bl	8000648 <__aeabi_dmul>
 800c064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c068 <_strtod_l>:
 800c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	ed2d 8b02 	vpush	{d8}
 800c070:	b09b      	sub	sp, #108	; 0x6c
 800c072:	4604      	mov	r4, r0
 800c074:	9213      	str	r2, [sp, #76]	; 0x4c
 800c076:	2200      	movs	r2, #0
 800c078:	9216      	str	r2, [sp, #88]	; 0x58
 800c07a:	460d      	mov	r5, r1
 800c07c:	f04f 0800 	mov.w	r8, #0
 800c080:	f04f 0900 	mov.w	r9, #0
 800c084:	460a      	mov	r2, r1
 800c086:	9215      	str	r2, [sp, #84]	; 0x54
 800c088:	7811      	ldrb	r1, [r2, #0]
 800c08a:	292b      	cmp	r1, #43	; 0x2b
 800c08c:	d04c      	beq.n	800c128 <_strtod_l+0xc0>
 800c08e:	d83a      	bhi.n	800c106 <_strtod_l+0x9e>
 800c090:	290d      	cmp	r1, #13
 800c092:	d834      	bhi.n	800c0fe <_strtod_l+0x96>
 800c094:	2908      	cmp	r1, #8
 800c096:	d834      	bhi.n	800c102 <_strtod_l+0x9a>
 800c098:	2900      	cmp	r1, #0
 800c09a:	d03d      	beq.n	800c118 <_strtod_l+0xb0>
 800c09c:	2200      	movs	r2, #0
 800c09e:	920a      	str	r2, [sp, #40]	; 0x28
 800c0a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c0a2:	7832      	ldrb	r2, [r6, #0]
 800c0a4:	2a30      	cmp	r2, #48	; 0x30
 800c0a6:	f040 80b4 	bne.w	800c212 <_strtod_l+0x1aa>
 800c0aa:	7872      	ldrb	r2, [r6, #1]
 800c0ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c0b0:	2a58      	cmp	r2, #88	; 0x58
 800c0b2:	d170      	bne.n	800c196 <_strtod_l+0x12e>
 800c0b4:	9302      	str	r3, [sp, #8]
 800c0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	ab16      	add	r3, sp, #88	; 0x58
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	4a8e      	ldr	r2, [pc, #568]	; (800c2f8 <_strtod_l+0x290>)
 800c0c0:	ab17      	add	r3, sp, #92	; 0x5c
 800c0c2:	a915      	add	r1, sp, #84	; 0x54
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f001 f937 	bl	800d338 <__gethex>
 800c0ca:	f010 070f 	ands.w	r7, r0, #15
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	d005      	beq.n	800c0de <_strtod_l+0x76>
 800c0d2:	2f06      	cmp	r7, #6
 800c0d4:	d12a      	bne.n	800c12c <_strtod_l+0xc4>
 800c0d6:	3601      	adds	r6, #1
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9615      	str	r6, [sp, #84]	; 0x54
 800c0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c0de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f040 857f 	bne.w	800cbe4 <_strtod_l+0xb7c>
 800c0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e8:	b1db      	cbz	r3, 800c122 <_strtod_l+0xba>
 800c0ea:	4642      	mov	r2, r8
 800c0ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c0f0:	ec43 2b10 	vmov	d0, r2, r3
 800c0f4:	b01b      	add	sp, #108	; 0x6c
 800c0f6:	ecbd 8b02 	vpop	{d8}
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	2920      	cmp	r1, #32
 800c100:	d1cc      	bne.n	800c09c <_strtod_l+0x34>
 800c102:	3201      	adds	r2, #1
 800c104:	e7bf      	b.n	800c086 <_strtod_l+0x1e>
 800c106:	292d      	cmp	r1, #45	; 0x2d
 800c108:	d1c8      	bne.n	800c09c <_strtod_l+0x34>
 800c10a:	2101      	movs	r1, #1
 800c10c:	910a      	str	r1, [sp, #40]	; 0x28
 800c10e:	1c51      	adds	r1, r2, #1
 800c110:	9115      	str	r1, [sp, #84]	; 0x54
 800c112:	7852      	ldrb	r2, [r2, #1]
 800c114:	2a00      	cmp	r2, #0
 800c116:	d1c3      	bne.n	800c0a0 <_strtod_l+0x38>
 800c118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c11a:	9515      	str	r5, [sp, #84]	; 0x54
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f040 855f 	bne.w	800cbe0 <_strtod_l+0xb78>
 800c122:	4642      	mov	r2, r8
 800c124:	464b      	mov	r3, r9
 800c126:	e7e3      	b.n	800c0f0 <_strtod_l+0x88>
 800c128:	2100      	movs	r1, #0
 800c12a:	e7ef      	b.n	800c10c <_strtod_l+0xa4>
 800c12c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c12e:	b13a      	cbz	r2, 800c140 <_strtod_l+0xd8>
 800c130:	2135      	movs	r1, #53	; 0x35
 800c132:	a818      	add	r0, sp, #96	; 0x60
 800c134:	f7ff ff37 	bl	800bfa6 <__copybits>
 800c138:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c13a:	4620      	mov	r0, r4
 800c13c:	f7ff fb0a 	bl	800b754 <_Bfree>
 800c140:	3f01      	subs	r7, #1
 800c142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c144:	2f04      	cmp	r7, #4
 800c146:	d806      	bhi.n	800c156 <_strtod_l+0xee>
 800c148:	e8df f007 	tbb	[pc, r7]
 800c14c:	201d0314 	.word	0x201d0314
 800c150:	14          	.byte	0x14
 800c151:	00          	.byte	0x00
 800c152:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c156:	05e9      	lsls	r1, r5, #23
 800c158:	bf48      	it	mi
 800c15a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c15e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c162:	0d1b      	lsrs	r3, r3, #20
 800c164:	051b      	lsls	r3, r3, #20
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1b9      	bne.n	800c0de <_strtod_l+0x76>
 800c16a:	f7fe fae9 	bl	800a740 <__errno>
 800c16e:	2322      	movs	r3, #34	; 0x22
 800c170:	6003      	str	r3, [r0, #0]
 800c172:	e7b4      	b.n	800c0de <_strtod_l+0x76>
 800c174:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c178:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c17c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c180:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c184:	e7e7      	b.n	800c156 <_strtod_l+0xee>
 800c186:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c300 <_strtod_l+0x298>
 800c18a:	e7e4      	b.n	800c156 <_strtod_l+0xee>
 800c18c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c190:	f04f 38ff 	mov.w	r8, #4294967295
 800c194:	e7df      	b.n	800c156 <_strtod_l+0xee>
 800c196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	9215      	str	r2, [sp, #84]	; 0x54
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b30      	cmp	r3, #48	; 0x30
 800c1a0:	d0f9      	beq.n	800c196 <_strtod_l+0x12e>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d09b      	beq.n	800c0de <_strtod_l+0x76>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	f04f 0a00 	mov.w	sl, #0
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c1b6:	46d3      	mov	fp, sl
 800c1b8:	220a      	movs	r2, #10
 800c1ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c1bc:	7806      	ldrb	r6, [r0, #0]
 800c1be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c1c2:	b2d9      	uxtb	r1, r3
 800c1c4:	2909      	cmp	r1, #9
 800c1c6:	d926      	bls.n	800c216 <_strtod_l+0x1ae>
 800c1c8:	494c      	ldr	r1, [pc, #304]	; (800c2fc <_strtod_l+0x294>)
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f000 fff8 	bl	800d1c0 <strncmp>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d030      	beq.n	800c236 <_strtod_l+0x1ce>
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	9005      	str	r0, [sp, #20]
 800c1da:	465e      	mov	r6, fp
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2a65      	cmp	r2, #101	; 0x65
 800c1e0:	d001      	beq.n	800c1e6 <_strtod_l+0x17e>
 800c1e2:	2a45      	cmp	r2, #69	; 0x45
 800c1e4:	d113      	bne.n	800c20e <_strtod_l+0x1a6>
 800c1e6:	b91e      	cbnz	r6, 800c1f0 <_strtod_l+0x188>
 800c1e8:	9a04      	ldr	r2, [sp, #16]
 800c1ea:	4302      	orrs	r2, r0
 800c1ec:	d094      	beq.n	800c118 <_strtod_l+0xb0>
 800c1ee:	2600      	movs	r6, #0
 800c1f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c1f2:	1c6a      	adds	r2, r5, #1
 800c1f4:	9215      	str	r2, [sp, #84]	; 0x54
 800c1f6:	786a      	ldrb	r2, [r5, #1]
 800c1f8:	2a2b      	cmp	r2, #43	; 0x2b
 800c1fa:	d074      	beq.n	800c2e6 <_strtod_l+0x27e>
 800c1fc:	2a2d      	cmp	r2, #45	; 0x2d
 800c1fe:	d078      	beq.n	800c2f2 <_strtod_l+0x28a>
 800c200:	f04f 0c00 	mov.w	ip, #0
 800c204:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c208:	2909      	cmp	r1, #9
 800c20a:	d97f      	bls.n	800c30c <_strtod_l+0x2a4>
 800c20c:	9515      	str	r5, [sp, #84]	; 0x54
 800c20e:	2700      	movs	r7, #0
 800c210:	e09e      	b.n	800c350 <_strtod_l+0x2e8>
 800c212:	2300      	movs	r3, #0
 800c214:	e7c8      	b.n	800c1a8 <_strtod_l+0x140>
 800c216:	f1bb 0f08 	cmp.w	fp, #8
 800c21a:	bfd8      	it	le
 800c21c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c21e:	f100 0001 	add.w	r0, r0, #1
 800c222:	bfda      	itte	le
 800c224:	fb02 3301 	mlale	r3, r2, r1, r3
 800c228:	9309      	strle	r3, [sp, #36]	; 0x24
 800c22a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c22e:	f10b 0b01 	add.w	fp, fp, #1
 800c232:	9015      	str	r0, [sp, #84]	; 0x54
 800c234:	e7c1      	b.n	800c1ba <_strtod_l+0x152>
 800c236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	9215      	str	r2, [sp, #84]	; 0x54
 800c23c:	785a      	ldrb	r2, [r3, #1]
 800c23e:	f1bb 0f00 	cmp.w	fp, #0
 800c242:	d037      	beq.n	800c2b4 <_strtod_l+0x24c>
 800c244:	9005      	str	r0, [sp, #20]
 800c246:	465e      	mov	r6, fp
 800c248:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c24c:	2b09      	cmp	r3, #9
 800c24e:	d912      	bls.n	800c276 <_strtod_l+0x20e>
 800c250:	2301      	movs	r3, #1
 800c252:	e7c4      	b.n	800c1de <_strtod_l+0x176>
 800c254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	9215      	str	r2, [sp, #84]	; 0x54
 800c25a:	785a      	ldrb	r2, [r3, #1]
 800c25c:	3001      	adds	r0, #1
 800c25e:	2a30      	cmp	r2, #48	; 0x30
 800c260:	d0f8      	beq.n	800c254 <_strtod_l+0x1ec>
 800c262:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c266:	2b08      	cmp	r3, #8
 800c268:	f200 84c1 	bhi.w	800cbee <_strtod_l+0xb86>
 800c26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c26e:	9005      	str	r0, [sp, #20]
 800c270:	2000      	movs	r0, #0
 800c272:	930b      	str	r3, [sp, #44]	; 0x2c
 800c274:	4606      	mov	r6, r0
 800c276:	3a30      	subs	r2, #48	; 0x30
 800c278:	f100 0301 	add.w	r3, r0, #1
 800c27c:	d014      	beq.n	800c2a8 <_strtod_l+0x240>
 800c27e:	9905      	ldr	r1, [sp, #20]
 800c280:	4419      	add	r1, r3
 800c282:	9105      	str	r1, [sp, #20]
 800c284:	4633      	mov	r3, r6
 800c286:	eb00 0c06 	add.w	ip, r0, r6
 800c28a:	210a      	movs	r1, #10
 800c28c:	4563      	cmp	r3, ip
 800c28e:	d113      	bne.n	800c2b8 <_strtod_l+0x250>
 800c290:	1833      	adds	r3, r6, r0
 800c292:	2b08      	cmp	r3, #8
 800c294:	f106 0601 	add.w	r6, r6, #1
 800c298:	4406      	add	r6, r0
 800c29a:	dc1a      	bgt.n	800c2d2 <_strtod_l+0x26a>
 800c29c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c29e:	230a      	movs	r3, #10
 800c2a0:	fb03 2301 	mla	r3, r3, r1, r2
 800c2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c2aa:	1c51      	adds	r1, r2, #1
 800c2ac:	9115      	str	r1, [sp, #84]	; 0x54
 800c2ae:	7852      	ldrb	r2, [r2, #1]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	e7c9      	b.n	800c248 <_strtod_l+0x1e0>
 800c2b4:	4658      	mov	r0, fp
 800c2b6:	e7d2      	b.n	800c25e <_strtod_l+0x1f6>
 800c2b8:	2b08      	cmp	r3, #8
 800c2ba:	f103 0301 	add.w	r3, r3, #1
 800c2be:	dc03      	bgt.n	800c2c8 <_strtod_l+0x260>
 800c2c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c2c2:	434f      	muls	r7, r1
 800c2c4:	9709      	str	r7, [sp, #36]	; 0x24
 800c2c6:	e7e1      	b.n	800c28c <_strtod_l+0x224>
 800c2c8:	2b10      	cmp	r3, #16
 800c2ca:	bfd8      	it	le
 800c2cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c2d0:	e7dc      	b.n	800c28c <_strtod_l+0x224>
 800c2d2:	2e10      	cmp	r6, #16
 800c2d4:	bfdc      	itt	le
 800c2d6:	230a      	movle	r3, #10
 800c2d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c2dc:	e7e3      	b.n	800c2a6 <_strtod_l+0x23e>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	9305      	str	r3, [sp, #20]
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e780      	b.n	800c1e8 <_strtod_l+0x180>
 800c2e6:	f04f 0c00 	mov.w	ip, #0
 800c2ea:	1caa      	adds	r2, r5, #2
 800c2ec:	9215      	str	r2, [sp, #84]	; 0x54
 800c2ee:	78aa      	ldrb	r2, [r5, #2]
 800c2f0:	e788      	b.n	800c204 <_strtod_l+0x19c>
 800c2f2:	f04f 0c01 	mov.w	ip, #1
 800c2f6:	e7f8      	b.n	800c2ea <_strtod_l+0x282>
 800c2f8:	0800e268 	.word	0x0800e268
 800c2fc:	0800e264 	.word	0x0800e264
 800c300:	7ff00000 	.word	0x7ff00000
 800c304:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c306:	1c51      	adds	r1, r2, #1
 800c308:	9115      	str	r1, [sp, #84]	; 0x54
 800c30a:	7852      	ldrb	r2, [r2, #1]
 800c30c:	2a30      	cmp	r2, #48	; 0x30
 800c30e:	d0f9      	beq.n	800c304 <_strtod_l+0x29c>
 800c310:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c314:	2908      	cmp	r1, #8
 800c316:	f63f af7a 	bhi.w	800c20e <_strtod_l+0x1a6>
 800c31a:	3a30      	subs	r2, #48	; 0x30
 800c31c:	9208      	str	r2, [sp, #32]
 800c31e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c320:	920c      	str	r2, [sp, #48]	; 0x30
 800c322:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c324:	1c57      	adds	r7, r2, #1
 800c326:	9715      	str	r7, [sp, #84]	; 0x54
 800c328:	7852      	ldrb	r2, [r2, #1]
 800c32a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c32e:	f1be 0f09 	cmp.w	lr, #9
 800c332:	d938      	bls.n	800c3a6 <_strtod_l+0x33e>
 800c334:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c336:	1a7f      	subs	r7, r7, r1
 800c338:	2f08      	cmp	r7, #8
 800c33a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c33e:	dc03      	bgt.n	800c348 <_strtod_l+0x2e0>
 800c340:	9908      	ldr	r1, [sp, #32]
 800c342:	428f      	cmp	r7, r1
 800c344:	bfa8      	it	ge
 800c346:	460f      	movge	r7, r1
 800c348:	f1bc 0f00 	cmp.w	ip, #0
 800c34c:	d000      	beq.n	800c350 <_strtod_l+0x2e8>
 800c34e:	427f      	negs	r7, r7
 800c350:	2e00      	cmp	r6, #0
 800c352:	d14f      	bne.n	800c3f4 <_strtod_l+0x38c>
 800c354:	9904      	ldr	r1, [sp, #16]
 800c356:	4301      	orrs	r1, r0
 800c358:	f47f aec1 	bne.w	800c0de <_strtod_l+0x76>
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f47f aedb 	bne.w	800c118 <_strtod_l+0xb0>
 800c362:	2a69      	cmp	r2, #105	; 0x69
 800c364:	d029      	beq.n	800c3ba <_strtod_l+0x352>
 800c366:	dc26      	bgt.n	800c3b6 <_strtod_l+0x34e>
 800c368:	2a49      	cmp	r2, #73	; 0x49
 800c36a:	d026      	beq.n	800c3ba <_strtod_l+0x352>
 800c36c:	2a4e      	cmp	r2, #78	; 0x4e
 800c36e:	f47f aed3 	bne.w	800c118 <_strtod_l+0xb0>
 800c372:	499b      	ldr	r1, [pc, #620]	; (800c5e0 <_strtod_l+0x578>)
 800c374:	a815      	add	r0, sp, #84	; 0x54
 800c376:	f001 fa1f 	bl	800d7b8 <__match>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	f43f aecc 	beq.w	800c118 <_strtod_l+0xb0>
 800c380:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	2b28      	cmp	r3, #40	; 0x28
 800c386:	d12f      	bne.n	800c3e8 <_strtod_l+0x380>
 800c388:	4996      	ldr	r1, [pc, #600]	; (800c5e4 <_strtod_l+0x57c>)
 800c38a:	aa18      	add	r2, sp, #96	; 0x60
 800c38c:	a815      	add	r0, sp, #84	; 0x54
 800c38e:	f001 fa27 	bl	800d7e0 <__hexnan>
 800c392:	2805      	cmp	r0, #5
 800c394:	d128      	bne.n	800c3e8 <_strtod_l+0x380>
 800c396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c398:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c39c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c3a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c3a4:	e69b      	b.n	800c0de <_strtod_l+0x76>
 800c3a6:	9f08      	ldr	r7, [sp, #32]
 800c3a8:	210a      	movs	r1, #10
 800c3aa:	fb01 2107 	mla	r1, r1, r7, r2
 800c3ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c3b2:	9208      	str	r2, [sp, #32]
 800c3b4:	e7b5      	b.n	800c322 <_strtod_l+0x2ba>
 800c3b6:	2a6e      	cmp	r2, #110	; 0x6e
 800c3b8:	e7d9      	b.n	800c36e <_strtod_l+0x306>
 800c3ba:	498b      	ldr	r1, [pc, #556]	; (800c5e8 <_strtod_l+0x580>)
 800c3bc:	a815      	add	r0, sp, #84	; 0x54
 800c3be:	f001 f9fb 	bl	800d7b8 <__match>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	f43f aea8 	beq.w	800c118 <_strtod_l+0xb0>
 800c3c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3ca:	4988      	ldr	r1, [pc, #544]	; (800c5ec <_strtod_l+0x584>)
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	a815      	add	r0, sp, #84	; 0x54
 800c3d0:	9315      	str	r3, [sp, #84]	; 0x54
 800c3d2:	f001 f9f1 	bl	800d7b8 <__match>
 800c3d6:	b910      	cbnz	r0, 800c3de <_strtod_l+0x376>
 800c3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3da:	3301      	adds	r3, #1
 800c3dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c3de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c5fc <_strtod_l+0x594>
 800c3e2:	f04f 0800 	mov.w	r8, #0
 800c3e6:	e67a      	b.n	800c0de <_strtod_l+0x76>
 800c3e8:	4881      	ldr	r0, [pc, #516]	; (800c5f0 <_strtod_l+0x588>)
 800c3ea:	f000 ff19 	bl	800d220 <nan>
 800c3ee:	ec59 8b10 	vmov	r8, r9, d0
 800c3f2:	e674      	b.n	800c0de <_strtod_l+0x76>
 800c3f4:	9b05      	ldr	r3, [sp, #20]
 800c3f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3f8:	1afb      	subs	r3, r7, r3
 800c3fa:	f1bb 0f00 	cmp.w	fp, #0
 800c3fe:	bf08      	it	eq
 800c400:	46b3      	moveq	fp, r6
 800c402:	2e10      	cmp	r6, #16
 800c404:	9308      	str	r3, [sp, #32]
 800c406:	4635      	mov	r5, r6
 800c408:	bfa8      	it	ge
 800c40a:	2510      	movge	r5, #16
 800c40c:	f7f4 f8a2 	bl	8000554 <__aeabi_ui2d>
 800c410:	2e09      	cmp	r6, #9
 800c412:	4680      	mov	r8, r0
 800c414:	4689      	mov	r9, r1
 800c416:	dd13      	ble.n	800c440 <_strtod_l+0x3d8>
 800c418:	4b76      	ldr	r3, [pc, #472]	; (800c5f4 <_strtod_l+0x58c>)
 800c41a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c41e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c422:	f7f4 f911 	bl	8000648 <__aeabi_dmul>
 800c426:	4680      	mov	r8, r0
 800c428:	4650      	mov	r0, sl
 800c42a:	4689      	mov	r9, r1
 800c42c:	f7f4 f892 	bl	8000554 <__aeabi_ui2d>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	4640      	mov	r0, r8
 800c436:	4649      	mov	r1, r9
 800c438:	f7f3 ff50 	bl	80002dc <__adddf3>
 800c43c:	4680      	mov	r8, r0
 800c43e:	4689      	mov	r9, r1
 800c440:	2e0f      	cmp	r6, #15
 800c442:	dc38      	bgt.n	800c4b6 <_strtod_l+0x44e>
 800c444:	9b08      	ldr	r3, [sp, #32]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f43f ae49 	beq.w	800c0de <_strtod_l+0x76>
 800c44c:	dd24      	ble.n	800c498 <_strtod_l+0x430>
 800c44e:	2b16      	cmp	r3, #22
 800c450:	dc0b      	bgt.n	800c46a <_strtod_l+0x402>
 800c452:	4968      	ldr	r1, [pc, #416]	; (800c5f4 <_strtod_l+0x58c>)
 800c454:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c45c:	4642      	mov	r2, r8
 800c45e:	464b      	mov	r3, r9
 800c460:	f7f4 f8f2 	bl	8000648 <__aeabi_dmul>
 800c464:	4680      	mov	r8, r0
 800c466:	4689      	mov	r9, r1
 800c468:	e639      	b.n	800c0de <_strtod_l+0x76>
 800c46a:	9a08      	ldr	r2, [sp, #32]
 800c46c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c470:	4293      	cmp	r3, r2
 800c472:	db20      	blt.n	800c4b6 <_strtod_l+0x44e>
 800c474:	4c5f      	ldr	r4, [pc, #380]	; (800c5f4 <_strtod_l+0x58c>)
 800c476:	f1c6 060f 	rsb	r6, r6, #15
 800c47a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c47e:	4642      	mov	r2, r8
 800c480:	464b      	mov	r3, r9
 800c482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c486:	f7f4 f8df 	bl	8000648 <__aeabi_dmul>
 800c48a:	9b08      	ldr	r3, [sp, #32]
 800c48c:	1b9e      	subs	r6, r3, r6
 800c48e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c492:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c496:	e7e3      	b.n	800c460 <_strtod_l+0x3f8>
 800c498:	9b08      	ldr	r3, [sp, #32]
 800c49a:	3316      	adds	r3, #22
 800c49c:	db0b      	blt.n	800c4b6 <_strtod_l+0x44e>
 800c49e:	9b05      	ldr	r3, [sp, #20]
 800c4a0:	1bdf      	subs	r7, r3, r7
 800c4a2:	4b54      	ldr	r3, [pc, #336]	; (800c5f4 <_strtod_l+0x58c>)
 800c4a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	f7f4 f9f4 	bl	800089c <__aeabi_ddiv>
 800c4b4:	e7d6      	b.n	800c464 <_strtod_l+0x3fc>
 800c4b6:	9b08      	ldr	r3, [sp, #32]
 800c4b8:	1b75      	subs	r5, r6, r5
 800c4ba:	441d      	add	r5, r3
 800c4bc:	2d00      	cmp	r5, #0
 800c4be:	dd70      	ble.n	800c5a2 <_strtod_l+0x53a>
 800c4c0:	f015 030f 	ands.w	r3, r5, #15
 800c4c4:	d00a      	beq.n	800c4dc <_strtod_l+0x474>
 800c4c6:	494b      	ldr	r1, [pc, #300]	; (800c5f4 <_strtod_l+0x58c>)
 800c4c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4cc:	4642      	mov	r2, r8
 800c4ce:	464b      	mov	r3, r9
 800c4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4d4:	f7f4 f8b8 	bl	8000648 <__aeabi_dmul>
 800c4d8:	4680      	mov	r8, r0
 800c4da:	4689      	mov	r9, r1
 800c4dc:	f035 050f 	bics.w	r5, r5, #15
 800c4e0:	d04d      	beq.n	800c57e <_strtod_l+0x516>
 800c4e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c4e6:	dd22      	ble.n	800c52e <_strtod_l+0x4c6>
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	46ab      	mov	fp, r5
 800c4ec:	9509      	str	r5, [sp, #36]	; 0x24
 800c4ee:	9505      	str	r5, [sp, #20]
 800c4f0:	2322      	movs	r3, #34	; 0x22
 800c4f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c5fc <_strtod_l+0x594>
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	f04f 0800 	mov.w	r8, #0
 800c4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f43f aded 	beq.w	800c0de <_strtod_l+0x76>
 800c504:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c506:	4620      	mov	r0, r4
 800c508:	f7ff f924 	bl	800b754 <_Bfree>
 800c50c:	9905      	ldr	r1, [sp, #20]
 800c50e:	4620      	mov	r0, r4
 800c510:	f7ff f920 	bl	800b754 <_Bfree>
 800c514:	4659      	mov	r1, fp
 800c516:	4620      	mov	r0, r4
 800c518:	f7ff f91c 	bl	800b754 <_Bfree>
 800c51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c51e:	4620      	mov	r0, r4
 800c520:	f7ff f918 	bl	800b754 <_Bfree>
 800c524:	4629      	mov	r1, r5
 800c526:	4620      	mov	r0, r4
 800c528:	f7ff f914 	bl	800b754 <_Bfree>
 800c52c:	e5d7      	b.n	800c0de <_strtod_l+0x76>
 800c52e:	4b32      	ldr	r3, [pc, #200]	; (800c5f8 <_strtod_l+0x590>)
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	2300      	movs	r3, #0
 800c534:	112d      	asrs	r5, r5, #4
 800c536:	4640      	mov	r0, r8
 800c538:	4649      	mov	r1, r9
 800c53a:	469a      	mov	sl, r3
 800c53c:	2d01      	cmp	r5, #1
 800c53e:	dc21      	bgt.n	800c584 <_strtod_l+0x51c>
 800c540:	b10b      	cbz	r3, 800c546 <_strtod_l+0x4de>
 800c542:	4680      	mov	r8, r0
 800c544:	4689      	mov	r9, r1
 800c546:	492c      	ldr	r1, [pc, #176]	; (800c5f8 <_strtod_l+0x590>)
 800c548:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c54c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c550:	4642      	mov	r2, r8
 800c552:	464b      	mov	r3, r9
 800c554:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c558:	f7f4 f876 	bl	8000648 <__aeabi_dmul>
 800c55c:	4b27      	ldr	r3, [pc, #156]	; (800c5fc <_strtod_l+0x594>)
 800c55e:	460a      	mov	r2, r1
 800c560:	400b      	ands	r3, r1
 800c562:	4927      	ldr	r1, [pc, #156]	; (800c600 <_strtod_l+0x598>)
 800c564:	428b      	cmp	r3, r1
 800c566:	4680      	mov	r8, r0
 800c568:	d8be      	bhi.n	800c4e8 <_strtod_l+0x480>
 800c56a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c56e:	428b      	cmp	r3, r1
 800c570:	bf86      	itte	hi
 800c572:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c604 <_strtod_l+0x59c>
 800c576:	f04f 38ff 	movhi.w	r8, #4294967295
 800c57a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c57e:	2300      	movs	r3, #0
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	e07b      	b.n	800c67c <_strtod_l+0x614>
 800c584:	07ea      	lsls	r2, r5, #31
 800c586:	d505      	bpl.n	800c594 <_strtod_l+0x52c>
 800c588:	9b04      	ldr	r3, [sp, #16]
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f7f4 f85b 	bl	8000648 <__aeabi_dmul>
 800c592:	2301      	movs	r3, #1
 800c594:	9a04      	ldr	r2, [sp, #16]
 800c596:	3208      	adds	r2, #8
 800c598:	f10a 0a01 	add.w	sl, sl, #1
 800c59c:	106d      	asrs	r5, r5, #1
 800c59e:	9204      	str	r2, [sp, #16]
 800c5a0:	e7cc      	b.n	800c53c <_strtod_l+0x4d4>
 800c5a2:	d0ec      	beq.n	800c57e <_strtod_l+0x516>
 800c5a4:	426d      	negs	r5, r5
 800c5a6:	f015 020f 	ands.w	r2, r5, #15
 800c5aa:	d00a      	beq.n	800c5c2 <_strtod_l+0x55a>
 800c5ac:	4b11      	ldr	r3, [pc, #68]	; (800c5f4 <_strtod_l+0x58c>)
 800c5ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	f7f4 f96f 	bl	800089c <__aeabi_ddiv>
 800c5be:	4680      	mov	r8, r0
 800c5c0:	4689      	mov	r9, r1
 800c5c2:	112d      	asrs	r5, r5, #4
 800c5c4:	d0db      	beq.n	800c57e <_strtod_l+0x516>
 800c5c6:	2d1f      	cmp	r5, #31
 800c5c8:	dd1e      	ble.n	800c608 <_strtod_l+0x5a0>
 800c5ca:	2500      	movs	r5, #0
 800c5cc:	46ab      	mov	fp, r5
 800c5ce:	9509      	str	r5, [sp, #36]	; 0x24
 800c5d0:	9505      	str	r5, [sp, #20]
 800c5d2:	2322      	movs	r3, #34	; 0x22
 800c5d4:	f04f 0800 	mov.w	r8, #0
 800c5d8:	f04f 0900 	mov.w	r9, #0
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	e78d      	b.n	800c4fc <_strtod_l+0x494>
 800c5e0:	0800e030 	.word	0x0800e030
 800c5e4:	0800e27c 	.word	0x0800e27c
 800c5e8:	0800e028 	.word	0x0800e028
 800c5ec:	0800e09b 	.word	0x0800e09b
 800c5f0:	0800e097 	.word	0x0800e097
 800c5f4:	0800e190 	.word	0x0800e190
 800c5f8:	0800e168 	.word	0x0800e168
 800c5fc:	7ff00000 	.word	0x7ff00000
 800c600:	7ca00000 	.word	0x7ca00000
 800c604:	7fefffff 	.word	0x7fefffff
 800c608:	f015 0310 	ands.w	r3, r5, #16
 800c60c:	bf18      	it	ne
 800c60e:	236a      	movne	r3, #106	; 0x6a
 800c610:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c9b4 <_strtod_l+0x94c>
 800c614:	9304      	str	r3, [sp, #16]
 800c616:	4640      	mov	r0, r8
 800c618:	4649      	mov	r1, r9
 800c61a:	2300      	movs	r3, #0
 800c61c:	07ea      	lsls	r2, r5, #31
 800c61e:	d504      	bpl.n	800c62a <_strtod_l+0x5c2>
 800c620:	e9da 2300 	ldrd	r2, r3, [sl]
 800c624:	f7f4 f810 	bl	8000648 <__aeabi_dmul>
 800c628:	2301      	movs	r3, #1
 800c62a:	106d      	asrs	r5, r5, #1
 800c62c:	f10a 0a08 	add.w	sl, sl, #8
 800c630:	d1f4      	bne.n	800c61c <_strtod_l+0x5b4>
 800c632:	b10b      	cbz	r3, 800c638 <_strtod_l+0x5d0>
 800c634:	4680      	mov	r8, r0
 800c636:	4689      	mov	r9, r1
 800c638:	9b04      	ldr	r3, [sp, #16]
 800c63a:	b1bb      	cbz	r3, 800c66c <_strtod_l+0x604>
 800c63c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c640:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c644:	2b00      	cmp	r3, #0
 800c646:	4649      	mov	r1, r9
 800c648:	dd10      	ble.n	800c66c <_strtod_l+0x604>
 800c64a:	2b1f      	cmp	r3, #31
 800c64c:	f340 811e 	ble.w	800c88c <_strtod_l+0x824>
 800c650:	2b34      	cmp	r3, #52	; 0x34
 800c652:	bfde      	ittt	le
 800c654:	f04f 33ff 	movle.w	r3, #4294967295
 800c658:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c65c:	4093      	lslle	r3, r2
 800c65e:	f04f 0800 	mov.w	r8, #0
 800c662:	bfcc      	ite	gt
 800c664:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c668:	ea03 0901 	andle.w	r9, r3, r1
 800c66c:	2200      	movs	r2, #0
 800c66e:	2300      	movs	r3, #0
 800c670:	4640      	mov	r0, r8
 800c672:	4649      	mov	r1, r9
 800c674:	f7f4 fa50 	bl	8000b18 <__aeabi_dcmpeq>
 800c678:	2800      	cmp	r0, #0
 800c67a:	d1a6      	bne.n	800c5ca <_strtod_l+0x562>
 800c67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c682:	4633      	mov	r3, r6
 800c684:	465a      	mov	r2, fp
 800c686:	4620      	mov	r0, r4
 800c688:	f7ff f8cc 	bl	800b824 <__s2b>
 800c68c:	9009      	str	r0, [sp, #36]	; 0x24
 800c68e:	2800      	cmp	r0, #0
 800c690:	f43f af2a 	beq.w	800c4e8 <_strtod_l+0x480>
 800c694:	9a08      	ldr	r2, [sp, #32]
 800c696:	9b05      	ldr	r3, [sp, #20]
 800c698:	2a00      	cmp	r2, #0
 800c69a:	eba3 0307 	sub.w	r3, r3, r7
 800c69e:	bfa8      	it	ge
 800c6a0:	2300      	movge	r3, #0
 800c6a2:	930c      	str	r3, [sp, #48]	; 0x30
 800c6a4:	2500      	movs	r5, #0
 800c6a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c6aa:	9312      	str	r3, [sp, #72]	; 0x48
 800c6ac:	46ab      	mov	fp, r5
 800c6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	6859      	ldr	r1, [r3, #4]
 800c6b4:	f7ff f80e 	bl	800b6d4 <_Balloc>
 800c6b8:	9005      	str	r0, [sp, #20]
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	f43f af18 	beq.w	800c4f0 <_strtod_l+0x488>
 800c6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c2:	691a      	ldr	r2, [r3, #16]
 800c6c4:	3202      	adds	r2, #2
 800c6c6:	f103 010c 	add.w	r1, r3, #12
 800c6ca:	0092      	lsls	r2, r2, #2
 800c6cc:	300c      	adds	r0, #12
 800c6ce:	f000 fd99 	bl	800d204 <memcpy>
 800c6d2:	ec49 8b10 	vmov	d0, r8, r9
 800c6d6:	aa18      	add	r2, sp, #96	; 0x60
 800c6d8:	a917      	add	r1, sp, #92	; 0x5c
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7ff fbd6 	bl	800be8c <__d2b>
 800c6e0:	ec49 8b18 	vmov	d8, r8, r9
 800c6e4:	9016      	str	r0, [sp, #88]	; 0x58
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f43f af02 	beq.w	800c4f0 <_strtod_l+0x488>
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f7ff f930 	bl	800b954 <__i2b>
 800c6f4:	4683      	mov	fp, r0
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	f43f aefa 	beq.w	800c4f0 <_strtod_l+0x488>
 800c6fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c6fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c700:	2e00      	cmp	r6, #0
 800c702:	bfab      	itete	ge
 800c704:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c706:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c708:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c70a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c70e:	bfac      	ite	ge
 800c710:	eb06 0a03 	addge.w	sl, r6, r3
 800c714:	1b9f      	sublt	r7, r3, r6
 800c716:	9b04      	ldr	r3, [sp, #16]
 800c718:	1af6      	subs	r6, r6, r3
 800c71a:	4416      	add	r6, r2
 800c71c:	4ba0      	ldr	r3, [pc, #640]	; (800c9a0 <_strtod_l+0x938>)
 800c71e:	3e01      	subs	r6, #1
 800c720:	429e      	cmp	r6, r3
 800c722:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c726:	f280 80c4 	bge.w	800c8b2 <_strtod_l+0x84a>
 800c72a:	1b9b      	subs	r3, r3, r6
 800c72c:	2b1f      	cmp	r3, #31
 800c72e:	eba2 0203 	sub.w	r2, r2, r3
 800c732:	f04f 0101 	mov.w	r1, #1
 800c736:	f300 80b0 	bgt.w	800c89a <_strtod_l+0x832>
 800c73a:	fa01 f303 	lsl.w	r3, r1, r3
 800c73e:	930e      	str	r3, [sp, #56]	; 0x38
 800c740:	2300      	movs	r3, #0
 800c742:	930d      	str	r3, [sp, #52]	; 0x34
 800c744:	eb0a 0602 	add.w	r6, sl, r2
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	45b2      	cmp	sl, r6
 800c74c:	4417      	add	r7, r2
 800c74e:	441f      	add	r7, r3
 800c750:	4653      	mov	r3, sl
 800c752:	bfa8      	it	ge
 800c754:	4633      	movge	r3, r6
 800c756:	42bb      	cmp	r3, r7
 800c758:	bfa8      	it	ge
 800c75a:	463b      	movge	r3, r7
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	bfc2      	ittt	gt
 800c760:	1af6      	subgt	r6, r6, r3
 800c762:	1aff      	subgt	r7, r7, r3
 800c764:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	dd17      	ble.n	800c79e <_strtod_l+0x736>
 800c76e:	4659      	mov	r1, fp
 800c770:	461a      	mov	r2, r3
 800c772:	4620      	mov	r0, r4
 800c774:	f7ff f9ae 	bl	800bad4 <__pow5mult>
 800c778:	4683      	mov	fp, r0
 800c77a:	2800      	cmp	r0, #0
 800c77c:	f43f aeb8 	beq.w	800c4f0 <_strtod_l+0x488>
 800c780:	4601      	mov	r1, r0
 800c782:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c784:	4620      	mov	r0, r4
 800c786:	f7ff f8fb 	bl	800b980 <__multiply>
 800c78a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c78c:	2800      	cmp	r0, #0
 800c78e:	f43f aeaf 	beq.w	800c4f0 <_strtod_l+0x488>
 800c792:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c794:	4620      	mov	r0, r4
 800c796:	f7fe ffdd 	bl	800b754 <_Bfree>
 800c79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c79c:	9316      	str	r3, [sp, #88]	; 0x58
 800c79e:	2e00      	cmp	r6, #0
 800c7a0:	f300 808c 	bgt.w	800c8bc <_strtod_l+0x854>
 800c7a4:	9b08      	ldr	r3, [sp, #32]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dd08      	ble.n	800c7bc <_strtod_l+0x754>
 800c7aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7ac:	9905      	ldr	r1, [sp, #20]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f7ff f990 	bl	800bad4 <__pow5mult>
 800c7b4:	9005      	str	r0, [sp, #20]
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f43f ae9a 	beq.w	800c4f0 <_strtod_l+0x488>
 800c7bc:	2f00      	cmp	r7, #0
 800c7be:	dd08      	ble.n	800c7d2 <_strtod_l+0x76a>
 800c7c0:	9905      	ldr	r1, [sp, #20]
 800c7c2:	463a      	mov	r2, r7
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f7ff f9df 	bl	800bb88 <__lshift>
 800c7ca:	9005      	str	r0, [sp, #20]
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f43f ae8f 	beq.w	800c4f0 <_strtod_l+0x488>
 800c7d2:	f1ba 0f00 	cmp.w	sl, #0
 800c7d6:	dd08      	ble.n	800c7ea <_strtod_l+0x782>
 800c7d8:	4659      	mov	r1, fp
 800c7da:	4652      	mov	r2, sl
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f7ff f9d3 	bl	800bb88 <__lshift>
 800c7e2:	4683      	mov	fp, r0
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	f43f ae83 	beq.w	800c4f0 <_strtod_l+0x488>
 800c7ea:	9a05      	ldr	r2, [sp, #20]
 800c7ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f7ff fa52 	bl	800bc98 <__mdiff>
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f43f ae7a 	beq.w	800c4f0 <_strtod_l+0x488>
 800c7fc:	68c3      	ldr	r3, [r0, #12]
 800c7fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c800:	2300      	movs	r3, #0
 800c802:	60c3      	str	r3, [r0, #12]
 800c804:	4659      	mov	r1, fp
 800c806:	f7ff fa2b 	bl	800bc60 <__mcmp>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	da60      	bge.n	800c8d0 <_strtod_l+0x868>
 800c80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c810:	ea53 0308 	orrs.w	r3, r3, r8
 800c814:	f040 8084 	bne.w	800c920 <_strtod_l+0x8b8>
 800c818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d17f      	bne.n	800c920 <_strtod_l+0x8b8>
 800c820:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c824:	0d1b      	lsrs	r3, r3, #20
 800c826:	051b      	lsls	r3, r3, #20
 800c828:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c82c:	d978      	bls.n	800c920 <_strtod_l+0x8b8>
 800c82e:	696b      	ldr	r3, [r5, #20]
 800c830:	b913      	cbnz	r3, 800c838 <_strtod_l+0x7d0>
 800c832:	692b      	ldr	r3, [r5, #16]
 800c834:	2b01      	cmp	r3, #1
 800c836:	dd73      	ble.n	800c920 <_strtod_l+0x8b8>
 800c838:	4629      	mov	r1, r5
 800c83a:	2201      	movs	r2, #1
 800c83c:	4620      	mov	r0, r4
 800c83e:	f7ff f9a3 	bl	800bb88 <__lshift>
 800c842:	4659      	mov	r1, fp
 800c844:	4605      	mov	r5, r0
 800c846:	f7ff fa0b 	bl	800bc60 <__mcmp>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	dd68      	ble.n	800c920 <_strtod_l+0x8b8>
 800c84e:	9904      	ldr	r1, [sp, #16]
 800c850:	4a54      	ldr	r2, [pc, #336]	; (800c9a4 <_strtod_l+0x93c>)
 800c852:	464b      	mov	r3, r9
 800c854:	2900      	cmp	r1, #0
 800c856:	f000 8084 	beq.w	800c962 <_strtod_l+0x8fa>
 800c85a:	ea02 0109 	and.w	r1, r2, r9
 800c85e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c862:	dc7e      	bgt.n	800c962 <_strtod_l+0x8fa>
 800c864:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c868:	f77f aeb3 	ble.w	800c5d2 <_strtod_l+0x56a>
 800c86c:	4b4e      	ldr	r3, [pc, #312]	; (800c9a8 <_strtod_l+0x940>)
 800c86e:	4640      	mov	r0, r8
 800c870:	4649      	mov	r1, r9
 800c872:	2200      	movs	r2, #0
 800c874:	f7f3 fee8 	bl	8000648 <__aeabi_dmul>
 800c878:	4b4a      	ldr	r3, [pc, #296]	; (800c9a4 <_strtod_l+0x93c>)
 800c87a:	400b      	ands	r3, r1
 800c87c:	4680      	mov	r8, r0
 800c87e:	4689      	mov	r9, r1
 800c880:	2b00      	cmp	r3, #0
 800c882:	f47f ae3f 	bne.w	800c504 <_strtod_l+0x49c>
 800c886:	2322      	movs	r3, #34	; 0x22
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	e63b      	b.n	800c504 <_strtod_l+0x49c>
 800c88c:	f04f 32ff 	mov.w	r2, #4294967295
 800c890:	fa02 f303 	lsl.w	r3, r2, r3
 800c894:	ea03 0808 	and.w	r8, r3, r8
 800c898:	e6e8      	b.n	800c66c <_strtod_l+0x604>
 800c89a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c89e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c8a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c8a6:	36e2      	adds	r6, #226	; 0xe2
 800c8a8:	fa01 f306 	lsl.w	r3, r1, r6
 800c8ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c8b0:	e748      	b.n	800c744 <_strtod_l+0x6dc>
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c8ba:	e743      	b.n	800c744 <_strtod_l+0x6dc>
 800c8bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c8be:	4632      	mov	r2, r6
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f7ff f961 	bl	800bb88 <__lshift>
 800c8c6:	9016      	str	r0, [sp, #88]	; 0x58
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	f47f af6b 	bne.w	800c7a4 <_strtod_l+0x73c>
 800c8ce:	e60f      	b.n	800c4f0 <_strtod_l+0x488>
 800c8d0:	46ca      	mov	sl, r9
 800c8d2:	d171      	bne.n	800c9b8 <_strtod_l+0x950>
 800c8d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8da:	b352      	cbz	r2, 800c932 <_strtod_l+0x8ca>
 800c8dc:	4a33      	ldr	r2, [pc, #204]	; (800c9ac <_strtod_l+0x944>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d12a      	bne.n	800c938 <_strtod_l+0x8d0>
 800c8e2:	9b04      	ldr	r3, [sp, #16]
 800c8e4:	4641      	mov	r1, r8
 800c8e6:	b1fb      	cbz	r3, 800c928 <_strtod_l+0x8c0>
 800c8e8:	4b2e      	ldr	r3, [pc, #184]	; (800c9a4 <_strtod_l+0x93c>)
 800c8ea:	ea09 0303 	and.w	r3, r9, r3
 800c8ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f6:	d81a      	bhi.n	800c92e <_strtod_l+0x8c6>
 800c8f8:	0d1b      	lsrs	r3, r3, #20
 800c8fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c902:	4299      	cmp	r1, r3
 800c904:	d118      	bne.n	800c938 <_strtod_l+0x8d0>
 800c906:	4b2a      	ldr	r3, [pc, #168]	; (800c9b0 <_strtod_l+0x948>)
 800c908:	459a      	cmp	sl, r3
 800c90a:	d102      	bne.n	800c912 <_strtod_l+0x8aa>
 800c90c:	3101      	adds	r1, #1
 800c90e:	f43f adef 	beq.w	800c4f0 <_strtod_l+0x488>
 800c912:	4b24      	ldr	r3, [pc, #144]	; (800c9a4 <_strtod_l+0x93c>)
 800c914:	ea0a 0303 	and.w	r3, sl, r3
 800c918:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c91c:	f04f 0800 	mov.w	r8, #0
 800c920:	9b04      	ldr	r3, [sp, #16]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1a2      	bne.n	800c86c <_strtod_l+0x804>
 800c926:	e5ed      	b.n	800c504 <_strtod_l+0x49c>
 800c928:	f04f 33ff 	mov.w	r3, #4294967295
 800c92c:	e7e9      	b.n	800c902 <_strtod_l+0x89a>
 800c92e:	4613      	mov	r3, r2
 800c930:	e7e7      	b.n	800c902 <_strtod_l+0x89a>
 800c932:	ea53 0308 	orrs.w	r3, r3, r8
 800c936:	d08a      	beq.n	800c84e <_strtod_l+0x7e6>
 800c938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c93a:	b1e3      	cbz	r3, 800c976 <_strtod_l+0x90e>
 800c93c:	ea13 0f0a 	tst.w	r3, sl
 800c940:	d0ee      	beq.n	800c920 <_strtod_l+0x8b8>
 800c942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c944:	9a04      	ldr	r2, [sp, #16]
 800c946:	4640      	mov	r0, r8
 800c948:	4649      	mov	r1, r9
 800c94a:	b1c3      	cbz	r3, 800c97e <_strtod_l+0x916>
 800c94c:	f7ff fb6f 	bl	800c02e <sulp>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	ec51 0b18 	vmov	r0, r1, d8
 800c958:	f7f3 fcc0 	bl	80002dc <__adddf3>
 800c95c:	4680      	mov	r8, r0
 800c95e:	4689      	mov	r9, r1
 800c960:	e7de      	b.n	800c920 <_strtod_l+0x8b8>
 800c962:	4013      	ands	r3, r2
 800c964:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c968:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c96c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c970:	f04f 38ff 	mov.w	r8, #4294967295
 800c974:	e7d4      	b.n	800c920 <_strtod_l+0x8b8>
 800c976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c978:	ea13 0f08 	tst.w	r3, r8
 800c97c:	e7e0      	b.n	800c940 <_strtod_l+0x8d8>
 800c97e:	f7ff fb56 	bl	800c02e <sulp>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	ec51 0b18 	vmov	r0, r1, d8
 800c98a:	f7f3 fca5 	bl	80002d8 <__aeabi_dsub>
 800c98e:	2200      	movs	r2, #0
 800c990:	2300      	movs	r3, #0
 800c992:	4680      	mov	r8, r0
 800c994:	4689      	mov	r9, r1
 800c996:	f7f4 f8bf 	bl	8000b18 <__aeabi_dcmpeq>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d0c0      	beq.n	800c920 <_strtod_l+0x8b8>
 800c99e:	e618      	b.n	800c5d2 <_strtod_l+0x56a>
 800c9a0:	fffffc02 	.word	0xfffffc02
 800c9a4:	7ff00000 	.word	0x7ff00000
 800c9a8:	39500000 	.word	0x39500000
 800c9ac:	000fffff 	.word	0x000fffff
 800c9b0:	7fefffff 	.word	0x7fefffff
 800c9b4:	0800e290 	.word	0x0800e290
 800c9b8:	4659      	mov	r1, fp
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f7ff fac0 	bl	800bf40 <__ratio>
 800c9c0:	ec57 6b10 	vmov	r6, r7, d0
 800c9c4:	ee10 0a10 	vmov	r0, s0
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9ce:	4639      	mov	r1, r7
 800c9d0:	f7f4 f8b6 	bl	8000b40 <__aeabi_dcmple>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d071      	beq.n	800cabc <_strtod_l+0xa54>
 800c9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d17c      	bne.n	800cad8 <_strtod_l+0xa70>
 800c9de:	f1b8 0f00 	cmp.w	r8, #0
 800c9e2:	d15a      	bne.n	800ca9a <_strtod_l+0xa32>
 800c9e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d15d      	bne.n	800caa8 <_strtod_l+0xa40>
 800c9ec:	4b90      	ldr	r3, [pc, #576]	; (800cc30 <_strtod_l+0xbc8>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	f7f4 f89a 	bl	8000b2c <__aeabi_dcmplt>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d15c      	bne.n	800cab6 <_strtod_l+0xa4e>
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	4639      	mov	r1, r7
 800ca00:	4b8c      	ldr	r3, [pc, #560]	; (800cc34 <_strtod_l+0xbcc>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fe20 	bl	8000648 <__aeabi_dmul>
 800ca08:	4606      	mov	r6, r0
 800ca0a:	460f      	mov	r7, r1
 800ca0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ca10:	9606      	str	r6, [sp, #24]
 800ca12:	9307      	str	r3, [sp, #28]
 800ca14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ca1c:	4b86      	ldr	r3, [pc, #536]	; (800cc38 <_strtod_l+0xbd0>)
 800ca1e:	ea0a 0303 	and.w	r3, sl, r3
 800ca22:	930d      	str	r3, [sp, #52]	; 0x34
 800ca24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca26:	4b85      	ldr	r3, [pc, #532]	; (800cc3c <_strtod_l+0xbd4>)
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	f040 8090 	bne.w	800cb4e <_strtod_l+0xae6>
 800ca2e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ca32:	ec49 8b10 	vmov	d0, r8, r9
 800ca36:	f7ff f9b9 	bl	800bdac <__ulp>
 800ca3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca3e:	ec51 0b10 	vmov	r0, r1, d0
 800ca42:	f7f3 fe01 	bl	8000648 <__aeabi_dmul>
 800ca46:	4642      	mov	r2, r8
 800ca48:	464b      	mov	r3, r9
 800ca4a:	f7f3 fc47 	bl	80002dc <__adddf3>
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4979      	ldr	r1, [pc, #484]	; (800cc38 <_strtod_l+0xbd0>)
 800ca52:	4a7b      	ldr	r2, [pc, #492]	; (800cc40 <_strtod_l+0xbd8>)
 800ca54:	4019      	ands	r1, r3
 800ca56:	4291      	cmp	r1, r2
 800ca58:	4680      	mov	r8, r0
 800ca5a:	d944      	bls.n	800cae6 <_strtod_l+0xa7e>
 800ca5c:	ee18 2a90 	vmov	r2, s17
 800ca60:	4b78      	ldr	r3, [pc, #480]	; (800cc44 <_strtod_l+0xbdc>)
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d104      	bne.n	800ca70 <_strtod_l+0xa08>
 800ca66:	ee18 3a10 	vmov	r3, s16
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	f43f ad40 	beq.w	800c4f0 <_strtod_l+0x488>
 800ca70:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800cc44 <_strtod_l+0xbdc>
 800ca74:	f04f 38ff 	mov.w	r8, #4294967295
 800ca78:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7fe fe6a 	bl	800b754 <_Bfree>
 800ca80:	9905      	ldr	r1, [sp, #20]
 800ca82:	4620      	mov	r0, r4
 800ca84:	f7fe fe66 	bl	800b754 <_Bfree>
 800ca88:	4659      	mov	r1, fp
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f7fe fe62 	bl	800b754 <_Bfree>
 800ca90:	4629      	mov	r1, r5
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7fe fe5e 	bl	800b754 <_Bfree>
 800ca98:	e609      	b.n	800c6ae <_strtod_l+0x646>
 800ca9a:	f1b8 0f01 	cmp.w	r8, #1
 800ca9e:	d103      	bne.n	800caa8 <_strtod_l+0xa40>
 800caa0:	f1b9 0f00 	cmp.w	r9, #0
 800caa4:	f43f ad95 	beq.w	800c5d2 <_strtod_l+0x56a>
 800caa8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800cc00 <_strtod_l+0xb98>
 800caac:	4f60      	ldr	r7, [pc, #384]	; (800cc30 <_strtod_l+0xbc8>)
 800caae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cab2:	2600      	movs	r6, #0
 800cab4:	e7ae      	b.n	800ca14 <_strtod_l+0x9ac>
 800cab6:	4f5f      	ldr	r7, [pc, #380]	; (800cc34 <_strtod_l+0xbcc>)
 800cab8:	2600      	movs	r6, #0
 800caba:	e7a7      	b.n	800ca0c <_strtod_l+0x9a4>
 800cabc:	4b5d      	ldr	r3, [pc, #372]	; (800cc34 <_strtod_l+0xbcc>)
 800cabe:	4630      	mov	r0, r6
 800cac0:	4639      	mov	r1, r7
 800cac2:	2200      	movs	r2, #0
 800cac4:	f7f3 fdc0 	bl	8000648 <__aeabi_dmul>
 800cac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caca:	4606      	mov	r6, r0
 800cacc:	460f      	mov	r7, r1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d09c      	beq.n	800ca0c <_strtod_l+0x9a4>
 800cad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cad6:	e79d      	b.n	800ca14 <_strtod_l+0x9ac>
 800cad8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800cc08 <_strtod_l+0xba0>
 800cadc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cae0:	ec57 6b17 	vmov	r6, r7, d7
 800cae4:	e796      	b.n	800ca14 <_strtod_l+0x9ac>
 800cae6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800caea:	9b04      	ldr	r3, [sp, #16]
 800caec:	46ca      	mov	sl, r9
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1c2      	bne.n	800ca78 <_strtod_l+0xa10>
 800caf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800caf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caf8:	0d1b      	lsrs	r3, r3, #20
 800cafa:	051b      	lsls	r3, r3, #20
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d1bb      	bne.n	800ca78 <_strtod_l+0xa10>
 800cb00:	4630      	mov	r0, r6
 800cb02:	4639      	mov	r1, r7
 800cb04:	f7f4 f900 	bl	8000d08 <__aeabi_d2lz>
 800cb08:	f7f3 fd70 	bl	80005ec <__aeabi_l2d>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4630      	mov	r0, r6
 800cb12:	4639      	mov	r1, r7
 800cb14:	f7f3 fbe0 	bl	80002d8 <__aeabi_dsub>
 800cb18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb1e:	ea43 0308 	orr.w	r3, r3, r8
 800cb22:	4313      	orrs	r3, r2
 800cb24:	4606      	mov	r6, r0
 800cb26:	460f      	mov	r7, r1
 800cb28:	d054      	beq.n	800cbd4 <_strtod_l+0xb6c>
 800cb2a:	a339      	add	r3, pc, #228	; (adr r3, 800cc10 <_strtod_l+0xba8>)
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	f7f3 fffc 	bl	8000b2c <__aeabi_dcmplt>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	f47f ace5 	bne.w	800c504 <_strtod_l+0x49c>
 800cb3a:	a337      	add	r3, pc, #220	; (adr r3, 800cc18 <_strtod_l+0xbb0>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	4630      	mov	r0, r6
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f4 f810 	bl	8000b68 <__aeabi_dcmpgt>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d095      	beq.n	800ca78 <_strtod_l+0xa10>
 800cb4c:	e4da      	b.n	800c504 <_strtod_l+0x49c>
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	b333      	cbz	r3, 800cba0 <_strtod_l+0xb38>
 800cb52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb58:	d822      	bhi.n	800cba0 <_strtod_l+0xb38>
 800cb5a:	a331      	add	r3, pc, #196	; (adr r3, 800cc20 <_strtod_l+0xbb8>)
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 ffec 	bl	8000b40 <__aeabi_dcmple>
 800cb68:	b1a0      	cbz	r0, 800cb94 <_strtod_l+0xb2c>
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7f4 f843 	bl	8000bf8 <__aeabi_d2uiz>
 800cb72:	2801      	cmp	r0, #1
 800cb74:	bf38      	it	cc
 800cb76:	2001      	movcc	r0, #1
 800cb78:	f7f3 fcec 	bl	8000554 <__aeabi_ui2d>
 800cb7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7e:	4606      	mov	r6, r0
 800cb80:	460f      	mov	r7, r1
 800cb82:	bb23      	cbnz	r3, 800cbce <_strtod_l+0xb66>
 800cb84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb88:	9010      	str	r0, [sp, #64]	; 0x40
 800cb8a:	9311      	str	r3, [sp, #68]	; 0x44
 800cb8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cb9c:	1a9b      	subs	r3, r3, r2
 800cb9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cba0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cba4:	eeb0 0a48 	vmov.f32	s0, s16
 800cba8:	eef0 0a68 	vmov.f32	s1, s17
 800cbac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cbb0:	f7ff f8fc 	bl	800bdac <__ulp>
 800cbb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cbb8:	ec53 2b10 	vmov	r2, r3, d0
 800cbbc:	f7f3 fd44 	bl	8000648 <__aeabi_dmul>
 800cbc0:	ec53 2b18 	vmov	r2, r3, d8
 800cbc4:	f7f3 fb8a 	bl	80002dc <__adddf3>
 800cbc8:	4680      	mov	r8, r0
 800cbca:	4689      	mov	r9, r1
 800cbcc:	e78d      	b.n	800caea <_strtod_l+0xa82>
 800cbce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cbd2:	e7db      	b.n	800cb8c <_strtod_l+0xb24>
 800cbd4:	a314      	add	r3, pc, #80	; (adr r3, 800cc28 <_strtod_l+0xbc0>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 ffa7 	bl	8000b2c <__aeabi_dcmplt>
 800cbde:	e7b3      	b.n	800cb48 <_strtod_l+0xae0>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	930a      	str	r3, [sp, #40]	; 0x28
 800cbe4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cbe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	f7ff ba7c 	b.w	800c0e6 <_strtod_l+0x7e>
 800cbee:	2a65      	cmp	r2, #101	; 0x65
 800cbf0:	f43f ab75 	beq.w	800c2de <_strtod_l+0x276>
 800cbf4:	2a45      	cmp	r2, #69	; 0x45
 800cbf6:	f43f ab72 	beq.w	800c2de <_strtod_l+0x276>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	f7ff bbaa 	b.w	800c354 <_strtod_l+0x2ec>
 800cc00:	00000000 	.word	0x00000000
 800cc04:	bff00000 	.word	0xbff00000
 800cc08:	00000000 	.word	0x00000000
 800cc0c:	3ff00000 	.word	0x3ff00000
 800cc10:	94a03595 	.word	0x94a03595
 800cc14:	3fdfffff 	.word	0x3fdfffff
 800cc18:	35afe535 	.word	0x35afe535
 800cc1c:	3fe00000 	.word	0x3fe00000
 800cc20:	ffc00000 	.word	0xffc00000
 800cc24:	41dfffff 	.word	0x41dfffff
 800cc28:	94a03595 	.word	0x94a03595
 800cc2c:	3fcfffff 	.word	0x3fcfffff
 800cc30:	3ff00000 	.word	0x3ff00000
 800cc34:	3fe00000 	.word	0x3fe00000
 800cc38:	7ff00000 	.word	0x7ff00000
 800cc3c:	7fe00000 	.word	0x7fe00000
 800cc40:	7c9fffff 	.word	0x7c9fffff
 800cc44:	7fefffff 	.word	0x7fefffff

0800cc48 <_strtod_r>:
 800cc48:	4b01      	ldr	r3, [pc, #4]	; (800cc50 <_strtod_r+0x8>)
 800cc4a:	f7ff ba0d 	b.w	800c068 <_strtod_l>
 800cc4e:	bf00      	nop
 800cc50:	2000009c 	.word	0x2000009c

0800cc54 <_strtol_l.constprop.0>:
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc5a:	d001      	beq.n	800cc60 <_strtol_l.constprop.0+0xc>
 800cc5c:	2b24      	cmp	r3, #36	; 0x24
 800cc5e:	d906      	bls.n	800cc6e <_strtol_l.constprop.0+0x1a>
 800cc60:	f7fd fd6e 	bl	800a740 <__errno>
 800cc64:	2316      	movs	r3, #22
 800cc66:	6003      	str	r3, [r0, #0]
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cd54 <_strtol_l.constprop.0+0x100>
 800cc72:	460d      	mov	r5, r1
 800cc74:	462e      	mov	r6, r5
 800cc76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc7a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cc7e:	f017 0708 	ands.w	r7, r7, #8
 800cc82:	d1f7      	bne.n	800cc74 <_strtol_l.constprop.0+0x20>
 800cc84:	2c2d      	cmp	r4, #45	; 0x2d
 800cc86:	d132      	bne.n	800ccee <_strtol_l.constprop.0+0x9a>
 800cc88:	782c      	ldrb	r4, [r5, #0]
 800cc8a:	2701      	movs	r7, #1
 800cc8c:	1cb5      	adds	r5, r6, #2
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d05b      	beq.n	800cd4a <_strtol_l.constprop.0+0xf6>
 800cc92:	2b10      	cmp	r3, #16
 800cc94:	d109      	bne.n	800ccaa <_strtol_l.constprop.0+0x56>
 800cc96:	2c30      	cmp	r4, #48	; 0x30
 800cc98:	d107      	bne.n	800ccaa <_strtol_l.constprop.0+0x56>
 800cc9a:	782c      	ldrb	r4, [r5, #0]
 800cc9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cca0:	2c58      	cmp	r4, #88	; 0x58
 800cca2:	d14d      	bne.n	800cd40 <_strtol_l.constprop.0+0xec>
 800cca4:	786c      	ldrb	r4, [r5, #1]
 800cca6:	2310      	movs	r3, #16
 800cca8:	3502      	adds	r5, #2
 800ccaa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ccae:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccb2:	f04f 0e00 	mov.w	lr, #0
 800ccb6:	fbb8 f9f3 	udiv	r9, r8, r3
 800ccba:	4676      	mov	r6, lr
 800ccbc:	fb03 8a19 	mls	sl, r3, r9, r8
 800ccc0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ccc4:	f1bc 0f09 	cmp.w	ip, #9
 800ccc8:	d816      	bhi.n	800ccf8 <_strtol_l.constprop.0+0xa4>
 800ccca:	4664      	mov	r4, ip
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	dd24      	ble.n	800cd1a <_strtol_l.constprop.0+0xc6>
 800ccd0:	f1be 3fff 	cmp.w	lr, #4294967295
 800ccd4:	d008      	beq.n	800cce8 <_strtol_l.constprop.0+0x94>
 800ccd6:	45b1      	cmp	r9, r6
 800ccd8:	d31c      	bcc.n	800cd14 <_strtol_l.constprop.0+0xc0>
 800ccda:	d101      	bne.n	800cce0 <_strtol_l.constprop.0+0x8c>
 800ccdc:	45a2      	cmp	sl, r4
 800ccde:	db19      	blt.n	800cd14 <_strtol_l.constprop.0+0xc0>
 800cce0:	fb06 4603 	mla	r6, r6, r3, r4
 800cce4:	f04f 0e01 	mov.w	lr, #1
 800cce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccec:	e7e8      	b.n	800ccc0 <_strtol_l.constprop.0+0x6c>
 800ccee:	2c2b      	cmp	r4, #43	; 0x2b
 800ccf0:	bf04      	itt	eq
 800ccf2:	782c      	ldrbeq	r4, [r5, #0]
 800ccf4:	1cb5      	addeq	r5, r6, #2
 800ccf6:	e7ca      	b.n	800cc8e <_strtol_l.constprop.0+0x3a>
 800ccf8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ccfc:	f1bc 0f19 	cmp.w	ip, #25
 800cd00:	d801      	bhi.n	800cd06 <_strtol_l.constprop.0+0xb2>
 800cd02:	3c37      	subs	r4, #55	; 0x37
 800cd04:	e7e2      	b.n	800cccc <_strtol_l.constprop.0+0x78>
 800cd06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cd0a:	f1bc 0f19 	cmp.w	ip, #25
 800cd0e:	d804      	bhi.n	800cd1a <_strtol_l.constprop.0+0xc6>
 800cd10:	3c57      	subs	r4, #87	; 0x57
 800cd12:	e7db      	b.n	800cccc <_strtol_l.constprop.0+0x78>
 800cd14:	f04f 3eff 	mov.w	lr, #4294967295
 800cd18:	e7e6      	b.n	800cce8 <_strtol_l.constprop.0+0x94>
 800cd1a:	f1be 3fff 	cmp.w	lr, #4294967295
 800cd1e:	d105      	bne.n	800cd2c <_strtol_l.constprop.0+0xd8>
 800cd20:	2322      	movs	r3, #34	; 0x22
 800cd22:	6003      	str	r3, [r0, #0]
 800cd24:	4646      	mov	r6, r8
 800cd26:	b942      	cbnz	r2, 800cd3a <_strtol_l.constprop.0+0xe6>
 800cd28:	4630      	mov	r0, r6
 800cd2a:	e79e      	b.n	800cc6a <_strtol_l.constprop.0+0x16>
 800cd2c:	b107      	cbz	r7, 800cd30 <_strtol_l.constprop.0+0xdc>
 800cd2e:	4276      	negs	r6, r6
 800cd30:	2a00      	cmp	r2, #0
 800cd32:	d0f9      	beq.n	800cd28 <_strtol_l.constprop.0+0xd4>
 800cd34:	f1be 0f00 	cmp.w	lr, #0
 800cd38:	d000      	beq.n	800cd3c <_strtol_l.constprop.0+0xe8>
 800cd3a:	1e69      	subs	r1, r5, #1
 800cd3c:	6011      	str	r1, [r2, #0]
 800cd3e:	e7f3      	b.n	800cd28 <_strtol_l.constprop.0+0xd4>
 800cd40:	2430      	movs	r4, #48	; 0x30
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1b1      	bne.n	800ccaa <_strtol_l.constprop.0+0x56>
 800cd46:	2308      	movs	r3, #8
 800cd48:	e7af      	b.n	800ccaa <_strtol_l.constprop.0+0x56>
 800cd4a:	2c30      	cmp	r4, #48	; 0x30
 800cd4c:	d0a5      	beq.n	800cc9a <_strtol_l.constprop.0+0x46>
 800cd4e:	230a      	movs	r3, #10
 800cd50:	e7ab      	b.n	800ccaa <_strtol_l.constprop.0+0x56>
 800cd52:	bf00      	nop
 800cd54:	0800e2b9 	.word	0x0800e2b9

0800cd58 <_strtol_r>:
 800cd58:	f7ff bf7c 	b.w	800cc54 <_strtol_l.constprop.0>

0800cd5c <__ssputs_r>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	688e      	ldr	r6, [r1, #8]
 800cd62:	461f      	mov	r7, r3
 800cd64:	42be      	cmp	r6, r7
 800cd66:	680b      	ldr	r3, [r1, #0]
 800cd68:	4682      	mov	sl, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	4690      	mov	r8, r2
 800cd6e:	d82c      	bhi.n	800cdca <__ssputs_r+0x6e>
 800cd70:	898a      	ldrh	r2, [r1, #12]
 800cd72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd76:	d026      	beq.n	800cdc6 <__ssputs_r+0x6a>
 800cd78:	6965      	ldr	r5, [r4, #20]
 800cd7a:	6909      	ldr	r1, [r1, #16]
 800cd7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd80:	eba3 0901 	sub.w	r9, r3, r1
 800cd84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd88:	1c7b      	adds	r3, r7, #1
 800cd8a:	444b      	add	r3, r9
 800cd8c:	106d      	asrs	r5, r5, #1
 800cd8e:	429d      	cmp	r5, r3
 800cd90:	bf38      	it	cc
 800cd92:	461d      	movcc	r5, r3
 800cd94:	0553      	lsls	r3, r2, #21
 800cd96:	d527      	bpl.n	800cde8 <__ssputs_r+0x8c>
 800cd98:	4629      	mov	r1, r5
 800cd9a:	f7fe fc0f 	bl	800b5bc <_malloc_r>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	b360      	cbz	r0, 800cdfc <__ssputs_r+0xa0>
 800cda2:	6921      	ldr	r1, [r4, #16]
 800cda4:	464a      	mov	r2, r9
 800cda6:	f000 fa2d 	bl	800d204 <memcpy>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb4:	81a3      	strh	r3, [r4, #12]
 800cdb6:	6126      	str	r6, [r4, #16]
 800cdb8:	6165      	str	r5, [r4, #20]
 800cdba:	444e      	add	r6, r9
 800cdbc:	eba5 0509 	sub.w	r5, r5, r9
 800cdc0:	6026      	str	r6, [r4, #0]
 800cdc2:	60a5      	str	r5, [r4, #8]
 800cdc4:	463e      	mov	r6, r7
 800cdc6:	42be      	cmp	r6, r7
 800cdc8:	d900      	bls.n	800cdcc <__ssputs_r+0x70>
 800cdca:	463e      	mov	r6, r7
 800cdcc:	6820      	ldr	r0, [r4, #0]
 800cdce:	4632      	mov	r2, r6
 800cdd0:	4641      	mov	r1, r8
 800cdd2:	f000 f9db 	bl	800d18c <memmove>
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	1b9b      	subs	r3, r3, r6
 800cdda:	60a3      	str	r3, [r4, #8]
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	4433      	add	r3, r6
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	2000      	movs	r0, #0
 800cde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde8:	462a      	mov	r2, r5
 800cdea:	f000 fda6 	bl	800d93a <_realloc_r>
 800cdee:	4606      	mov	r6, r0
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d1e0      	bne.n	800cdb6 <__ssputs_r+0x5a>
 800cdf4:	6921      	ldr	r1, [r4, #16]
 800cdf6:	4650      	mov	r0, sl
 800cdf8:	f7fe fb6c 	bl	800b4d4 <_free_r>
 800cdfc:	230c      	movs	r3, #12
 800cdfe:	f8ca 3000 	str.w	r3, [sl]
 800ce02:	89a3      	ldrh	r3, [r4, #12]
 800ce04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce08:	81a3      	strh	r3, [r4, #12]
 800ce0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0e:	e7e9      	b.n	800cde4 <__ssputs_r+0x88>

0800ce10 <_svfiprintf_r>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	4698      	mov	r8, r3
 800ce16:	898b      	ldrh	r3, [r1, #12]
 800ce18:	061b      	lsls	r3, r3, #24
 800ce1a:	b09d      	sub	sp, #116	; 0x74
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	460d      	mov	r5, r1
 800ce20:	4614      	mov	r4, r2
 800ce22:	d50e      	bpl.n	800ce42 <_svfiprintf_r+0x32>
 800ce24:	690b      	ldr	r3, [r1, #16]
 800ce26:	b963      	cbnz	r3, 800ce42 <_svfiprintf_r+0x32>
 800ce28:	2140      	movs	r1, #64	; 0x40
 800ce2a:	f7fe fbc7 	bl	800b5bc <_malloc_r>
 800ce2e:	6028      	str	r0, [r5, #0]
 800ce30:	6128      	str	r0, [r5, #16]
 800ce32:	b920      	cbnz	r0, 800ce3e <_svfiprintf_r+0x2e>
 800ce34:	230c      	movs	r3, #12
 800ce36:	603b      	str	r3, [r7, #0]
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	e0d0      	b.n	800cfe0 <_svfiprintf_r+0x1d0>
 800ce3e:	2340      	movs	r3, #64	; 0x40
 800ce40:	616b      	str	r3, [r5, #20]
 800ce42:	2300      	movs	r3, #0
 800ce44:	9309      	str	r3, [sp, #36]	; 0x24
 800ce46:	2320      	movs	r3, #32
 800ce48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce50:	2330      	movs	r3, #48	; 0x30
 800ce52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cff8 <_svfiprintf_r+0x1e8>
 800ce56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce5a:	f04f 0901 	mov.w	r9, #1
 800ce5e:	4623      	mov	r3, r4
 800ce60:	469a      	mov	sl, r3
 800ce62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce66:	b10a      	cbz	r2, 800ce6c <_svfiprintf_r+0x5c>
 800ce68:	2a25      	cmp	r2, #37	; 0x25
 800ce6a:	d1f9      	bne.n	800ce60 <_svfiprintf_r+0x50>
 800ce6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce70:	d00b      	beq.n	800ce8a <_svfiprintf_r+0x7a>
 800ce72:	465b      	mov	r3, fp
 800ce74:	4622      	mov	r2, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	4638      	mov	r0, r7
 800ce7a:	f7ff ff6f 	bl	800cd5c <__ssputs_r>
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f000 80a9 	beq.w	800cfd6 <_svfiprintf_r+0x1c6>
 800ce84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce86:	445a      	add	r2, fp
 800ce88:	9209      	str	r2, [sp, #36]	; 0x24
 800ce8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 80a1 	beq.w	800cfd6 <_svfiprintf_r+0x1c6>
 800ce94:	2300      	movs	r3, #0
 800ce96:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce9e:	f10a 0a01 	add.w	sl, sl, #1
 800cea2:	9304      	str	r3, [sp, #16]
 800cea4:	9307      	str	r3, [sp, #28]
 800cea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceaa:	931a      	str	r3, [sp, #104]	; 0x68
 800ceac:	4654      	mov	r4, sl
 800ceae:	2205      	movs	r2, #5
 800ceb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb4:	4850      	ldr	r0, [pc, #320]	; (800cff8 <_svfiprintf_r+0x1e8>)
 800ceb6:	f7f3 f9b3 	bl	8000220 <memchr>
 800ceba:	9a04      	ldr	r2, [sp, #16]
 800cebc:	b9d8      	cbnz	r0, 800cef6 <_svfiprintf_r+0xe6>
 800cebe:	06d0      	lsls	r0, r2, #27
 800cec0:	bf44      	itt	mi
 800cec2:	2320      	movmi	r3, #32
 800cec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec8:	0711      	lsls	r1, r2, #28
 800ceca:	bf44      	itt	mi
 800cecc:	232b      	movmi	r3, #43	; 0x2b
 800cece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ced2:	f89a 3000 	ldrb.w	r3, [sl]
 800ced6:	2b2a      	cmp	r3, #42	; 0x2a
 800ced8:	d015      	beq.n	800cf06 <_svfiprintf_r+0xf6>
 800ceda:	9a07      	ldr	r2, [sp, #28]
 800cedc:	4654      	mov	r4, sl
 800cede:	2000      	movs	r0, #0
 800cee0:	f04f 0c0a 	mov.w	ip, #10
 800cee4:	4621      	mov	r1, r4
 800cee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceea:	3b30      	subs	r3, #48	; 0x30
 800ceec:	2b09      	cmp	r3, #9
 800ceee:	d94d      	bls.n	800cf8c <_svfiprintf_r+0x17c>
 800cef0:	b1b0      	cbz	r0, 800cf20 <_svfiprintf_r+0x110>
 800cef2:	9207      	str	r2, [sp, #28]
 800cef4:	e014      	b.n	800cf20 <_svfiprintf_r+0x110>
 800cef6:	eba0 0308 	sub.w	r3, r0, r8
 800cefa:	fa09 f303 	lsl.w	r3, r9, r3
 800cefe:	4313      	orrs	r3, r2
 800cf00:	9304      	str	r3, [sp, #16]
 800cf02:	46a2      	mov	sl, r4
 800cf04:	e7d2      	b.n	800ceac <_svfiprintf_r+0x9c>
 800cf06:	9b03      	ldr	r3, [sp, #12]
 800cf08:	1d19      	adds	r1, r3, #4
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	9103      	str	r1, [sp, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	bfbb      	ittet	lt
 800cf12:	425b      	neglt	r3, r3
 800cf14:	f042 0202 	orrlt.w	r2, r2, #2
 800cf18:	9307      	strge	r3, [sp, #28]
 800cf1a:	9307      	strlt	r3, [sp, #28]
 800cf1c:	bfb8      	it	lt
 800cf1e:	9204      	strlt	r2, [sp, #16]
 800cf20:	7823      	ldrb	r3, [r4, #0]
 800cf22:	2b2e      	cmp	r3, #46	; 0x2e
 800cf24:	d10c      	bne.n	800cf40 <_svfiprintf_r+0x130>
 800cf26:	7863      	ldrb	r3, [r4, #1]
 800cf28:	2b2a      	cmp	r3, #42	; 0x2a
 800cf2a:	d134      	bne.n	800cf96 <_svfiprintf_r+0x186>
 800cf2c:	9b03      	ldr	r3, [sp, #12]
 800cf2e:	1d1a      	adds	r2, r3, #4
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	9203      	str	r2, [sp, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	bfb8      	it	lt
 800cf38:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf3c:	3402      	adds	r4, #2
 800cf3e:	9305      	str	r3, [sp, #20]
 800cf40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d008 <_svfiprintf_r+0x1f8>
 800cf44:	7821      	ldrb	r1, [r4, #0]
 800cf46:	2203      	movs	r2, #3
 800cf48:	4650      	mov	r0, sl
 800cf4a:	f7f3 f969 	bl	8000220 <memchr>
 800cf4e:	b138      	cbz	r0, 800cf60 <_svfiprintf_r+0x150>
 800cf50:	9b04      	ldr	r3, [sp, #16]
 800cf52:	eba0 000a 	sub.w	r0, r0, sl
 800cf56:	2240      	movs	r2, #64	; 0x40
 800cf58:	4082      	lsls	r2, r0
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	3401      	adds	r4, #1
 800cf5e:	9304      	str	r3, [sp, #16]
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	4825      	ldr	r0, [pc, #148]	; (800cffc <_svfiprintf_r+0x1ec>)
 800cf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf6a:	2206      	movs	r2, #6
 800cf6c:	f7f3 f958 	bl	8000220 <memchr>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d038      	beq.n	800cfe6 <_svfiprintf_r+0x1d6>
 800cf74:	4b22      	ldr	r3, [pc, #136]	; (800d000 <_svfiprintf_r+0x1f0>)
 800cf76:	bb1b      	cbnz	r3, 800cfc0 <_svfiprintf_r+0x1b0>
 800cf78:	9b03      	ldr	r3, [sp, #12]
 800cf7a:	3307      	adds	r3, #7
 800cf7c:	f023 0307 	bic.w	r3, r3, #7
 800cf80:	3308      	adds	r3, #8
 800cf82:	9303      	str	r3, [sp, #12]
 800cf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf86:	4433      	add	r3, r6
 800cf88:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8a:	e768      	b.n	800ce5e <_svfiprintf_r+0x4e>
 800cf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf90:	460c      	mov	r4, r1
 800cf92:	2001      	movs	r0, #1
 800cf94:	e7a6      	b.n	800cee4 <_svfiprintf_r+0xd4>
 800cf96:	2300      	movs	r3, #0
 800cf98:	3401      	adds	r4, #1
 800cf9a:	9305      	str	r3, [sp, #20]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	f04f 0c0a 	mov.w	ip, #10
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfa8:	3a30      	subs	r2, #48	; 0x30
 800cfaa:	2a09      	cmp	r2, #9
 800cfac:	d903      	bls.n	800cfb6 <_svfiprintf_r+0x1a6>
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0c6      	beq.n	800cf40 <_svfiprintf_r+0x130>
 800cfb2:	9105      	str	r1, [sp, #20]
 800cfb4:	e7c4      	b.n	800cf40 <_svfiprintf_r+0x130>
 800cfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfba:	4604      	mov	r4, r0
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e7f0      	b.n	800cfa2 <_svfiprintf_r+0x192>
 800cfc0:	ab03      	add	r3, sp, #12
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	4b0f      	ldr	r3, [pc, #60]	; (800d004 <_svfiprintf_r+0x1f4>)
 800cfc8:	a904      	add	r1, sp, #16
 800cfca:	4638      	mov	r0, r7
 800cfcc:	f7fc fc7c 	bl	80098c8 <_printf_float>
 800cfd0:	1c42      	adds	r2, r0, #1
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	d1d6      	bne.n	800cf84 <_svfiprintf_r+0x174>
 800cfd6:	89ab      	ldrh	r3, [r5, #12]
 800cfd8:	065b      	lsls	r3, r3, #25
 800cfda:	f53f af2d 	bmi.w	800ce38 <_svfiprintf_r+0x28>
 800cfde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe0:	b01d      	add	sp, #116	; 0x74
 800cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe6:	ab03      	add	r3, sp, #12
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4b05      	ldr	r3, [pc, #20]	; (800d004 <_svfiprintf_r+0x1f4>)
 800cfee:	a904      	add	r1, sp, #16
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7fc ff0d 	bl	8009e10 <_printf_i>
 800cff6:	e7eb      	b.n	800cfd0 <_svfiprintf_r+0x1c0>
 800cff8:	0800e3b9 	.word	0x0800e3b9
 800cffc:	0800e3c3 	.word	0x0800e3c3
 800d000:	080098c9 	.word	0x080098c9
 800d004:	0800cd5d 	.word	0x0800cd5d
 800d008:	0800e3bf 	.word	0x0800e3bf

0800d00c <__sflush_r>:
 800d00c:	898a      	ldrh	r2, [r1, #12]
 800d00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d012:	4605      	mov	r5, r0
 800d014:	0710      	lsls	r0, r2, #28
 800d016:	460c      	mov	r4, r1
 800d018:	d458      	bmi.n	800d0cc <__sflush_r+0xc0>
 800d01a:	684b      	ldr	r3, [r1, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dc05      	bgt.n	800d02c <__sflush_r+0x20>
 800d020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d022:	2b00      	cmp	r3, #0
 800d024:	dc02      	bgt.n	800d02c <__sflush_r+0x20>
 800d026:	2000      	movs	r0, #0
 800d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d02e:	2e00      	cmp	r6, #0
 800d030:	d0f9      	beq.n	800d026 <__sflush_r+0x1a>
 800d032:	2300      	movs	r3, #0
 800d034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d038:	682f      	ldr	r7, [r5, #0]
 800d03a:	6a21      	ldr	r1, [r4, #32]
 800d03c:	602b      	str	r3, [r5, #0]
 800d03e:	d032      	beq.n	800d0a6 <__sflush_r+0x9a>
 800d040:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d042:	89a3      	ldrh	r3, [r4, #12]
 800d044:	075a      	lsls	r2, r3, #29
 800d046:	d505      	bpl.n	800d054 <__sflush_r+0x48>
 800d048:	6863      	ldr	r3, [r4, #4]
 800d04a:	1ac0      	subs	r0, r0, r3
 800d04c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d04e:	b10b      	cbz	r3, 800d054 <__sflush_r+0x48>
 800d050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d052:	1ac0      	subs	r0, r0, r3
 800d054:	2300      	movs	r3, #0
 800d056:	4602      	mov	r2, r0
 800d058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d05a:	6a21      	ldr	r1, [r4, #32]
 800d05c:	4628      	mov	r0, r5
 800d05e:	47b0      	blx	r6
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	d106      	bne.n	800d074 <__sflush_r+0x68>
 800d066:	6829      	ldr	r1, [r5, #0]
 800d068:	291d      	cmp	r1, #29
 800d06a:	d82b      	bhi.n	800d0c4 <__sflush_r+0xb8>
 800d06c:	4a29      	ldr	r2, [pc, #164]	; (800d114 <__sflush_r+0x108>)
 800d06e:	410a      	asrs	r2, r1
 800d070:	07d6      	lsls	r6, r2, #31
 800d072:	d427      	bmi.n	800d0c4 <__sflush_r+0xb8>
 800d074:	2200      	movs	r2, #0
 800d076:	6062      	str	r2, [r4, #4]
 800d078:	04d9      	lsls	r1, r3, #19
 800d07a:	6922      	ldr	r2, [r4, #16]
 800d07c:	6022      	str	r2, [r4, #0]
 800d07e:	d504      	bpl.n	800d08a <__sflush_r+0x7e>
 800d080:	1c42      	adds	r2, r0, #1
 800d082:	d101      	bne.n	800d088 <__sflush_r+0x7c>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b903      	cbnz	r3, 800d08a <__sflush_r+0x7e>
 800d088:	6560      	str	r0, [r4, #84]	; 0x54
 800d08a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d08c:	602f      	str	r7, [r5, #0]
 800d08e:	2900      	cmp	r1, #0
 800d090:	d0c9      	beq.n	800d026 <__sflush_r+0x1a>
 800d092:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d096:	4299      	cmp	r1, r3
 800d098:	d002      	beq.n	800d0a0 <__sflush_r+0x94>
 800d09a:	4628      	mov	r0, r5
 800d09c:	f7fe fa1a 	bl	800b4d4 <_free_r>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	6360      	str	r0, [r4, #52]	; 0x34
 800d0a4:	e7c0      	b.n	800d028 <__sflush_r+0x1c>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	47b0      	blx	r6
 800d0ac:	1c41      	adds	r1, r0, #1
 800d0ae:	d1c8      	bne.n	800d042 <__sflush_r+0x36>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0c5      	beq.n	800d042 <__sflush_r+0x36>
 800d0b6:	2b1d      	cmp	r3, #29
 800d0b8:	d001      	beq.n	800d0be <__sflush_r+0xb2>
 800d0ba:	2b16      	cmp	r3, #22
 800d0bc:	d101      	bne.n	800d0c2 <__sflush_r+0xb6>
 800d0be:	602f      	str	r7, [r5, #0]
 800d0c0:	e7b1      	b.n	800d026 <__sflush_r+0x1a>
 800d0c2:	89a3      	ldrh	r3, [r4, #12]
 800d0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c8:	81a3      	strh	r3, [r4, #12]
 800d0ca:	e7ad      	b.n	800d028 <__sflush_r+0x1c>
 800d0cc:	690f      	ldr	r7, [r1, #16]
 800d0ce:	2f00      	cmp	r7, #0
 800d0d0:	d0a9      	beq.n	800d026 <__sflush_r+0x1a>
 800d0d2:	0793      	lsls	r3, r2, #30
 800d0d4:	680e      	ldr	r6, [r1, #0]
 800d0d6:	bf08      	it	eq
 800d0d8:	694b      	ldreq	r3, [r1, #20]
 800d0da:	600f      	str	r7, [r1, #0]
 800d0dc:	bf18      	it	ne
 800d0de:	2300      	movne	r3, #0
 800d0e0:	eba6 0807 	sub.w	r8, r6, r7
 800d0e4:	608b      	str	r3, [r1, #8]
 800d0e6:	f1b8 0f00 	cmp.w	r8, #0
 800d0ea:	dd9c      	ble.n	800d026 <__sflush_r+0x1a>
 800d0ec:	6a21      	ldr	r1, [r4, #32]
 800d0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0f0:	4643      	mov	r3, r8
 800d0f2:	463a      	mov	r2, r7
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	47b0      	blx	r6
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	dc06      	bgt.n	800d10a <__sflush_r+0xfe>
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d102:	81a3      	strh	r3, [r4, #12]
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	e78e      	b.n	800d028 <__sflush_r+0x1c>
 800d10a:	4407      	add	r7, r0
 800d10c:	eba8 0800 	sub.w	r8, r8, r0
 800d110:	e7e9      	b.n	800d0e6 <__sflush_r+0xda>
 800d112:	bf00      	nop
 800d114:	dfbffffe 	.word	0xdfbffffe

0800d118 <_fflush_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	690b      	ldr	r3, [r1, #16]
 800d11c:	4605      	mov	r5, r0
 800d11e:	460c      	mov	r4, r1
 800d120:	b913      	cbnz	r3, 800d128 <_fflush_r+0x10>
 800d122:	2500      	movs	r5, #0
 800d124:	4628      	mov	r0, r5
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	b118      	cbz	r0, 800d132 <_fflush_r+0x1a>
 800d12a:	6a03      	ldr	r3, [r0, #32]
 800d12c:	b90b      	cbnz	r3, 800d132 <_fflush_r+0x1a>
 800d12e:	f7fd fa1b 	bl	800a568 <__sinit>
 800d132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0f3      	beq.n	800d122 <_fflush_r+0xa>
 800d13a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d13c:	07d0      	lsls	r0, r2, #31
 800d13e:	d404      	bmi.n	800d14a <_fflush_r+0x32>
 800d140:	0599      	lsls	r1, r3, #22
 800d142:	d402      	bmi.n	800d14a <_fflush_r+0x32>
 800d144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d146:	f7fd fb25 	bl	800a794 <__retarget_lock_acquire_recursive>
 800d14a:	4628      	mov	r0, r5
 800d14c:	4621      	mov	r1, r4
 800d14e:	f7ff ff5d 	bl	800d00c <__sflush_r>
 800d152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d154:	07da      	lsls	r2, r3, #31
 800d156:	4605      	mov	r5, r0
 800d158:	d4e4      	bmi.n	800d124 <_fflush_r+0xc>
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	059b      	lsls	r3, r3, #22
 800d15e:	d4e1      	bmi.n	800d124 <_fflush_r+0xc>
 800d160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d162:	f7fd fb18 	bl	800a796 <__retarget_lock_release_recursive>
 800d166:	e7dd      	b.n	800d124 <_fflush_r+0xc>

0800d168 <fiprintf>:
 800d168:	b40e      	push	{r1, r2, r3}
 800d16a:	b503      	push	{r0, r1, lr}
 800d16c:	4601      	mov	r1, r0
 800d16e:	ab03      	add	r3, sp, #12
 800d170:	4805      	ldr	r0, [pc, #20]	; (800d188 <fiprintf+0x20>)
 800d172:	f853 2b04 	ldr.w	r2, [r3], #4
 800d176:	6800      	ldr	r0, [r0, #0]
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	f000 fc43 	bl	800da04 <_vfiprintf_r>
 800d17e:	b002      	add	sp, #8
 800d180:	f85d eb04 	ldr.w	lr, [sp], #4
 800d184:	b003      	add	sp, #12
 800d186:	4770      	bx	lr
 800d188:	20000098 	.word	0x20000098

0800d18c <memmove>:
 800d18c:	4288      	cmp	r0, r1
 800d18e:	b510      	push	{r4, lr}
 800d190:	eb01 0402 	add.w	r4, r1, r2
 800d194:	d902      	bls.n	800d19c <memmove+0x10>
 800d196:	4284      	cmp	r4, r0
 800d198:	4623      	mov	r3, r4
 800d19a:	d807      	bhi.n	800d1ac <memmove+0x20>
 800d19c:	1e43      	subs	r3, r0, #1
 800d19e:	42a1      	cmp	r1, r4
 800d1a0:	d008      	beq.n	800d1b4 <memmove+0x28>
 800d1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1aa:	e7f8      	b.n	800d19e <memmove+0x12>
 800d1ac:	4402      	add	r2, r0
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	428a      	cmp	r2, r1
 800d1b2:	d100      	bne.n	800d1b6 <memmove+0x2a>
 800d1b4:	bd10      	pop	{r4, pc}
 800d1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1be:	e7f7      	b.n	800d1b0 <memmove+0x24>

0800d1c0 <strncmp>:
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	b16a      	cbz	r2, 800d1e0 <strncmp+0x20>
 800d1c4:	3901      	subs	r1, #1
 800d1c6:	1884      	adds	r4, r0, r2
 800d1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d103      	bne.n	800d1dc <strncmp+0x1c>
 800d1d4:	42a0      	cmp	r0, r4
 800d1d6:	d001      	beq.n	800d1dc <strncmp+0x1c>
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	d1f5      	bne.n	800d1c8 <strncmp+0x8>
 800d1dc:	1ad0      	subs	r0, r2, r3
 800d1de:	bd10      	pop	{r4, pc}
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	e7fc      	b.n	800d1de <strncmp+0x1e>

0800d1e4 <_sbrk_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4d06      	ldr	r5, [pc, #24]	; (800d200 <_sbrk_r+0x1c>)
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	602b      	str	r3, [r5, #0]
 800d1f0:	f7f5 fe1e 	bl	8002e30 <_sbrk>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_sbrk_r+0x1a>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_sbrk_r+0x1a>
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	200008ec 	.word	0x200008ec

0800d204 <memcpy>:
 800d204:	440a      	add	r2, r1
 800d206:	4291      	cmp	r1, r2
 800d208:	f100 33ff 	add.w	r3, r0, #4294967295
 800d20c:	d100      	bne.n	800d210 <memcpy+0xc>
 800d20e:	4770      	bx	lr
 800d210:	b510      	push	{r4, lr}
 800d212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d21a:	4291      	cmp	r1, r2
 800d21c:	d1f9      	bne.n	800d212 <memcpy+0xe>
 800d21e:	bd10      	pop	{r4, pc}

0800d220 <nan>:
 800d220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d228 <nan+0x8>
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	00000000 	.word	0x00000000
 800d22c:	7ff80000 	.word	0x7ff80000

0800d230 <abort>:
 800d230:	b508      	push	{r3, lr}
 800d232:	2006      	movs	r0, #6
 800d234:	f000 fdbe 	bl	800ddb4 <raise>
 800d238:	2001      	movs	r0, #1
 800d23a:	f7f5 fd81 	bl	8002d40 <_exit>

0800d23e <_calloc_r>:
 800d23e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d240:	fba1 2402 	umull	r2, r4, r1, r2
 800d244:	b94c      	cbnz	r4, 800d25a <_calloc_r+0x1c>
 800d246:	4611      	mov	r1, r2
 800d248:	9201      	str	r2, [sp, #4]
 800d24a:	f7fe f9b7 	bl	800b5bc <_malloc_r>
 800d24e:	9a01      	ldr	r2, [sp, #4]
 800d250:	4605      	mov	r5, r0
 800d252:	b930      	cbnz	r0, 800d262 <_calloc_r+0x24>
 800d254:	4628      	mov	r0, r5
 800d256:	b003      	add	sp, #12
 800d258:	bd30      	pop	{r4, r5, pc}
 800d25a:	220c      	movs	r2, #12
 800d25c:	6002      	str	r2, [r0, #0]
 800d25e:	2500      	movs	r5, #0
 800d260:	e7f8      	b.n	800d254 <_calloc_r+0x16>
 800d262:	4621      	mov	r1, r4
 800d264:	f7fd fa19 	bl	800a69a <memset>
 800d268:	e7f4      	b.n	800d254 <_calloc_r+0x16>

0800d26a <rshift>:
 800d26a:	6903      	ldr	r3, [r0, #16]
 800d26c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d274:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d278:	f100 0414 	add.w	r4, r0, #20
 800d27c:	dd45      	ble.n	800d30a <rshift+0xa0>
 800d27e:	f011 011f 	ands.w	r1, r1, #31
 800d282:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d286:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d28a:	d10c      	bne.n	800d2a6 <rshift+0x3c>
 800d28c:	f100 0710 	add.w	r7, r0, #16
 800d290:	4629      	mov	r1, r5
 800d292:	42b1      	cmp	r1, r6
 800d294:	d334      	bcc.n	800d300 <rshift+0x96>
 800d296:	1a9b      	subs	r3, r3, r2
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	1eea      	subs	r2, r5, #3
 800d29c:	4296      	cmp	r6, r2
 800d29e:	bf38      	it	cc
 800d2a0:	2300      	movcc	r3, #0
 800d2a2:	4423      	add	r3, r4
 800d2a4:	e015      	b.n	800d2d2 <rshift+0x68>
 800d2a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2aa:	f1c1 0820 	rsb	r8, r1, #32
 800d2ae:	40cf      	lsrs	r7, r1
 800d2b0:	f105 0e04 	add.w	lr, r5, #4
 800d2b4:	46a1      	mov	r9, r4
 800d2b6:	4576      	cmp	r6, lr
 800d2b8:	46f4      	mov	ip, lr
 800d2ba:	d815      	bhi.n	800d2e8 <rshift+0x7e>
 800d2bc:	1a9a      	subs	r2, r3, r2
 800d2be:	0092      	lsls	r2, r2, #2
 800d2c0:	3a04      	subs	r2, #4
 800d2c2:	3501      	adds	r5, #1
 800d2c4:	42ae      	cmp	r6, r5
 800d2c6:	bf38      	it	cc
 800d2c8:	2200      	movcc	r2, #0
 800d2ca:	18a3      	adds	r3, r4, r2
 800d2cc:	50a7      	str	r7, [r4, r2]
 800d2ce:	b107      	cbz	r7, 800d2d2 <rshift+0x68>
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	1b1a      	subs	r2, r3, r4
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2da:	bf08      	it	eq
 800d2dc:	2300      	moveq	r3, #0
 800d2de:	6102      	str	r2, [r0, #16]
 800d2e0:	bf08      	it	eq
 800d2e2:	6143      	streq	r3, [r0, #20]
 800d2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2e8:	f8dc c000 	ldr.w	ip, [ip]
 800d2ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800d2f0:	ea4c 0707 	orr.w	r7, ip, r7
 800d2f4:	f849 7b04 	str.w	r7, [r9], #4
 800d2f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2fc:	40cf      	lsrs	r7, r1
 800d2fe:	e7da      	b.n	800d2b6 <rshift+0x4c>
 800d300:	f851 cb04 	ldr.w	ip, [r1], #4
 800d304:	f847 cf04 	str.w	ip, [r7, #4]!
 800d308:	e7c3      	b.n	800d292 <rshift+0x28>
 800d30a:	4623      	mov	r3, r4
 800d30c:	e7e1      	b.n	800d2d2 <rshift+0x68>

0800d30e <__hexdig_fun>:
 800d30e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d312:	2b09      	cmp	r3, #9
 800d314:	d802      	bhi.n	800d31c <__hexdig_fun+0xe>
 800d316:	3820      	subs	r0, #32
 800d318:	b2c0      	uxtb	r0, r0
 800d31a:	4770      	bx	lr
 800d31c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d320:	2b05      	cmp	r3, #5
 800d322:	d801      	bhi.n	800d328 <__hexdig_fun+0x1a>
 800d324:	3847      	subs	r0, #71	; 0x47
 800d326:	e7f7      	b.n	800d318 <__hexdig_fun+0xa>
 800d328:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d32c:	2b05      	cmp	r3, #5
 800d32e:	d801      	bhi.n	800d334 <__hexdig_fun+0x26>
 800d330:	3827      	subs	r0, #39	; 0x27
 800d332:	e7f1      	b.n	800d318 <__hexdig_fun+0xa>
 800d334:	2000      	movs	r0, #0
 800d336:	4770      	bx	lr

0800d338 <__gethex>:
 800d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	4617      	mov	r7, r2
 800d33e:	680a      	ldr	r2, [r1, #0]
 800d340:	b085      	sub	sp, #20
 800d342:	f102 0b02 	add.w	fp, r2, #2
 800d346:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d34a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d34e:	4681      	mov	r9, r0
 800d350:	468a      	mov	sl, r1
 800d352:	9302      	str	r3, [sp, #8]
 800d354:	32fe      	adds	r2, #254	; 0xfe
 800d356:	eb02 030b 	add.w	r3, r2, fp
 800d35a:	46d8      	mov	r8, fp
 800d35c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	2830      	cmp	r0, #48	; 0x30
 800d364:	d0f7      	beq.n	800d356 <__gethex+0x1e>
 800d366:	f7ff ffd2 	bl	800d30e <__hexdig_fun>
 800d36a:	4604      	mov	r4, r0
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d138      	bne.n	800d3e2 <__gethex+0xaa>
 800d370:	49a7      	ldr	r1, [pc, #668]	; (800d610 <__gethex+0x2d8>)
 800d372:	2201      	movs	r2, #1
 800d374:	4640      	mov	r0, r8
 800d376:	f7ff ff23 	bl	800d1c0 <strncmp>
 800d37a:	4606      	mov	r6, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d169      	bne.n	800d454 <__gethex+0x11c>
 800d380:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d384:	465d      	mov	r5, fp
 800d386:	f7ff ffc2 	bl	800d30e <__hexdig_fun>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d064      	beq.n	800d458 <__gethex+0x120>
 800d38e:	465a      	mov	r2, fp
 800d390:	7810      	ldrb	r0, [r2, #0]
 800d392:	2830      	cmp	r0, #48	; 0x30
 800d394:	4690      	mov	r8, r2
 800d396:	f102 0201 	add.w	r2, r2, #1
 800d39a:	d0f9      	beq.n	800d390 <__gethex+0x58>
 800d39c:	f7ff ffb7 	bl	800d30e <__hexdig_fun>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	fab0 f480 	clz	r4, r0
 800d3a6:	0964      	lsrs	r4, r4, #5
 800d3a8:	465e      	mov	r6, fp
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	4642      	mov	r2, r8
 800d3ae:	4615      	mov	r5, r2
 800d3b0:	3201      	adds	r2, #1
 800d3b2:	7828      	ldrb	r0, [r5, #0]
 800d3b4:	f7ff ffab 	bl	800d30e <__hexdig_fun>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d1f8      	bne.n	800d3ae <__gethex+0x76>
 800d3bc:	4994      	ldr	r1, [pc, #592]	; (800d610 <__gethex+0x2d8>)
 800d3be:	2201      	movs	r2, #1
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	f7ff fefd 	bl	800d1c0 <strncmp>
 800d3c6:	b978      	cbnz	r0, 800d3e8 <__gethex+0xb0>
 800d3c8:	b946      	cbnz	r6, 800d3dc <__gethex+0xa4>
 800d3ca:	1c6e      	adds	r6, r5, #1
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	4615      	mov	r5, r2
 800d3d0:	3201      	adds	r2, #1
 800d3d2:	7828      	ldrb	r0, [r5, #0]
 800d3d4:	f7ff ff9b 	bl	800d30e <__hexdig_fun>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d1f8      	bne.n	800d3ce <__gethex+0x96>
 800d3dc:	1b73      	subs	r3, r6, r5
 800d3de:	009e      	lsls	r6, r3, #2
 800d3e0:	e004      	b.n	800d3ec <__gethex+0xb4>
 800d3e2:	2400      	movs	r4, #0
 800d3e4:	4626      	mov	r6, r4
 800d3e6:	e7e1      	b.n	800d3ac <__gethex+0x74>
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	d1f7      	bne.n	800d3dc <__gethex+0xa4>
 800d3ec:	782b      	ldrb	r3, [r5, #0]
 800d3ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d3f2:	2b50      	cmp	r3, #80	; 0x50
 800d3f4:	d13d      	bne.n	800d472 <__gethex+0x13a>
 800d3f6:	786b      	ldrb	r3, [r5, #1]
 800d3f8:	2b2b      	cmp	r3, #43	; 0x2b
 800d3fa:	d02f      	beq.n	800d45c <__gethex+0x124>
 800d3fc:	2b2d      	cmp	r3, #45	; 0x2d
 800d3fe:	d031      	beq.n	800d464 <__gethex+0x12c>
 800d400:	1c69      	adds	r1, r5, #1
 800d402:	f04f 0b00 	mov.w	fp, #0
 800d406:	7808      	ldrb	r0, [r1, #0]
 800d408:	f7ff ff81 	bl	800d30e <__hexdig_fun>
 800d40c:	1e42      	subs	r2, r0, #1
 800d40e:	b2d2      	uxtb	r2, r2
 800d410:	2a18      	cmp	r2, #24
 800d412:	d82e      	bhi.n	800d472 <__gethex+0x13a>
 800d414:	f1a0 0210 	sub.w	r2, r0, #16
 800d418:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d41c:	f7ff ff77 	bl	800d30e <__hexdig_fun>
 800d420:	f100 3cff 	add.w	ip, r0, #4294967295
 800d424:	fa5f fc8c 	uxtb.w	ip, ip
 800d428:	f1bc 0f18 	cmp.w	ip, #24
 800d42c:	d91d      	bls.n	800d46a <__gethex+0x132>
 800d42e:	f1bb 0f00 	cmp.w	fp, #0
 800d432:	d000      	beq.n	800d436 <__gethex+0xfe>
 800d434:	4252      	negs	r2, r2
 800d436:	4416      	add	r6, r2
 800d438:	f8ca 1000 	str.w	r1, [sl]
 800d43c:	b1dc      	cbz	r4, 800d476 <__gethex+0x13e>
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	bf14      	ite	ne
 800d444:	f04f 0800 	movne.w	r8, #0
 800d448:	f04f 0806 	moveq.w	r8, #6
 800d44c:	4640      	mov	r0, r8
 800d44e:	b005      	add	sp, #20
 800d450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d454:	4645      	mov	r5, r8
 800d456:	4626      	mov	r6, r4
 800d458:	2401      	movs	r4, #1
 800d45a:	e7c7      	b.n	800d3ec <__gethex+0xb4>
 800d45c:	f04f 0b00 	mov.w	fp, #0
 800d460:	1ca9      	adds	r1, r5, #2
 800d462:	e7d0      	b.n	800d406 <__gethex+0xce>
 800d464:	f04f 0b01 	mov.w	fp, #1
 800d468:	e7fa      	b.n	800d460 <__gethex+0x128>
 800d46a:	230a      	movs	r3, #10
 800d46c:	fb03 0002 	mla	r0, r3, r2, r0
 800d470:	e7d0      	b.n	800d414 <__gethex+0xdc>
 800d472:	4629      	mov	r1, r5
 800d474:	e7e0      	b.n	800d438 <__gethex+0x100>
 800d476:	eba5 0308 	sub.w	r3, r5, r8
 800d47a:	3b01      	subs	r3, #1
 800d47c:	4621      	mov	r1, r4
 800d47e:	2b07      	cmp	r3, #7
 800d480:	dc0a      	bgt.n	800d498 <__gethex+0x160>
 800d482:	4648      	mov	r0, r9
 800d484:	f7fe f926 	bl	800b6d4 <_Balloc>
 800d488:	4604      	mov	r4, r0
 800d48a:	b940      	cbnz	r0, 800d49e <__gethex+0x166>
 800d48c:	4b61      	ldr	r3, [pc, #388]	; (800d614 <__gethex+0x2dc>)
 800d48e:	4602      	mov	r2, r0
 800d490:	21e4      	movs	r1, #228	; 0xe4
 800d492:	4861      	ldr	r0, [pc, #388]	; (800d618 <__gethex+0x2e0>)
 800d494:	f7fd f986 	bl	800a7a4 <__assert_func>
 800d498:	3101      	adds	r1, #1
 800d49a:	105b      	asrs	r3, r3, #1
 800d49c:	e7ef      	b.n	800d47e <__gethex+0x146>
 800d49e:	f100 0a14 	add.w	sl, r0, #20
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	495a      	ldr	r1, [pc, #360]	; (800d610 <__gethex+0x2d8>)
 800d4a6:	f8cd a004 	str.w	sl, [sp, #4]
 800d4aa:	469b      	mov	fp, r3
 800d4ac:	45a8      	cmp	r8, r5
 800d4ae:	d342      	bcc.n	800d536 <__gethex+0x1fe>
 800d4b0:	9801      	ldr	r0, [sp, #4]
 800d4b2:	f840 bb04 	str.w	fp, [r0], #4
 800d4b6:	eba0 000a 	sub.w	r0, r0, sl
 800d4ba:	1080      	asrs	r0, r0, #2
 800d4bc:	6120      	str	r0, [r4, #16]
 800d4be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d4c2:	4658      	mov	r0, fp
 800d4c4:	f7fe f9f8 	bl	800b8b8 <__hi0bits>
 800d4c8:	683d      	ldr	r5, [r7, #0]
 800d4ca:	eba8 0000 	sub.w	r0, r8, r0
 800d4ce:	42a8      	cmp	r0, r5
 800d4d0:	dd59      	ble.n	800d586 <__gethex+0x24e>
 800d4d2:	eba0 0805 	sub.w	r8, r0, r5
 800d4d6:	4641      	mov	r1, r8
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f7fe fd87 	bl	800bfec <__any_on>
 800d4de:	4683      	mov	fp, r0
 800d4e0:	b1b8      	cbz	r0, 800d512 <__gethex+0x1da>
 800d4e2:	f108 33ff 	add.w	r3, r8, #4294967295
 800d4e6:	1159      	asrs	r1, r3, #5
 800d4e8:	f003 021f 	and.w	r2, r3, #31
 800d4ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d4f0:	f04f 0b01 	mov.w	fp, #1
 800d4f4:	fa0b f202 	lsl.w	r2, fp, r2
 800d4f8:	420a      	tst	r2, r1
 800d4fa:	d00a      	beq.n	800d512 <__gethex+0x1da>
 800d4fc:	455b      	cmp	r3, fp
 800d4fe:	dd06      	ble.n	800d50e <__gethex+0x1d6>
 800d500:	f1a8 0102 	sub.w	r1, r8, #2
 800d504:	4620      	mov	r0, r4
 800d506:	f7fe fd71 	bl	800bfec <__any_on>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d138      	bne.n	800d580 <__gethex+0x248>
 800d50e:	f04f 0b02 	mov.w	fp, #2
 800d512:	4641      	mov	r1, r8
 800d514:	4620      	mov	r0, r4
 800d516:	f7ff fea8 	bl	800d26a <rshift>
 800d51a:	4446      	add	r6, r8
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	42b3      	cmp	r3, r6
 800d520:	da41      	bge.n	800d5a6 <__gethex+0x26e>
 800d522:	4621      	mov	r1, r4
 800d524:	4648      	mov	r0, r9
 800d526:	f7fe f915 	bl	800b754 <_Bfree>
 800d52a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d52c:	2300      	movs	r3, #0
 800d52e:	6013      	str	r3, [r2, #0]
 800d530:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d534:	e78a      	b.n	800d44c <__gethex+0x114>
 800d536:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d53a:	2a2e      	cmp	r2, #46	; 0x2e
 800d53c:	d014      	beq.n	800d568 <__gethex+0x230>
 800d53e:	2b20      	cmp	r3, #32
 800d540:	d106      	bne.n	800d550 <__gethex+0x218>
 800d542:	9b01      	ldr	r3, [sp, #4]
 800d544:	f843 bb04 	str.w	fp, [r3], #4
 800d548:	f04f 0b00 	mov.w	fp, #0
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	465b      	mov	r3, fp
 800d550:	7828      	ldrb	r0, [r5, #0]
 800d552:	9303      	str	r3, [sp, #12]
 800d554:	f7ff fedb 	bl	800d30e <__hexdig_fun>
 800d558:	9b03      	ldr	r3, [sp, #12]
 800d55a:	f000 000f 	and.w	r0, r0, #15
 800d55e:	4098      	lsls	r0, r3
 800d560:	ea4b 0b00 	orr.w	fp, fp, r0
 800d564:	3304      	adds	r3, #4
 800d566:	e7a1      	b.n	800d4ac <__gethex+0x174>
 800d568:	45a8      	cmp	r8, r5
 800d56a:	d8e8      	bhi.n	800d53e <__gethex+0x206>
 800d56c:	2201      	movs	r2, #1
 800d56e:	4628      	mov	r0, r5
 800d570:	9303      	str	r3, [sp, #12]
 800d572:	f7ff fe25 	bl	800d1c0 <strncmp>
 800d576:	4926      	ldr	r1, [pc, #152]	; (800d610 <__gethex+0x2d8>)
 800d578:	9b03      	ldr	r3, [sp, #12]
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d1df      	bne.n	800d53e <__gethex+0x206>
 800d57e:	e795      	b.n	800d4ac <__gethex+0x174>
 800d580:	f04f 0b03 	mov.w	fp, #3
 800d584:	e7c5      	b.n	800d512 <__gethex+0x1da>
 800d586:	da0b      	bge.n	800d5a0 <__gethex+0x268>
 800d588:	eba5 0800 	sub.w	r8, r5, r0
 800d58c:	4621      	mov	r1, r4
 800d58e:	4642      	mov	r2, r8
 800d590:	4648      	mov	r0, r9
 800d592:	f7fe faf9 	bl	800bb88 <__lshift>
 800d596:	eba6 0608 	sub.w	r6, r6, r8
 800d59a:	4604      	mov	r4, r0
 800d59c:	f100 0a14 	add.w	sl, r0, #20
 800d5a0:	f04f 0b00 	mov.w	fp, #0
 800d5a4:	e7ba      	b.n	800d51c <__gethex+0x1e4>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	42b3      	cmp	r3, r6
 800d5aa:	dd73      	ble.n	800d694 <__gethex+0x35c>
 800d5ac:	1b9e      	subs	r6, r3, r6
 800d5ae:	42b5      	cmp	r5, r6
 800d5b0:	dc34      	bgt.n	800d61c <__gethex+0x2e4>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d023      	beq.n	800d600 <__gethex+0x2c8>
 800d5b8:	2b03      	cmp	r3, #3
 800d5ba:	d025      	beq.n	800d608 <__gethex+0x2d0>
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d115      	bne.n	800d5ec <__gethex+0x2b4>
 800d5c0:	42b5      	cmp	r5, r6
 800d5c2:	d113      	bne.n	800d5ec <__gethex+0x2b4>
 800d5c4:	2d01      	cmp	r5, #1
 800d5c6:	d10b      	bne.n	800d5e0 <__gethex+0x2a8>
 800d5c8:	9a02      	ldr	r2, [sp, #8]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6013      	str	r3, [r2, #0]
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	6123      	str	r3, [r4, #16]
 800d5d2:	f8ca 3000 	str.w	r3, [sl]
 800d5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d5dc:	601c      	str	r4, [r3, #0]
 800d5de:	e735      	b.n	800d44c <__gethex+0x114>
 800d5e0:	1e69      	subs	r1, r5, #1
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f7fe fd02 	bl	800bfec <__any_on>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d1ed      	bne.n	800d5c8 <__gethex+0x290>
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	4648      	mov	r0, r9
 800d5f0:	f7fe f8b0 	bl	800b754 <_Bfree>
 800d5f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	6013      	str	r3, [r2, #0]
 800d5fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d5fe:	e725      	b.n	800d44c <__gethex+0x114>
 800d600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1f2      	bne.n	800d5ec <__gethex+0x2b4>
 800d606:	e7df      	b.n	800d5c8 <__gethex+0x290>
 800d608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1dc      	bne.n	800d5c8 <__gethex+0x290>
 800d60e:	e7ed      	b.n	800d5ec <__gethex+0x2b4>
 800d610:	0800e264 	.word	0x0800e264
 800d614:	0800e0fd 	.word	0x0800e0fd
 800d618:	0800e3d2 	.word	0x0800e3d2
 800d61c:	f106 38ff 	add.w	r8, r6, #4294967295
 800d620:	f1bb 0f00 	cmp.w	fp, #0
 800d624:	d133      	bne.n	800d68e <__gethex+0x356>
 800d626:	f1b8 0f00 	cmp.w	r8, #0
 800d62a:	d004      	beq.n	800d636 <__gethex+0x2fe>
 800d62c:	4641      	mov	r1, r8
 800d62e:	4620      	mov	r0, r4
 800d630:	f7fe fcdc 	bl	800bfec <__any_on>
 800d634:	4683      	mov	fp, r0
 800d636:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d63a:	2301      	movs	r3, #1
 800d63c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d640:	f008 081f 	and.w	r8, r8, #31
 800d644:	fa03 f308 	lsl.w	r3, r3, r8
 800d648:	4213      	tst	r3, r2
 800d64a:	4631      	mov	r1, r6
 800d64c:	4620      	mov	r0, r4
 800d64e:	bf18      	it	ne
 800d650:	f04b 0b02 	orrne.w	fp, fp, #2
 800d654:	1bad      	subs	r5, r5, r6
 800d656:	f7ff fe08 	bl	800d26a <rshift>
 800d65a:	687e      	ldr	r6, [r7, #4]
 800d65c:	f04f 0802 	mov.w	r8, #2
 800d660:	f1bb 0f00 	cmp.w	fp, #0
 800d664:	d04a      	beq.n	800d6fc <__gethex+0x3c4>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d016      	beq.n	800d69a <__gethex+0x362>
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d018      	beq.n	800d6a2 <__gethex+0x36a>
 800d670:	2b01      	cmp	r3, #1
 800d672:	d109      	bne.n	800d688 <__gethex+0x350>
 800d674:	f01b 0f02 	tst.w	fp, #2
 800d678:	d006      	beq.n	800d688 <__gethex+0x350>
 800d67a:	f8da 3000 	ldr.w	r3, [sl]
 800d67e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d682:	f01b 0f01 	tst.w	fp, #1
 800d686:	d10f      	bne.n	800d6a8 <__gethex+0x370>
 800d688:	f048 0810 	orr.w	r8, r8, #16
 800d68c:	e036      	b.n	800d6fc <__gethex+0x3c4>
 800d68e:	f04f 0b01 	mov.w	fp, #1
 800d692:	e7d0      	b.n	800d636 <__gethex+0x2fe>
 800d694:	f04f 0801 	mov.w	r8, #1
 800d698:	e7e2      	b.n	800d660 <__gethex+0x328>
 800d69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d69c:	f1c3 0301 	rsb	r3, r3, #1
 800d6a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d0ef      	beq.n	800d688 <__gethex+0x350>
 800d6a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6ac:	f104 0214 	add.w	r2, r4, #20
 800d6b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	4694      	mov	ip, r2
 800d6be:	f852 1b04 	ldr.w	r1, [r2], #4
 800d6c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d6c6:	d01e      	beq.n	800d706 <__gethex+0x3ce>
 800d6c8:	3101      	adds	r1, #1
 800d6ca:	f8cc 1000 	str.w	r1, [ip]
 800d6ce:	f1b8 0f02 	cmp.w	r8, #2
 800d6d2:	f104 0214 	add.w	r2, r4, #20
 800d6d6:	d13d      	bne.n	800d754 <__gethex+0x41c>
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	42ab      	cmp	r3, r5
 800d6de:	d10b      	bne.n	800d6f8 <__gethex+0x3c0>
 800d6e0:	1169      	asrs	r1, r5, #5
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	f005 051f 	and.w	r5, r5, #31
 800d6e8:	fa03 f505 	lsl.w	r5, r3, r5
 800d6ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6f0:	421d      	tst	r5, r3
 800d6f2:	bf18      	it	ne
 800d6f4:	f04f 0801 	movne.w	r8, #1
 800d6f8:	f048 0820 	orr.w	r8, r8, #32
 800d6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6fe:	601c      	str	r4, [r3, #0]
 800d700:	9b02      	ldr	r3, [sp, #8]
 800d702:	601e      	str	r6, [r3, #0]
 800d704:	e6a2      	b.n	800d44c <__gethex+0x114>
 800d706:	4290      	cmp	r0, r2
 800d708:	f842 3c04 	str.w	r3, [r2, #-4]
 800d70c:	d8d6      	bhi.n	800d6bc <__gethex+0x384>
 800d70e:	68a2      	ldr	r2, [r4, #8]
 800d710:	4593      	cmp	fp, r2
 800d712:	db17      	blt.n	800d744 <__gethex+0x40c>
 800d714:	6861      	ldr	r1, [r4, #4]
 800d716:	4648      	mov	r0, r9
 800d718:	3101      	adds	r1, #1
 800d71a:	f7fd ffdb 	bl	800b6d4 <_Balloc>
 800d71e:	4682      	mov	sl, r0
 800d720:	b918      	cbnz	r0, 800d72a <__gethex+0x3f2>
 800d722:	4b1b      	ldr	r3, [pc, #108]	; (800d790 <__gethex+0x458>)
 800d724:	4602      	mov	r2, r0
 800d726:	2184      	movs	r1, #132	; 0x84
 800d728:	e6b3      	b.n	800d492 <__gethex+0x15a>
 800d72a:	6922      	ldr	r2, [r4, #16]
 800d72c:	3202      	adds	r2, #2
 800d72e:	f104 010c 	add.w	r1, r4, #12
 800d732:	0092      	lsls	r2, r2, #2
 800d734:	300c      	adds	r0, #12
 800d736:	f7ff fd65 	bl	800d204 <memcpy>
 800d73a:	4621      	mov	r1, r4
 800d73c:	4648      	mov	r0, r9
 800d73e:	f7fe f809 	bl	800b754 <_Bfree>
 800d742:	4654      	mov	r4, sl
 800d744:	6922      	ldr	r2, [r4, #16]
 800d746:	1c51      	adds	r1, r2, #1
 800d748:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d74c:	6121      	str	r1, [r4, #16]
 800d74e:	2101      	movs	r1, #1
 800d750:	6151      	str	r1, [r2, #20]
 800d752:	e7bc      	b.n	800d6ce <__gethex+0x396>
 800d754:	6921      	ldr	r1, [r4, #16]
 800d756:	4559      	cmp	r1, fp
 800d758:	dd0b      	ble.n	800d772 <__gethex+0x43a>
 800d75a:	2101      	movs	r1, #1
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7ff fd84 	bl	800d26a <rshift>
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	3601      	adds	r6, #1
 800d766:	42b3      	cmp	r3, r6
 800d768:	f6ff aedb 	blt.w	800d522 <__gethex+0x1ea>
 800d76c:	f04f 0801 	mov.w	r8, #1
 800d770:	e7c2      	b.n	800d6f8 <__gethex+0x3c0>
 800d772:	f015 051f 	ands.w	r5, r5, #31
 800d776:	d0f9      	beq.n	800d76c <__gethex+0x434>
 800d778:	9b01      	ldr	r3, [sp, #4]
 800d77a:	441a      	add	r2, r3
 800d77c:	f1c5 0520 	rsb	r5, r5, #32
 800d780:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d784:	f7fe f898 	bl	800b8b8 <__hi0bits>
 800d788:	42a8      	cmp	r0, r5
 800d78a:	dbe6      	blt.n	800d75a <__gethex+0x422>
 800d78c:	e7ee      	b.n	800d76c <__gethex+0x434>
 800d78e:	bf00      	nop
 800d790:	0800e0fd 	.word	0x0800e0fd

0800d794 <L_shift>:
 800d794:	f1c2 0208 	rsb	r2, r2, #8
 800d798:	0092      	lsls	r2, r2, #2
 800d79a:	b570      	push	{r4, r5, r6, lr}
 800d79c:	f1c2 0620 	rsb	r6, r2, #32
 800d7a0:	6843      	ldr	r3, [r0, #4]
 800d7a2:	6804      	ldr	r4, [r0, #0]
 800d7a4:	fa03 f506 	lsl.w	r5, r3, r6
 800d7a8:	432c      	orrs	r4, r5
 800d7aa:	40d3      	lsrs	r3, r2
 800d7ac:	6004      	str	r4, [r0, #0]
 800d7ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7b2:	4288      	cmp	r0, r1
 800d7b4:	d3f4      	bcc.n	800d7a0 <L_shift+0xc>
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}

0800d7b8 <__match>:
 800d7b8:	b530      	push	{r4, r5, lr}
 800d7ba:	6803      	ldr	r3, [r0, #0]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c2:	b914      	cbnz	r4, 800d7ca <__match+0x12>
 800d7c4:	6003      	str	r3, [r0, #0]
 800d7c6:	2001      	movs	r0, #1
 800d7c8:	bd30      	pop	{r4, r5, pc}
 800d7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7d2:	2d19      	cmp	r5, #25
 800d7d4:	bf98      	it	ls
 800d7d6:	3220      	addls	r2, #32
 800d7d8:	42a2      	cmp	r2, r4
 800d7da:	d0f0      	beq.n	800d7be <__match+0x6>
 800d7dc:	2000      	movs	r0, #0
 800d7de:	e7f3      	b.n	800d7c8 <__match+0x10>

0800d7e0 <__hexnan>:
 800d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e4:	680b      	ldr	r3, [r1, #0]
 800d7e6:	6801      	ldr	r1, [r0, #0]
 800d7e8:	115e      	asrs	r6, r3, #5
 800d7ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d7ee:	f013 031f 	ands.w	r3, r3, #31
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	bf18      	it	ne
 800d7f6:	3604      	addne	r6, #4
 800d7f8:	2500      	movs	r5, #0
 800d7fa:	1f37      	subs	r7, r6, #4
 800d7fc:	4682      	mov	sl, r0
 800d7fe:	4690      	mov	r8, r2
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	f846 5c04 	str.w	r5, [r6, #-4]
 800d806:	46b9      	mov	r9, r7
 800d808:	463c      	mov	r4, r7
 800d80a:	9502      	str	r5, [sp, #8]
 800d80c:	46ab      	mov	fp, r5
 800d80e:	784a      	ldrb	r2, [r1, #1]
 800d810:	1c4b      	adds	r3, r1, #1
 800d812:	9303      	str	r3, [sp, #12]
 800d814:	b342      	cbz	r2, 800d868 <__hexnan+0x88>
 800d816:	4610      	mov	r0, r2
 800d818:	9105      	str	r1, [sp, #20]
 800d81a:	9204      	str	r2, [sp, #16]
 800d81c:	f7ff fd77 	bl	800d30e <__hexdig_fun>
 800d820:	2800      	cmp	r0, #0
 800d822:	d14f      	bne.n	800d8c4 <__hexnan+0xe4>
 800d824:	9a04      	ldr	r2, [sp, #16]
 800d826:	9905      	ldr	r1, [sp, #20]
 800d828:	2a20      	cmp	r2, #32
 800d82a:	d818      	bhi.n	800d85e <__hexnan+0x7e>
 800d82c:	9b02      	ldr	r3, [sp, #8]
 800d82e:	459b      	cmp	fp, r3
 800d830:	dd13      	ble.n	800d85a <__hexnan+0x7a>
 800d832:	454c      	cmp	r4, r9
 800d834:	d206      	bcs.n	800d844 <__hexnan+0x64>
 800d836:	2d07      	cmp	r5, #7
 800d838:	dc04      	bgt.n	800d844 <__hexnan+0x64>
 800d83a:	462a      	mov	r2, r5
 800d83c:	4649      	mov	r1, r9
 800d83e:	4620      	mov	r0, r4
 800d840:	f7ff ffa8 	bl	800d794 <L_shift>
 800d844:	4544      	cmp	r4, r8
 800d846:	d950      	bls.n	800d8ea <__hexnan+0x10a>
 800d848:	2300      	movs	r3, #0
 800d84a:	f1a4 0904 	sub.w	r9, r4, #4
 800d84e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d852:	f8cd b008 	str.w	fp, [sp, #8]
 800d856:	464c      	mov	r4, r9
 800d858:	461d      	mov	r5, r3
 800d85a:	9903      	ldr	r1, [sp, #12]
 800d85c:	e7d7      	b.n	800d80e <__hexnan+0x2e>
 800d85e:	2a29      	cmp	r2, #41	; 0x29
 800d860:	d155      	bne.n	800d90e <__hexnan+0x12e>
 800d862:	3102      	adds	r1, #2
 800d864:	f8ca 1000 	str.w	r1, [sl]
 800d868:	f1bb 0f00 	cmp.w	fp, #0
 800d86c:	d04f      	beq.n	800d90e <__hexnan+0x12e>
 800d86e:	454c      	cmp	r4, r9
 800d870:	d206      	bcs.n	800d880 <__hexnan+0xa0>
 800d872:	2d07      	cmp	r5, #7
 800d874:	dc04      	bgt.n	800d880 <__hexnan+0xa0>
 800d876:	462a      	mov	r2, r5
 800d878:	4649      	mov	r1, r9
 800d87a:	4620      	mov	r0, r4
 800d87c:	f7ff ff8a 	bl	800d794 <L_shift>
 800d880:	4544      	cmp	r4, r8
 800d882:	d934      	bls.n	800d8ee <__hexnan+0x10e>
 800d884:	f1a8 0204 	sub.w	r2, r8, #4
 800d888:	4623      	mov	r3, r4
 800d88a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d88e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d892:	429f      	cmp	r7, r3
 800d894:	d2f9      	bcs.n	800d88a <__hexnan+0xaa>
 800d896:	1b3b      	subs	r3, r7, r4
 800d898:	f023 0303 	bic.w	r3, r3, #3
 800d89c:	3304      	adds	r3, #4
 800d89e:	3e03      	subs	r6, #3
 800d8a0:	3401      	adds	r4, #1
 800d8a2:	42a6      	cmp	r6, r4
 800d8a4:	bf38      	it	cc
 800d8a6:	2304      	movcc	r3, #4
 800d8a8:	4443      	add	r3, r8
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f843 2b04 	str.w	r2, [r3], #4
 800d8b0:	429f      	cmp	r7, r3
 800d8b2:	d2fb      	bcs.n	800d8ac <__hexnan+0xcc>
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	b91b      	cbnz	r3, 800d8c0 <__hexnan+0xe0>
 800d8b8:	4547      	cmp	r7, r8
 800d8ba:	d126      	bne.n	800d90a <__hexnan+0x12a>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	603b      	str	r3, [r7, #0]
 800d8c0:	2005      	movs	r0, #5
 800d8c2:	e025      	b.n	800d910 <__hexnan+0x130>
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	2d08      	cmp	r5, #8
 800d8c8:	f10b 0b01 	add.w	fp, fp, #1
 800d8cc:	dd06      	ble.n	800d8dc <__hexnan+0xfc>
 800d8ce:	4544      	cmp	r4, r8
 800d8d0:	d9c3      	bls.n	800d85a <__hexnan+0x7a>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8d8:	2501      	movs	r5, #1
 800d8da:	3c04      	subs	r4, #4
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	f000 000f 	and.w	r0, r0, #15
 800d8e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d8e6:	6020      	str	r0, [r4, #0]
 800d8e8:	e7b7      	b.n	800d85a <__hexnan+0x7a>
 800d8ea:	2508      	movs	r5, #8
 800d8ec:	e7b5      	b.n	800d85a <__hexnan+0x7a>
 800d8ee:	9b01      	ldr	r3, [sp, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d0df      	beq.n	800d8b4 <__hexnan+0xd4>
 800d8f4:	f1c3 0320 	rsb	r3, r3, #32
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fc:	40da      	lsrs	r2, r3
 800d8fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d902:	4013      	ands	r3, r2
 800d904:	f846 3c04 	str.w	r3, [r6, #-4]
 800d908:	e7d4      	b.n	800d8b4 <__hexnan+0xd4>
 800d90a:	3f04      	subs	r7, #4
 800d90c:	e7d2      	b.n	800d8b4 <__hexnan+0xd4>
 800d90e:	2004      	movs	r0, #4
 800d910:	b007      	add	sp, #28
 800d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d916 <__ascii_mbtowc>:
 800d916:	b082      	sub	sp, #8
 800d918:	b901      	cbnz	r1, 800d91c <__ascii_mbtowc+0x6>
 800d91a:	a901      	add	r1, sp, #4
 800d91c:	b142      	cbz	r2, 800d930 <__ascii_mbtowc+0x1a>
 800d91e:	b14b      	cbz	r3, 800d934 <__ascii_mbtowc+0x1e>
 800d920:	7813      	ldrb	r3, [r2, #0]
 800d922:	600b      	str	r3, [r1, #0]
 800d924:	7812      	ldrb	r2, [r2, #0]
 800d926:	1e10      	subs	r0, r2, #0
 800d928:	bf18      	it	ne
 800d92a:	2001      	movne	r0, #1
 800d92c:	b002      	add	sp, #8
 800d92e:	4770      	bx	lr
 800d930:	4610      	mov	r0, r2
 800d932:	e7fb      	b.n	800d92c <__ascii_mbtowc+0x16>
 800d934:	f06f 0001 	mvn.w	r0, #1
 800d938:	e7f8      	b.n	800d92c <__ascii_mbtowc+0x16>

0800d93a <_realloc_r>:
 800d93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d93e:	4680      	mov	r8, r0
 800d940:	4614      	mov	r4, r2
 800d942:	460e      	mov	r6, r1
 800d944:	b921      	cbnz	r1, 800d950 <_realloc_r+0x16>
 800d946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d94a:	4611      	mov	r1, r2
 800d94c:	f7fd be36 	b.w	800b5bc <_malloc_r>
 800d950:	b92a      	cbnz	r2, 800d95e <_realloc_r+0x24>
 800d952:	f7fd fdbf 	bl	800b4d4 <_free_r>
 800d956:	4625      	mov	r5, r4
 800d958:	4628      	mov	r0, r5
 800d95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95e:	f000 fa45 	bl	800ddec <_malloc_usable_size_r>
 800d962:	4284      	cmp	r4, r0
 800d964:	4607      	mov	r7, r0
 800d966:	d802      	bhi.n	800d96e <_realloc_r+0x34>
 800d968:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d96c:	d812      	bhi.n	800d994 <_realloc_r+0x5a>
 800d96e:	4621      	mov	r1, r4
 800d970:	4640      	mov	r0, r8
 800d972:	f7fd fe23 	bl	800b5bc <_malloc_r>
 800d976:	4605      	mov	r5, r0
 800d978:	2800      	cmp	r0, #0
 800d97a:	d0ed      	beq.n	800d958 <_realloc_r+0x1e>
 800d97c:	42bc      	cmp	r4, r7
 800d97e:	4622      	mov	r2, r4
 800d980:	4631      	mov	r1, r6
 800d982:	bf28      	it	cs
 800d984:	463a      	movcs	r2, r7
 800d986:	f7ff fc3d 	bl	800d204 <memcpy>
 800d98a:	4631      	mov	r1, r6
 800d98c:	4640      	mov	r0, r8
 800d98e:	f7fd fda1 	bl	800b4d4 <_free_r>
 800d992:	e7e1      	b.n	800d958 <_realloc_r+0x1e>
 800d994:	4635      	mov	r5, r6
 800d996:	e7df      	b.n	800d958 <_realloc_r+0x1e>

0800d998 <__ascii_wctomb>:
 800d998:	b149      	cbz	r1, 800d9ae <__ascii_wctomb+0x16>
 800d99a:	2aff      	cmp	r2, #255	; 0xff
 800d99c:	bf85      	ittet	hi
 800d99e:	238a      	movhi	r3, #138	; 0x8a
 800d9a0:	6003      	strhi	r3, [r0, #0]
 800d9a2:	700a      	strbls	r2, [r1, #0]
 800d9a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d9a8:	bf98      	it	ls
 800d9aa:	2001      	movls	r0, #1
 800d9ac:	4770      	bx	lr
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	4770      	bx	lr

0800d9b2 <__sfputc_r>:
 800d9b2:	6893      	ldr	r3, [r2, #8]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	b410      	push	{r4}
 800d9ba:	6093      	str	r3, [r2, #8]
 800d9bc:	da08      	bge.n	800d9d0 <__sfputc_r+0x1e>
 800d9be:	6994      	ldr	r4, [r2, #24]
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	db01      	blt.n	800d9c8 <__sfputc_r+0x16>
 800d9c4:	290a      	cmp	r1, #10
 800d9c6:	d103      	bne.n	800d9d0 <__sfputc_r+0x1e>
 800d9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9cc:	f000 b934 	b.w	800dc38 <__swbuf_r>
 800d9d0:	6813      	ldr	r3, [r2, #0]
 800d9d2:	1c58      	adds	r0, r3, #1
 800d9d4:	6010      	str	r0, [r2, #0]
 800d9d6:	7019      	strb	r1, [r3, #0]
 800d9d8:	4608      	mov	r0, r1
 800d9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <__sfputs_r>:
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	460f      	mov	r7, r1
 800d9e6:	4614      	mov	r4, r2
 800d9e8:	18d5      	adds	r5, r2, r3
 800d9ea:	42ac      	cmp	r4, r5
 800d9ec:	d101      	bne.n	800d9f2 <__sfputs_r+0x12>
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	e007      	b.n	800da02 <__sfputs_r+0x22>
 800d9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7ff ffda 	bl	800d9b2 <__sfputc_r>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d1f3      	bne.n	800d9ea <__sfputs_r+0xa>
 800da02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da04 <_vfiprintf_r>:
 800da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	460d      	mov	r5, r1
 800da0a:	b09d      	sub	sp, #116	; 0x74
 800da0c:	4614      	mov	r4, r2
 800da0e:	4698      	mov	r8, r3
 800da10:	4606      	mov	r6, r0
 800da12:	b118      	cbz	r0, 800da1c <_vfiprintf_r+0x18>
 800da14:	6a03      	ldr	r3, [r0, #32]
 800da16:	b90b      	cbnz	r3, 800da1c <_vfiprintf_r+0x18>
 800da18:	f7fc fda6 	bl	800a568 <__sinit>
 800da1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da1e:	07d9      	lsls	r1, r3, #31
 800da20:	d405      	bmi.n	800da2e <_vfiprintf_r+0x2a>
 800da22:	89ab      	ldrh	r3, [r5, #12]
 800da24:	059a      	lsls	r2, r3, #22
 800da26:	d402      	bmi.n	800da2e <_vfiprintf_r+0x2a>
 800da28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da2a:	f7fc feb3 	bl	800a794 <__retarget_lock_acquire_recursive>
 800da2e:	89ab      	ldrh	r3, [r5, #12]
 800da30:	071b      	lsls	r3, r3, #28
 800da32:	d501      	bpl.n	800da38 <_vfiprintf_r+0x34>
 800da34:	692b      	ldr	r3, [r5, #16]
 800da36:	b99b      	cbnz	r3, 800da60 <_vfiprintf_r+0x5c>
 800da38:	4629      	mov	r1, r5
 800da3a:	4630      	mov	r0, r6
 800da3c:	f000 f93a 	bl	800dcb4 <__swsetup_r>
 800da40:	b170      	cbz	r0, 800da60 <_vfiprintf_r+0x5c>
 800da42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da44:	07dc      	lsls	r4, r3, #31
 800da46:	d504      	bpl.n	800da52 <_vfiprintf_r+0x4e>
 800da48:	f04f 30ff 	mov.w	r0, #4294967295
 800da4c:	b01d      	add	sp, #116	; 0x74
 800da4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da52:	89ab      	ldrh	r3, [r5, #12]
 800da54:	0598      	lsls	r0, r3, #22
 800da56:	d4f7      	bmi.n	800da48 <_vfiprintf_r+0x44>
 800da58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da5a:	f7fc fe9c 	bl	800a796 <__retarget_lock_release_recursive>
 800da5e:	e7f3      	b.n	800da48 <_vfiprintf_r+0x44>
 800da60:	2300      	movs	r3, #0
 800da62:	9309      	str	r3, [sp, #36]	; 0x24
 800da64:	2320      	movs	r3, #32
 800da66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800da6e:	2330      	movs	r3, #48	; 0x30
 800da70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dc24 <_vfiprintf_r+0x220>
 800da74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da78:	f04f 0901 	mov.w	r9, #1
 800da7c:	4623      	mov	r3, r4
 800da7e:	469a      	mov	sl, r3
 800da80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da84:	b10a      	cbz	r2, 800da8a <_vfiprintf_r+0x86>
 800da86:	2a25      	cmp	r2, #37	; 0x25
 800da88:	d1f9      	bne.n	800da7e <_vfiprintf_r+0x7a>
 800da8a:	ebba 0b04 	subs.w	fp, sl, r4
 800da8e:	d00b      	beq.n	800daa8 <_vfiprintf_r+0xa4>
 800da90:	465b      	mov	r3, fp
 800da92:	4622      	mov	r2, r4
 800da94:	4629      	mov	r1, r5
 800da96:	4630      	mov	r0, r6
 800da98:	f7ff ffa2 	bl	800d9e0 <__sfputs_r>
 800da9c:	3001      	adds	r0, #1
 800da9e:	f000 80a9 	beq.w	800dbf4 <_vfiprintf_r+0x1f0>
 800daa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daa4:	445a      	add	r2, fp
 800daa6:	9209      	str	r2, [sp, #36]	; 0x24
 800daa8:	f89a 3000 	ldrb.w	r3, [sl]
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 80a1 	beq.w	800dbf4 <_vfiprintf_r+0x1f0>
 800dab2:	2300      	movs	r3, #0
 800dab4:	f04f 32ff 	mov.w	r2, #4294967295
 800dab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dabc:	f10a 0a01 	add.w	sl, sl, #1
 800dac0:	9304      	str	r3, [sp, #16]
 800dac2:	9307      	str	r3, [sp, #28]
 800dac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dac8:	931a      	str	r3, [sp, #104]	; 0x68
 800daca:	4654      	mov	r4, sl
 800dacc:	2205      	movs	r2, #5
 800dace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad2:	4854      	ldr	r0, [pc, #336]	; (800dc24 <_vfiprintf_r+0x220>)
 800dad4:	f7f2 fba4 	bl	8000220 <memchr>
 800dad8:	9a04      	ldr	r2, [sp, #16]
 800dada:	b9d8      	cbnz	r0, 800db14 <_vfiprintf_r+0x110>
 800dadc:	06d1      	lsls	r1, r2, #27
 800dade:	bf44      	itt	mi
 800dae0:	2320      	movmi	r3, #32
 800dae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae6:	0713      	lsls	r3, r2, #28
 800dae8:	bf44      	itt	mi
 800daea:	232b      	movmi	r3, #43	; 0x2b
 800daec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daf0:	f89a 3000 	ldrb.w	r3, [sl]
 800daf4:	2b2a      	cmp	r3, #42	; 0x2a
 800daf6:	d015      	beq.n	800db24 <_vfiprintf_r+0x120>
 800daf8:	9a07      	ldr	r2, [sp, #28]
 800dafa:	4654      	mov	r4, sl
 800dafc:	2000      	movs	r0, #0
 800dafe:	f04f 0c0a 	mov.w	ip, #10
 800db02:	4621      	mov	r1, r4
 800db04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db08:	3b30      	subs	r3, #48	; 0x30
 800db0a:	2b09      	cmp	r3, #9
 800db0c:	d94d      	bls.n	800dbaa <_vfiprintf_r+0x1a6>
 800db0e:	b1b0      	cbz	r0, 800db3e <_vfiprintf_r+0x13a>
 800db10:	9207      	str	r2, [sp, #28]
 800db12:	e014      	b.n	800db3e <_vfiprintf_r+0x13a>
 800db14:	eba0 0308 	sub.w	r3, r0, r8
 800db18:	fa09 f303 	lsl.w	r3, r9, r3
 800db1c:	4313      	orrs	r3, r2
 800db1e:	9304      	str	r3, [sp, #16]
 800db20:	46a2      	mov	sl, r4
 800db22:	e7d2      	b.n	800daca <_vfiprintf_r+0xc6>
 800db24:	9b03      	ldr	r3, [sp, #12]
 800db26:	1d19      	adds	r1, r3, #4
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	9103      	str	r1, [sp, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	bfbb      	ittet	lt
 800db30:	425b      	neglt	r3, r3
 800db32:	f042 0202 	orrlt.w	r2, r2, #2
 800db36:	9307      	strge	r3, [sp, #28]
 800db38:	9307      	strlt	r3, [sp, #28]
 800db3a:	bfb8      	it	lt
 800db3c:	9204      	strlt	r2, [sp, #16]
 800db3e:	7823      	ldrb	r3, [r4, #0]
 800db40:	2b2e      	cmp	r3, #46	; 0x2e
 800db42:	d10c      	bne.n	800db5e <_vfiprintf_r+0x15a>
 800db44:	7863      	ldrb	r3, [r4, #1]
 800db46:	2b2a      	cmp	r3, #42	; 0x2a
 800db48:	d134      	bne.n	800dbb4 <_vfiprintf_r+0x1b0>
 800db4a:	9b03      	ldr	r3, [sp, #12]
 800db4c:	1d1a      	adds	r2, r3, #4
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	9203      	str	r2, [sp, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	bfb8      	it	lt
 800db56:	f04f 33ff 	movlt.w	r3, #4294967295
 800db5a:	3402      	adds	r4, #2
 800db5c:	9305      	str	r3, [sp, #20]
 800db5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dc34 <_vfiprintf_r+0x230>
 800db62:	7821      	ldrb	r1, [r4, #0]
 800db64:	2203      	movs	r2, #3
 800db66:	4650      	mov	r0, sl
 800db68:	f7f2 fb5a 	bl	8000220 <memchr>
 800db6c:	b138      	cbz	r0, 800db7e <_vfiprintf_r+0x17a>
 800db6e:	9b04      	ldr	r3, [sp, #16]
 800db70:	eba0 000a 	sub.w	r0, r0, sl
 800db74:	2240      	movs	r2, #64	; 0x40
 800db76:	4082      	lsls	r2, r0
 800db78:	4313      	orrs	r3, r2
 800db7a:	3401      	adds	r4, #1
 800db7c:	9304      	str	r3, [sp, #16]
 800db7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db82:	4829      	ldr	r0, [pc, #164]	; (800dc28 <_vfiprintf_r+0x224>)
 800db84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db88:	2206      	movs	r2, #6
 800db8a:	f7f2 fb49 	bl	8000220 <memchr>
 800db8e:	2800      	cmp	r0, #0
 800db90:	d03f      	beq.n	800dc12 <_vfiprintf_r+0x20e>
 800db92:	4b26      	ldr	r3, [pc, #152]	; (800dc2c <_vfiprintf_r+0x228>)
 800db94:	bb1b      	cbnz	r3, 800dbde <_vfiprintf_r+0x1da>
 800db96:	9b03      	ldr	r3, [sp, #12]
 800db98:	3307      	adds	r3, #7
 800db9a:	f023 0307 	bic.w	r3, r3, #7
 800db9e:	3308      	adds	r3, #8
 800dba0:	9303      	str	r3, [sp, #12]
 800dba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba4:	443b      	add	r3, r7
 800dba6:	9309      	str	r3, [sp, #36]	; 0x24
 800dba8:	e768      	b.n	800da7c <_vfiprintf_r+0x78>
 800dbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbae:	460c      	mov	r4, r1
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	e7a6      	b.n	800db02 <_vfiprintf_r+0xfe>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	3401      	adds	r4, #1
 800dbb8:	9305      	str	r3, [sp, #20]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	f04f 0c0a 	mov.w	ip, #10
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbc6:	3a30      	subs	r2, #48	; 0x30
 800dbc8:	2a09      	cmp	r2, #9
 800dbca:	d903      	bls.n	800dbd4 <_vfiprintf_r+0x1d0>
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0c6      	beq.n	800db5e <_vfiprintf_r+0x15a>
 800dbd0:	9105      	str	r1, [sp, #20]
 800dbd2:	e7c4      	b.n	800db5e <_vfiprintf_r+0x15a>
 800dbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbd8:	4604      	mov	r4, r0
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e7f0      	b.n	800dbc0 <_vfiprintf_r+0x1bc>
 800dbde:	ab03      	add	r3, sp, #12
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	462a      	mov	r2, r5
 800dbe4:	4b12      	ldr	r3, [pc, #72]	; (800dc30 <_vfiprintf_r+0x22c>)
 800dbe6:	a904      	add	r1, sp, #16
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7fb fe6d 	bl	80098c8 <_printf_float>
 800dbee:	4607      	mov	r7, r0
 800dbf0:	1c78      	adds	r0, r7, #1
 800dbf2:	d1d6      	bne.n	800dba2 <_vfiprintf_r+0x19e>
 800dbf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbf6:	07d9      	lsls	r1, r3, #31
 800dbf8:	d405      	bmi.n	800dc06 <_vfiprintf_r+0x202>
 800dbfa:	89ab      	ldrh	r3, [r5, #12]
 800dbfc:	059a      	lsls	r2, r3, #22
 800dbfe:	d402      	bmi.n	800dc06 <_vfiprintf_r+0x202>
 800dc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc02:	f7fc fdc8 	bl	800a796 <__retarget_lock_release_recursive>
 800dc06:	89ab      	ldrh	r3, [r5, #12]
 800dc08:	065b      	lsls	r3, r3, #25
 800dc0a:	f53f af1d 	bmi.w	800da48 <_vfiprintf_r+0x44>
 800dc0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc10:	e71c      	b.n	800da4c <_vfiprintf_r+0x48>
 800dc12:	ab03      	add	r3, sp, #12
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	462a      	mov	r2, r5
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <_vfiprintf_r+0x22c>)
 800dc1a:	a904      	add	r1, sp, #16
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	f7fc f8f7 	bl	8009e10 <_printf_i>
 800dc22:	e7e4      	b.n	800dbee <_vfiprintf_r+0x1ea>
 800dc24:	0800e3b9 	.word	0x0800e3b9
 800dc28:	0800e3c3 	.word	0x0800e3c3
 800dc2c:	080098c9 	.word	0x080098c9
 800dc30:	0800d9e1 	.word	0x0800d9e1
 800dc34:	0800e3bf 	.word	0x0800e3bf

0800dc38 <__swbuf_r>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	460e      	mov	r6, r1
 800dc3c:	4614      	mov	r4, r2
 800dc3e:	4605      	mov	r5, r0
 800dc40:	b118      	cbz	r0, 800dc4a <__swbuf_r+0x12>
 800dc42:	6a03      	ldr	r3, [r0, #32]
 800dc44:	b90b      	cbnz	r3, 800dc4a <__swbuf_r+0x12>
 800dc46:	f7fc fc8f 	bl	800a568 <__sinit>
 800dc4a:	69a3      	ldr	r3, [r4, #24]
 800dc4c:	60a3      	str	r3, [r4, #8]
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	071a      	lsls	r2, r3, #28
 800dc52:	d525      	bpl.n	800dca0 <__swbuf_r+0x68>
 800dc54:	6923      	ldr	r3, [r4, #16]
 800dc56:	b31b      	cbz	r3, 800dca0 <__swbuf_r+0x68>
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	6922      	ldr	r2, [r4, #16]
 800dc5c:	1a98      	subs	r0, r3, r2
 800dc5e:	6963      	ldr	r3, [r4, #20]
 800dc60:	b2f6      	uxtb	r6, r6
 800dc62:	4283      	cmp	r3, r0
 800dc64:	4637      	mov	r7, r6
 800dc66:	dc04      	bgt.n	800dc72 <__swbuf_r+0x3a>
 800dc68:	4621      	mov	r1, r4
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f7ff fa54 	bl	800d118 <_fflush_r>
 800dc70:	b9e0      	cbnz	r0, 800dcac <__swbuf_r+0x74>
 800dc72:	68a3      	ldr	r3, [r4, #8]
 800dc74:	3b01      	subs	r3, #1
 800dc76:	60a3      	str	r3, [r4, #8]
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	1c5a      	adds	r2, r3, #1
 800dc7c:	6022      	str	r2, [r4, #0]
 800dc7e:	701e      	strb	r6, [r3, #0]
 800dc80:	6962      	ldr	r2, [r4, #20]
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d004      	beq.n	800dc92 <__swbuf_r+0x5a>
 800dc88:	89a3      	ldrh	r3, [r4, #12]
 800dc8a:	07db      	lsls	r3, r3, #31
 800dc8c:	d506      	bpl.n	800dc9c <__swbuf_r+0x64>
 800dc8e:	2e0a      	cmp	r6, #10
 800dc90:	d104      	bne.n	800dc9c <__swbuf_r+0x64>
 800dc92:	4621      	mov	r1, r4
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7ff fa3f 	bl	800d118 <_fflush_r>
 800dc9a:	b938      	cbnz	r0, 800dcac <__swbuf_r+0x74>
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dca0:	4621      	mov	r1, r4
 800dca2:	4628      	mov	r0, r5
 800dca4:	f000 f806 	bl	800dcb4 <__swsetup_r>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d0d5      	beq.n	800dc58 <__swbuf_r+0x20>
 800dcac:	f04f 37ff 	mov.w	r7, #4294967295
 800dcb0:	e7f4      	b.n	800dc9c <__swbuf_r+0x64>
	...

0800dcb4 <__swsetup_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4b2a      	ldr	r3, [pc, #168]	; (800dd60 <__swsetup_r+0xac>)
 800dcb8:	4605      	mov	r5, r0
 800dcba:	6818      	ldr	r0, [r3, #0]
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	b118      	cbz	r0, 800dcc8 <__swsetup_r+0x14>
 800dcc0:	6a03      	ldr	r3, [r0, #32]
 800dcc2:	b90b      	cbnz	r3, 800dcc8 <__swsetup_r+0x14>
 800dcc4:	f7fc fc50 	bl	800a568 <__sinit>
 800dcc8:	89a3      	ldrh	r3, [r4, #12]
 800dcca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcce:	0718      	lsls	r0, r3, #28
 800dcd0:	d422      	bmi.n	800dd18 <__swsetup_r+0x64>
 800dcd2:	06d9      	lsls	r1, r3, #27
 800dcd4:	d407      	bmi.n	800dce6 <__swsetup_r+0x32>
 800dcd6:	2309      	movs	r3, #9
 800dcd8:	602b      	str	r3, [r5, #0]
 800dcda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcde:	81a3      	strh	r3, [r4, #12]
 800dce0:	f04f 30ff 	mov.w	r0, #4294967295
 800dce4:	e034      	b.n	800dd50 <__swsetup_r+0x9c>
 800dce6:	0758      	lsls	r0, r3, #29
 800dce8:	d512      	bpl.n	800dd10 <__swsetup_r+0x5c>
 800dcea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcec:	b141      	cbz	r1, 800dd00 <__swsetup_r+0x4c>
 800dcee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcf2:	4299      	cmp	r1, r3
 800dcf4:	d002      	beq.n	800dcfc <__swsetup_r+0x48>
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f7fd fbec 	bl	800b4d4 <_free_r>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	6363      	str	r3, [r4, #52]	; 0x34
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd06:	81a3      	strh	r3, [r4, #12]
 800dd08:	2300      	movs	r3, #0
 800dd0a:	6063      	str	r3, [r4, #4]
 800dd0c:	6923      	ldr	r3, [r4, #16]
 800dd0e:	6023      	str	r3, [r4, #0]
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	f043 0308 	orr.w	r3, r3, #8
 800dd16:	81a3      	strh	r3, [r4, #12]
 800dd18:	6923      	ldr	r3, [r4, #16]
 800dd1a:	b94b      	cbnz	r3, 800dd30 <__swsetup_r+0x7c>
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd26:	d003      	beq.n	800dd30 <__swsetup_r+0x7c>
 800dd28:	4621      	mov	r1, r4
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	f000 f88c 	bl	800de48 <__smakebuf_r>
 800dd30:	89a0      	ldrh	r0, [r4, #12]
 800dd32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd36:	f010 0301 	ands.w	r3, r0, #1
 800dd3a:	d00a      	beq.n	800dd52 <__swsetup_r+0x9e>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60a3      	str	r3, [r4, #8]
 800dd40:	6963      	ldr	r3, [r4, #20]
 800dd42:	425b      	negs	r3, r3
 800dd44:	61a3      	str	r3, [r4, #24]
 800dd46:	6923      	ldr	r3, [r4, #16]
 800dd48:	b943      	cbnz	r3, 800dd5c <__swsetup_r+0xa8>
 800dd4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd4e:	d1c4      	bne.n	800dcda <__swsetup_r+0x26>
 800dd50:	bd38      	pop	{r3, r4, r5, pc}
 800dd52:	0781      	lsls	r1, r0, #30
 800dd54:	bf58      	it	pl
 800dd56:	6963      	ldrpl	r3, [r4, #20]
 800dd58:	60a3      	str	r3, [r4, #8]
 800dd5a:	e7f4      	b.n	800dd46 <__swsetup_r+0x92>
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	e7f7      	b.n	800dd50 <__swsetup_r+0x9c>
 800dd60:	20000098 	.word	0x20000098

0800dd64 <_raise_r>:
 800dd64:	291f      	cmp	r1, #31
 800dd66:	b538      	push	{r3, r4, r5, lr}
 800dd68:	4604      	mov	r4, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	d904      	bls.n	800dd78 <_raise_r+0x14>
 800dd6e:	2316      	movs	r3, #22
 800dd70:	6003      	str	r3, [r0, #0]
 800dd72:	f04f 30ff 	mov.w	r0, #4294967295
 800dd76:	bd38      	pop	{r3, r4, r5, pc}
 800dd78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dd7a:	b112      	cbz	r2, 800dd82 <_raise_r+0x1e>
 800dd7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd80:	b94b      	cbnz	r3, 800dd96 <_raise_r+0x32>
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 f830 	bl	800dde8 <_getpid_r>
 800dd88:	462a      	mov	r2, r5
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd92:	f000 b817 	b.w	800ddc4 <_kill_r>
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d00a      	beq.n	800ddb0 <_raise_r+0x4c>
 800dd9a:	1c59      	adds	r1, r3, #1
 800dd9c:	d103      	bne.n	800dda6 <_raise_r+0x42>
 800dd9e:	2316      	movs	r3, #22
 800dda0:	6003      	str	r3, [r0, #0]
 800dda2:	2001      	movs	r0, #1
 800dda4:	e7e7      	b.n	800dd76 <_raise_r+0x12>
 800dda6:	2400      	movs	r4, #0
 800dda8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ddac:	4628      	mov	r0, r5
 800ddae:	4798      	blx	r3
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	e7e0      	b.n	800dd76 <_raise_r+0x12>

0800ddb4 <raise>:
 800ddb4:	4b02      	ldr	r3, [pc, #8]	; (800ddc0 <raise+0xc>)
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	6818      	ldr	r0, [r3, #0]
 800ddba:	f7ff bfd3 	b.w	800dd64 <_raise_r>
 800ddbe:	bf00      	nop
 800ddc0:	20000098 	.word	0x20000098

0800ddc4 <_kill_r>:
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	4d07      	ldr	r5, [pc, #28]	; (800dde4 <_kill_r+0x20>)
 800ddc8:	2300      	movs	r3, #0
 800ddca:	4604      	mov	r4, r0
 800ddcc:	4608      	mov	r0, r1
 800ddce:	4611      	mov	r1, r2
 800ddd0:	602b      	str	r3, [r5, #0]
 800ddd2:	f7f4 ffa5 	bl	8002d20 <_kill>
 800ddd6:	1c43      	adds	r3, r0, #1
 800ddd8:	d102      	bne.n	800dde0 <_kill_r+0x1c>
 800ddda:	682b      	ldr	r3, [r5, #0]
 800dddc:	b103      	cbz	r3, 800dde0 <_kill_r+0x1c>
 800ddde:	6023      	str	r3, [r4, #0]
 800dde0:	bd38      	pop	{r3, r4, r5, pc}
 800dde2:	bf00      	nop
 800dde4:	200008ec 	.word	0x200008ec

0800dde8 <_getpid_r>:
 800dde8:	f7f4 bf92 	b.w	8002d10 <_getpid>

0800ddec <_malloc_usable_size_r>:
 800ddec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf0:	1f18      	subs	r0, r3, #4
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	bfbc      	itt	lt
 800ddf6:	580b      	ldrlt	r3, [r1, r0]
 800ddf8:	18c0      	addlt	r0, r0, r3
 800ddfa:	4770      	bx	lr

0800ddfc <__swhatbuf_r>:
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	460c      	mov	r4, r1
 800de00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de04:	2900      	cmp	r1, #0
 800de06:	b096      	sub	sp, #88	; 0x58
 800de08:	4615      	mov	r5, r2
 800de0a:	461e      	mov	r6, r3
 800de0c:	da0d      	bge.n	800de2a <__swhatbuf_r+0x2e>
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de14:	f04f 0100 	mov.w	r1, #0
 800de18:	bf0c      	ite	eq
 800de1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de1e:	2340      	movne	r3, #64	; 0x40
 800de20:	2000      	movs	r0, #0
 800de22:	6031      	str	r1, [r6, #0]
 800de24:	602b      	str	r3, [r5, #0]
 800de26:	b016      	add	sp, #88	; 0x58
 800de28:	bd70      	pop	{r4, r5, r6, pc}
 800de2a:	466a      	mov	r2, sp
 800de2c:	f000 f848 	bl	800dec0 <_fstat_r>
 800de30:	2800      	cmp	r0, #0
 800de32:	dbec      	blt.n	800de0e <__swhatbuf_r+0x12>
 800de34:	9901      	ldr	r1, [sp, #4]
 800de36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de3e:	4259      	negs	r1, r3
 800de40:	4159      	adcs	r1, r3
 800de42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de46:	e7eb      	b.n	800de20 <__swhatbuf_r+0x24>

0800de48 <__smakebuf_r>:
 800de48:	898b      	ldrh	r3, [r1, #12]
 800de4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de4c:	079d      	lsls	r5, r3, #30
 800de4e:	4606      	mov	r6, r0
 800de50:	460c      	mov	r4, r1
 800de52:	d507      	bpl.n	800de64 <__smakebuf_r+0x1c>
 800de54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	6123      	str	r3, [r4, #16]
 800de5c:	2301      	movs	r3, #1
 800de5e:	6163      	str	r3, [r4, #20]
 800de60:	b002      	add	sp, #8
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	ab01      	add	r3, sp, #4
 800de66:	466a      	mov	r2, sp
 800de68:	f7ff ffc8 	bl	800ddfc <__swhatbuf_r>
 800de6c:	9900      	ldr	r1, [sp, #0]
 800de6e:	4605      	mov	r5, r0
 800de70:	4630      	mov	r0, r6
 800de72:	f7fd fba3 	bl	800b5bc <_malloc_r>
 800de76:	b948      	cbnz	r0, 800de8c <__smakebuf_r+0x44>
 800de78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de7c:	059a      	lsls	r2, r3, #22
 800de7e:	d4ef      	bmi.n	800de60 <__smakebuf_r+0x18>
 800de80:	f023 0303 	bic.w	r3, r3, #3
 800de84:	f043 0302 	orr.w	r3, r3, #2
 800de88:	81a3      	strh	r3, [r4, #12]
 800de8a:	e7e3      	b.n	800de54 <__smakebuf_r+0xc>
 800de8c:	89a3      	ldrh	r3, [r4, #12]
 800de8e:	6020      	str	r0, [r4, #0]
 800de90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	9b00      	ldr	r3, [sp, #0]
 800de98:	6163      	str	r3, [r4, #20]
 800de9a:	9b01      	ldr	r3, [sp, #4]
 800de9c:	6120      	str	r0, [r4, #16]
 800de9e:	b15b      	cbz	r3, 800deb8 <__smakebuf_r+0x70>
 800dea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dea4:	4630      	mov	r0, r6
 800dea6:	f000 f81d 	bl	800dee4 <_isatty_r>
 800deaa:	b128      	cbz	r0, 800deb8 <__smakebuf_r+0x70>
 800deac:	89a3      	ldrh	r3, [r4, #12]
 800deae:	f023 0303 	bic.w	r3, r3, #3
 800deb2:	f043 0301 	orr.w	r3, r3, #1
 800deb6:	81a3      	strh	r3, [r4, #12]
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	431d      	orrs	r5, r3
 800debc:	81a5      	strh	r5, [r4, #12]
 800debe:	e7cf      	b.n	800de60 <__smakebuf_r+0x18>

0800dec0 <_fstat_r>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4d07      	ldr	r5, [pc, #28]	; (800dee0 <_fstat_r+0x20>)
 800dec4:	2300      	movs	r3, #0
 800dec6:	4604      	mov	r4, r0
 800dec8:	4608      	mov	r0, r1
 800deca:	4611      	mov	r1, r2
 800decc:	602b      	str	r3, [r5, #0]
 800dece:	f7f4 ff86 	bl	8002dde <_fstat>
 800ded2:	1c43      	adds	r3, r0, #1
 800ded4:	d102      	bne.n	800dedc <_fstat_r+0x1c>
 800ded6:	682b      	ldr	r3, [r5, #0]
 800ded8:	b103      	cbz	r3, 800dedc <_fstat_r+0x1c>
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	bd38      	pop	{r3, r4, r5, pc}
 800dede:	bf00      	nop
 800dee0:	200008ec 	.word	0x200008ec

0800dee4 <_isatty_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4d06      	ldr	r5, [pc, #24]	; (800df00 <_isatty_r+0x1c>)
 800dee8:	2300      	movs	r3, #0
 800deea:	4604      	mov	r4, r0
 800deec:	4608      	mov	r0, r1
 800deee:	602b      	str	r3, [r5, #0]
 800def0:	f7f4 ff85 	bl	8002dfe <_isatty>
 800def4:	1c43      	adds	r3, r0, #1
 800def6:	d102      	bne.n	800defe <_isatty_r+0x1a>
 800def8:	682b      	ldr	r3, [r5, #0]
 800defa:	b103      	cbz	r3, 800defe <_isatty_r+0x1a>
 800defc:	6023      	str	r3, [r4, #0]
 800defe:	bd38      	pop	{r3, r4, r5, pc}
 800df00:	200008ec 	.word	0x200008ec

0800df04 <_init>:
 800df04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df06:	bf00      	nop
 800df08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df0a:	bc08      	pop	{r3}
 800df0c:	469e      	mov	lr, r3
 800df0e:	4770      	bx	lr

0800df10 <_fini>:
 800df10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df12:	bf00      	nop
 800df14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df16:	bc08      	pop	{r3}
 800df18:	469e      	mov	lr, r3
 800df1a:	4770      	bx	lr
